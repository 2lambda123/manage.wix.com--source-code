'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _urlMap = require('./urlMap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function httpRequest(url) {
  return new Promise(function (resolve, reject) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'text';
    xhr.withCredentials = true;
    xhr.onload = function () {
      if (xhr.status >= 200 && xhr.status < 400) {
        resolve(xhr.responseText);
      } else {
        reject('Failed to load ' + url + ', status ' + xhr.status);
      }
    };
    xhr.onerror = function () {
      return reject('Failed to load ' + url);
    };
    xhr.send();
  });
}

function tryParse(data) {
  if (typeof data === 'string') {
    try {
      return JSON.parse(data);
    } catch (e) {/* Ignore */}
  }
  return data;
}

var Experiments = function () {
  function Experiments() {
    var obj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    (0, _classCallCheck3.default)(this, Experiments);

    this.useNewApi = obj.useNewApi || false;
    this.experiments = obj.experiments || {};
    this.loaders = [];
    this.baseUrl = obj.baseUrl || '';
    if (obj.scope) {
      this.load(obj.scope);
    }
  }

  (0, _createClass3.default)(Experiments, [{
    key: 'add',
    value: function add(obj) {
      this.experiments = (0, _extends3.default)({}, this.experiments, obj);
    }
  }, {
    key: 'get',
    value: function get(key) {
      return this.experiments[key];
    }
  }, {
    key: 'enabled',
    value: function enabled(key) {
      return this.get(key) === 'true';
    }
  }, {
    key: 'all',
    value: function all() {
      return this.experiments;
    }
  }, {
    key: '_addLoader',
    value: function _addLoader(promise) {
      var _this = this;

      this.loaders.push(promise);
      promise.then(function () {
        _this.loaders = _this.loaders.filter(function (x) {
          return x !== promise;
        });
      });
      return promise;
    }
  }, {
    key: '_getUrlWithFallback',
    value: function _getUrlWithFallback(url, fallback) {
      return httpRequest(url).catch(function () {
        return fallback;
      });
    }
  }, {
    key: 'load',
    value: function load(scope) {
      var _this2 = this;

      var url = '' + this.baseUrl + (0, _urlMap.getAllInScopePath)(scope, this.useNewApi);
      var result = this._getUrlWithFallback(url, {}).then(tryParse).then(function (obj) {
        return _this2.add(obj);
      });
      return this._addLoader(result);
    }
  }, {
    key: 'conduct',
    value: function conduct(spec, fallbackValue) {
      var _this3 = this;

      var url = '' + this.baseUrl + (0, _urlMap.getExperimentPath)(spec, fallbackValue, this.useNewApi);
      var result = this._getUrlWithFallback(url, fallbackValue).then(function (value) {
        _this3.add((0, _defineProperty3.default)({}, spec, value));
        return value;
      });
      return this._addLoader(result);
    }
  }, {
    key: 'pending',
    value: function pending() {
      return !!this.loaders.length;
    }
  }, {
    key: 'ready',
    value: function ready() {
      return Promise.all(this.loaders);
    }
  }]);
  return Experiments;
}();

exports.default = Experiments;