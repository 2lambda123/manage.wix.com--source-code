"use strict";

exports.__esModule = true;
exports["default"] = void 0;
var css = {
  convertTime: function convertTime(time) {
    return time ? time / 1000 + "s" : '';
  },
  convertSize: function convertSize(size) {
    return size ? size + "px" : '0';
  }
};
var translateTemplates = {
  top: function top(size) {
    return "translate(0, " + size + ")";
  },
  bottom: function bottom(size) {
    return "translate(0, -" + size + ")";
  },
  left: function left(size) {
    return "translate(" + size + ", 0)";
  },
  right: function right(size) {
    return "translate(-" + size + ", 0)";
  }
};
var switchDirection = {
  top: 'bottom',
  bottom: 'top',
  right: 'left',
  left: 'right'
};

var getTranslate = function getTranslate(translate, inOrOut) {
  var mode = inOrOut === 'in' ? 'enter' : 'exit';
  var direction = translate[mode].direction;

  if (mode === 'exit') {
    direction = switchDirection[direction];
  }

  return translateTemplates[direction](translate[mode].size);
};

var StyleBuilder = /*#__PURE__*/function () {
  function StyleBuilder() {
    this.styles = void 0;
    this.styles = {};
  }

  var _proto = StyleBuilder.prototype;

  _proto["with"] = function _with(styles) {
    this.styles = Object.assign({}, this.styles, styles);
    return this;
  };

  _proto.withTransitionDelay = function withTransitionDelay(duration) {
    return this["with"](duration && {
      transitionDelay: css.convertTime(duration)
    });
  };

  _proto.withAnimationDelay = function withAnimationDelay(duration) {
    return this["with"](duration && {
      animationDuration: css.convertTime(duration)
    });
  };

  _proto.withTranslate = function withTranslate(translate, inOrOut) {
    return this["with"](translate && {
      transform: getTranslate(translate, inOrOut)
    });
  };

  _proto.withScale = function withScale(scale) {
    return this["with"](scale && {
      transform: "scale(" + scale + ")"
    });
  };

  _proto.withHeight = function withHeight(height, size) {
    return this["with"](height && {
      maxHeight: css.convertSize(size)
    });
  };

  _proto.withWidth = function withWidth(width, size) {
    return this["with"](width && {
      maxWidth: css.convertSize(size)
    });
  };

  _proto.build = function build() {
    return this.styles;
  };

  return StyleBuilder;
}();

var _default = StyleBuilder;
exports["default"] = _default;