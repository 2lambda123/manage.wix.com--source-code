import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';
import { st, classes } from './SidebarDivider.st.css';
import Divider from '../Divider';
import { SidebarContext } from '../Sidebar/SidebarAPI';
import { sidebarSkins } from '../Sidebar/constants';
import { skins as dividerSkins } from '../Divider/constants';
import { WixStyleReactContext } from '../WixStyleReactProvider/context';
/** A divider within the sidebar that supports inner and full mode */

var SidebarDivider = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(SidebarDivider, _React$PureComponent);

  var _super = _createSuper(SidebarDivider);

  function SidebarDivider() {
    _classCallCheck(this, SidebarDivider);

    return _super.apply(this, arguments);
  }

  _createClass(SidebarDivider, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          dataHook = _this$props.dataHook,
          fullWidth = _this$props.fullWidth;
      return /*#__PURE__*/React.createElement(WixStyleReactContext.Consumer, null, function () {
        return /*#__PURE__*/React.createElement(SidebarContext.Consumer, null, function (context) {
          var skin = context && context.getSkin() || sidebarSkins.dark;
          return /*#__PURE__*/React.createElement("div", {
            "data-hook": dataHook,
            "data-full-width": fullWidth,
            className: st(classes.root, fullWidth ? classes.fullWidth : '')
          }, /*#__PURE__*/React.createElement(Divider, {
            skin: skin === sidebarSkins.light ? dividerSkins.light : dividerSkins.dark,
            className: classes.divider
          }));
        });
      });
    }
  }]);

  return SidebarDivider;
}(React.PureComponent);

_defineProperty(SidebarDivider, "displayName", 'SidebarDivider');

_defineProperty(SidebarDivider, "propTypes", {
  /** Applied as data-hook HTML attribute that can be used in the tests */
  dataHook: PropTypes.string,

  /** Indicates whether to remove the margin from sides */
  fullWidth: PropTypes.bool
});

export default SidebarDivider;