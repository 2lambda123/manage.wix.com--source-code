import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { st, classes } from './Sidebar.st.css';
import { dataHooks, sidebarSkins } from './constants';
/** A sidebar content children wrapper to add gradient  */

export var SidebarContentWrapper = /*#__PURE__*/function (_Component) {
  _inherits(SidebarContentWrapper, _Component);

  var _super = _createSuper(SidebarContentWrapper);

  function SidebarContentWrapper(props) {
    var _this;

    _classCallCheck(this, SidebarContentWrapper);

    _this = _super.call(this, props);

    _defineProperty(_assertThisInitialized(_this), "_handleChildrenResize", function () {
      _this._shouldAddGradient();
    });

    _this.childrenContainerRef = /*#__PURE__*/React.createRef();
    _this.childrenContentRef = /*#__PURE__*/React.createRef();
    _this.state = {
      isScrollbarDisplayed: false
    };
    _this.childrenResizeObserver = typeof window !== 'undefined' && 'ResizeObserver' in window && new ResizeObserver(_this._handleChildrenResize);
    return _this;
  }

  _createClass(SidebarContentWrapper, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this._shouldAddGradient();

      var childrenResizeObserver = this.childrenResizeObserver,
          childrenContainerRef = this.childrenContainerRef,
          childrenContentRef = this.childrenContentRef;

      if (childrenResizeObserver && childrenContainerRef.current) {
        childrenResizeObserver.observe(childrenContainerRef.current);
      }

      if (childrenResizeObserver && childrenContentRef.current) {
        childrenResizeObserver.observe(childrenContentRef.current);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var childrenResizeObserver = this.childrenResizeObserver,
          childrenContainerRef = this.childrenContainerRef,
          childrenContentRef = this.childrenContentRef;

      if (childrenResizeObserver && childrenContainerRef.current) {
        childrenResizeObserver.unobserve(childrenContainerRef.current);
      }

      if (childrenResizeObserver && childrenContentRef.current) {
        childrenResizeObserver.unobserve(childrenContentRef.current);
      }
    }
  }, {
    key: "_shouldAddGradient",
    value: function _shouldAddGradient() {
      var _this$childrenContain = this.childrenContainerRef.current,
          scrollHeight = _this$childrenContain.scrollHeight,
          clientHeight = _this$childrenContain.clientHeight;
      this.setState({
        isScrollbarDisplayed: scrollHeight > clientHeight
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          skin = _this$props.skin,
          containerClasses = _this$props.containerClasses,
          children = _this$props.children,
          containerDataHook = _this$props.containerDataHook;

      var css = _objectSpread(_objectSpread({}, classes), {}, {
        containerClasses: containerClasses
      });

      var gradientClasses = st(classes.gradient, {
        skin: skin
      });
      return /*#__PURE__*/React.createElement("div", {
        className: css.containerClasses,
        ref: this.childrenContainerRef,
        "data-hook": containerDataHook
      }, /*#__PURE__*/React.createElement("div", {
        className: css.childrenContent,
        ref: this.childrenContentRef
      }, children), this.state.isScrollbarDisplayed && /*#__PURE__*/React.createElement("div", {
        className: gradientClasses,
        "data-hook": dataHooks.scrollBarGradient
      }));
    }
  }]);

  return SidebarContentWrapper;
}(Component);

_defineProperty(SidebarContentWrapper, "propTypes", {
  skin: PropTypes.oneOf(['dark', 'light']),
  containerDataHook: PropTypes.string,
  containerClasses: PropTypes.string,
  children: PropTypes.node
});

_defineProperty(SidebarContentWrapper, "defaultProps", {
  skin: sidebarSkins.dark
});