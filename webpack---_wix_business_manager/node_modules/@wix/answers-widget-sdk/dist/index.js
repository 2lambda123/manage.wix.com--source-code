"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnswersWidget = void 0;
var types_1 = require("./types");
__exportStar(require("./types"), exports);
var AnswersWidget = /** @class */ (function () {
    function AnswersWidget() {
        var _this = this;
        this.sdkMemory = {
            location: {
                url: window.location.href,
                title: document.title
            }
        };
        this.getContactOptionsRequests = [];
        this.onChatMessageReceivedCallbacks = [];
        this.onChatMessageSentCallbacks = [];
        this.onChatStartedCallbacks = [];
        this.viewVisibleCallbacks = [];
        this.eventListenerCallbacks = [];
        this.chatTicketId = '';
        this.init = function (iframe, config) {
            _this.setFrame(iframe);
            _this.setListener();
            iframe.src = "https://" + config.tenant + ".wixanswers.com/apps/widget/v1/" + config.tenant + "/" + config.widgetId + "/view/" + config.locale;
        };
        this.cleanup = this.removeListener;
        this.addEventListener = function (listener) {
            _this.eventListenerCallbacks.push(listener);
        };
        this.addHtmlToHomePageHeader = function (headerHtml) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_CUSTOM_HOME_PAGE_HEADER, data: { headerHtml: headerHtml } });
            _this.sdkMemory.customHomePageHeader = headerHtml;
        };
        this.addHtmlToKbHeader = function (headerHtml) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_CUSTOM_KB_HEADER, data: { headerHtml: headerHtml } });
            _this.sdkMemory.customKbHeader = headerHtml;
        };
        this.featuredArticlesSearch = function (searchTerm) {
            _this.sdkMemory.featuredArticleTerm = searchTerm;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.FEATURED_ARTICLE_SEARCH, data: { term: searchTerm } });
        };
        this.fillContactForm = function (formData) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.FILL_CONTACT_FORM, data: { formData: formData } });
            _this.sdkMemory.contactFormData = formData;
        };
        this.getContactOptions = function () {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.CONTACT_OPTIONS_REQUEST, data: {} });
            return new Promise(function (resolve) {
                _this.getContactOptionsRequests.push(resolve);
            });
        };
        this.goToArticle = function (articleId) {
            _this.sdkMemory.goToArticleId = articleId;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.GO_TO_ARTICLE, data: { articleId: articleId } });
        };
        this.goToCallback = function () {
            _this.sdkMemory.goToCallback = true;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.GO_TO_CALLBACK, data: {} });
        };
        this.goToCategory = function (categoryId) {
            _this.sdkMemory.goToCategoryId = categoryId;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.GO_TO_CATEGORY, data: { categoryId: categoryId } });
        };
        this.goToChat = function () {
            _this.sdkMemory.goToChat = true;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.GO_TO_CHAT, data: {} });
        };
        this.goToChatList = function () {
            _this.sdkMemory.goToChatList = true;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.GO_TO_CHAT_LIST, data: {} });
        };
        this.goToContact = function () {
            _this.sdkMemory.goToContact = true;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.GO_TO_CONTACT, data: {} });
        };
        this.identifyUser = function (userData) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.IDENTIFY_USER, data: { userData: userData } });
            _this.sdkMemory.user = userData;
        };
        this.initiateChatbot = function (schema, callback, title) {
            if (schema && callback) {
                _this.sdkMemory.chatbot = {
                    schema: schema,
                    callback: callback,
                    title: title
                };
                _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.CHATBOT_INITIATED, data: { schema: schema, title: title } });
            }
        };
        this.preventReopeningChat = function (prevent) {
            if (prevent === void 0) { prevent = true; }
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.PREVENT_REOPENING_CHAT, data: { prevent: prevent } });
            _this.sdkMemory.preventReopeningChat = prevent;
        };
        this.sendChatMessage = function (data) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SEND_CHAT_MESSAGE, data: data });
            _this.sdkMemory.chatMessage = data;
        };
        this.setCustomFields = function (customFields) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_CUSTOM_FIELDS, data: { customFields: customFields } });
            _this.sdkMemory.customFields = customFields;
        };
        this.setCustomFieldsConfiguration = function (customFieldsConfigurationData) {
            _this.sdkMemory.customFieldsConfigurationData = customFieldsConfigurationData;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_CUSTOM_FIELDS_CONFIGURATION, data: { customFieldsConfigurationData: customFieldsConfigurationData } });
        };
        this.setFeaturedArticles = function (articleIds) {
            _this.sdkMemory.featuredArticleIds = articleIds;
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_FEATURED_ARTICLES, data: { articleIds: articleIds } });
        };
        this.setLabels = function (labelIds) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_LABELS, data: { labelIds: labelIds } });
            _this.sdkMemory.labelIds = labelIds;
        };
        this.setOverrideTexts = function (overrideTexts) {
            _this.sendScopedPostMessage({ type: types_1.WidgetMessageType.SET_OVERRIDE_TEXTS, data: { overrideTexts: overrideTexts } });
            _this.sdkMemory.overrideTexts = overrideTexts;
        };
        this.onChatMessageReceived = function (cb) {
            _this.onChatMessageReceivedCallbacks = __spreadArray(__spreadArray([], _this.onChatMessageReceivedCallbacks), [cb]);
        };
        this.onChatMessageSent = function (cb) {
            _this.onChatMessageSentCallbacks = __spreadArray(__spreadArray([], _this.onChatMessageSentCallbacks), [cb]);
        };
        this.onChatStarted = function (cb) {
            _this.onChatStartedCallbacks = __spreadArray(__spreadArray([], _this.onChatStartedCallbacks), [cb]);
            if (_this.chatTicketId) {
                cb(_this.chatTicketId);
            }
        };
        this.onViewVisible = function (cb) {
            _this.viewVisibleCallbacks.push(cb);
        };
        this.sendScopedPostMessage = function (message) {
            var _a;
            if ((_a = _this.frame) === null || _a === void 0 ? void 0 : _a.contentWindow) {
                _this.sendPostMessage({ __ansWidget: message });
            }
        };
        this.sendPostMessage = function (data) {
            var _a;
            if ((_a = _this.frame) === null || _a === void 0 ? void 0 : _a.contentWindow) {
                _this.frame.contentWindow.postMessage(data, '*');
            }
        };
        this.listener = function (event) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isMessageFromFrame(event)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.handleFrameMessage(event)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        }); };
    }
    AnswersWidget.prototype.setFrame = function (iframe) {
        this.frame = iframe;
    };
    AnswersWidget.prototype.handleFrameMessage = function (event) {
        return __awaiter(this, void 0, void 0, function () {
            var message, _a, schema;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        message = event.data.__ansWidget;
                        _a = message.type;
                        switch (_a) {
                            case types_1.WidgetMessageType.CHAT_MESSAGE_RECEIVED: return [3 /*break*/, 1];
                            case types_1.WidgetMessageType.CHAT_MESSAGE_SENT: return [3 /*break*/, 2];
                            case types_1.WidgetMessageType.CHATBOT_USER_INPUT: return [3 /*break*/, 3];
                            case types_1.WidgetMessageType.CONTACT_OPTIONS_RESPONSE: return [3 /*break*/, 5];
                            case types_1.WidgetMessageType.ON_CHAT_STARTED: return [3 /*break*/, 6];
                            case types_1.WidgetMessageType.VIEW_LOADED: return [3 /*break*/, 7];
                            case types_1.WidgetMessageType.VIEW_VISIBLE: return [3 /*break*/, 8];
                            case types_1.WidgetMessageType.WIDGET_EVENT: return [3 /*break*/, 9];
                        }
                        return [3 /*break*/, 10];
                    case 1:
                        this.onChatMessageReceivedCallbacks.forEach(function (cb) { return cb(message.data); });
                        return [3 /*break*/, 10];
                    case 2:
                        this.onChatMessageSentCallbacks.forEach(function (cb) { return cb(message.data); });
                        return [3 /*break*/, 10];
                    case 3:
                        if (!this.sdkMemory.chatbot || !this.sdkMemory.chatbot.callback) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, (this.sdkMemory.chatbot.callback(message.data.value, message.data.type))];
                    case 4:
                        schema = _b.sent();
                        this.sendScopedPostMessage({ type: types_1.WidgetMessageType.CHATBOT_NEXT_STEP, data: { schema: schema } });
                        return [3 /*break*/, 10];
                    case 5:
                        this.getContactOptionsRequests.forEach(function (res) { return res(message.data.contactOptions); });
                        return [3 /*break*/, 10];
                    case 6:
                        this.onChatStartedCallbacks.forEach(function (cb) { return cb(message.data.ticketId); });
                        return [3 /*break*/, 10];
                    case 7:
                        this.onViewLoaded();
                        return [3 /*break*/, 10];
                    case 8:
                        this.viewVisibleCallbacks.forEach(function (cb) { return cb(); });
                        return [3 /*break*/, 10];
                    case 9:
                        this.eventListenerCallbacks.forEach(function (cb) { return cb(message.data.event); });
                        return [3 /*break*/, 10];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    AnswersWidget.prototype.isMessageFromFrame = function (event) {
        return this.frame && event.source === this.frame.contentWindow;
    };
    AnswersWidget.prototype.onViewLoaded = function () {
        var _a = this.sdkMemory, goToArticleId = _a.goToArticleId, location = _a.location, focusState = _a.focusState, isOpen = _a.isOpen, goToCategoryId = _a.goToCategoryId, goToCallback = _a.goToCallback, featuredArticleTerm = _a.featuredArticleTerm, featuredArticleIds = _a.featuredArticleIds, goToContact = _a.goToContact, goToChat = _a.goToChat, goToChatList = _a.goToChatList, labelIds = _a.labelIds, user = _a.user, chatMessage = _a.chatMessage, overrideTexts = _a.overrideTexts, customHomePageHeader = _a.customHomePageHeader, customKbHeader = _a.customKbHeader, customFields = _a.customFields, contactFormData = _a.contactFormData, preventReopeningChat = _a.preventReopeningChat, chatbot = _a.chatbot, customFieldsConfigurationData = _a.customFieldsConfigurationData;
        this.sendScopedPostMessage({ type: types_1.WidgetMessageType.LOCATION_CHANGED, data: location });
        this.sendScopedPostMessage({ type: types_1.WidgetMessageType.WINDOW_FOCUS, data: { hasFocus: !!focusState } });
        this.sendScopedPostMessage({ type: types_1.WidgetMessageType.WIDGET_OPEN, data: { isOpen: !!isOpen } });
        if (goToArticleId) {
            this.goToArticle(goToArticleId);
        }
        if (goToCategoryId) {
            this.goToCategory(goToCategoryId);
        }
        if (featuredArticleTerm) {
            this.featuredArticlesSearch(featuredArticleTerm);
        }
        if (featuredArticleIds) {
            this.setFeaturedArticles(featuredArticleIds);
        }
        if (goToContact) {
            this.goToContact();
        }
        if (goToChat) {
            this.goToChat();
        }
        if (goToChatList) {
            this.goToChatList();
        }
        if (goToCallback) {
            this.goToCallback();
        }
        if (labelIds) {
            this.setLabels(labelIds);
        }
        if (user) {
            this.identifyUser(user);
        }
        if (chatMessage) {
            this.sendChatMessage(chatMessage);
        }
        if (overrideTexts) {
            this.setOverrideTexts(overrideTexts);
        }
        if (customHomePageHeader) {
            this.addHtmlToHomePageHeader(customHomePageHeader);
        }
        if (customKbHeader) {
            this.addHtmlToKbHeader(customKbHeader);
        }
        if (customFields) {
            this.setCustomFields(customFields);
        }
        if (contactFormData) {
            this.fillContactForm(contactFormData);
        }
        if (preventReopeningChat) {
            this.preventReopeningChat(preventReopeningChat);
        }
        if (chatbot) {
            this.sendScopedPostMessage({ type: types_1.WidgetMessageType.CHATBOT_INITIATED, data: { schema: chatbot.schema, title: chatbot.title } });
        }
        if (customFieldsConfigurationData) {
            this.setCustomFieldsConfiguration(customFieldsConfigurationData);
        }
    };
    AnswersWidget.prototype.setListener = function () {
        window.addEventListener('message', this.listener, false);
    };
    AnswersWidget.prototype.removeListener = function () {
        window.removeEventListener('message', this.listener);
    };
    return AnswersWidget;
}());
exports.AnswersWidget = AnswersWidget;
