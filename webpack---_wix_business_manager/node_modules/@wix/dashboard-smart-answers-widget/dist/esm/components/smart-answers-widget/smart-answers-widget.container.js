import { __awaiter, __generator } from "tslib";
import React, { useCallback, useEffect, useMemo, useState } from 'react';
import { useTranslation } from '@wix/wix-i18n-config';
import AnswersWidget from '../../common/answers-sdk';
import { EDITORX_WIDGET_ID, WIX_WIDGET_ID, DEFAULT_ARTICLES_IDS, } from '../../common/constants';
import { SmartAnswersWidgetComponent } from './smart-answers-widget.component';
import { getVisitHelpCenterLinkHTMLElememnt, isPredictionEnabled, } from '../../common/utils';
import { getConnectClientLogger, logFeaturedArticlesViewd, } from '../../services/bi-logger/connect-client-bi-logger';
import { getMyAccountBiLogger } from '../../services/bi-logger/my-account-bi-logger';
import { getPrediction } from '../../services/prediction/prediction-services';
import { sendBIEvents } from '../../common/event-handlers';
import { EventType } from '@wix/answers-widget-sdk';
import { useIsMounted } from '../../common/hooks';
import { useExperiments } from '@wix/wix-experiments-react';
export var SmartAnswersWidgetContainer = React.memo(function (_a) {
    var msid = _a.msid, uuid = _a.uuid, origin = _a.origin, isEditorX = _a.isEditorX, onLoaded = _a.onLoaded;
    var _b = useState(false), loaded = _b[0], setLoaded = _b[1];
    var _c = useState(!isEditorX), shouldWaitForArticles = _c[0], setShouldWaitForArticles = _c[1];
    var _d = useState(null), sdk = _d[0], setSdk = _d[1];
    var _e = useTranslation(), t = _e.t, locale = _e.i18n.language;
    var _f = useExperiments({ suspense: false }), experiments = _f.experiments, ready = _f.ready;
    var widgetId = isEditorX ? EDITORX_WIDGET_ID : WIX_WIDGET_ID;
    var connectBiLogger = useMemo(function () { return getConnectClientLogger(uuid, widgetId); }, [uuid, widgetId]);
    var myAccountBiLogger = useMemo(function () { return getMyAccountBiLogger(uuid, origin, msid); }, [uuid, origin, msid]);
    var visitHelpCenterText = t('visit.help.center');
    var searchOurHelpCenterText = t('search.our.help.center');
    var helpCenterLink = useMemo(function () { return getVisitHelpCenterLinkHTMLElememnt(locale, visitHelpCenterText); }, [locale, visitHelpCenterText]);
    var isMounted = useIsMounted();
    var featuredArticlesUpdatedEventHandler = useCallback(function (event) {
        return event.type === EventType.FEATURED_ARTICLES_UPDATED &&
            setShouldWaitForArticles(false);
    }, []);
    var biEventsSender = useCallback(function (event) {
        return sendBIEvents(event, connectBiLogger, myAccountBiLogger);
    }, [connectBiLogger, myAccountBiLogger]);
    var onWidgetLoaded = useCallback(function () {
        setLoaded(true);
        onLoaded && onLoaded();
    }, [onLoaded]);
    var setFeaturedArticles = useCallback(function () { return __awaiter(void 0, void 0, void 0, function () {
        var articleIds;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!isPredictionEnabled(experiments.all())) return [3 /*break*/, 2];
                    return [4 /*yield*/, getPrediction()];
                case 1:
                    articleIds = _a.sent();
                    if (isMounted.current && articleIds && sdk) {
                        sdk.setFeaturedArticles(articleIds);
                    }
                    return [3 /*break*/, 3];
                case 2:
                    // TODO: remove once experiment is completed (open 100%)
                    setShouldWaitForArticles(false);
                    logFeaturedArticlesViewd(connectBiLogger, {
                        featured_articles_item_ids: DEFAULT_ARTICLES_IDS.join(),
                        featured_articles_lang: locale,
                    });
                    _a.label = 3;
                case 3: return [2 /*return*/];
            }
        });
    }); }, [isMounted, experiments, sdk, connectBiLogger, locale]);
    var initSDK = useCallback(function (ref) {
        var newSDK = new AnswersWidget();
        var config = { tenant: 'wix', widgetId: widgetId, locale: locale };
        newSDK.onViewVisible(onWidgetLoaded);
        newSDK.addEventListener(biEventsSender);
        newSDK.addEventListener(featuredArticlesUpdatedEventHandler);
        newSDK.addHtmlToHomePageHeader(helpCenterLink);
        newSDK.addHtmlToKbHeader(helpCenterLink);
        newSDK.setOverrideTexts({
            'widget-v3.widget-home.search-bar.title': searchOurHelpCenterText,
        });
        newSDK.init(ref, config);
        return newSDK;
    }, [
        helpCenterLink,
        biEventsSender,
        onWidgetLoaded,
        widgetId,
        locale,
        searchOurHelpCenterText,
        featuredArticlesUpdatedEventHandler,
    ]);
    var handleRef = useCallback(function (ref) {
        sdk && sdk.cleanup();
        ref ? setSdk(initSDK(ref)) : setSdk(null);
    }, 
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [initSDK]);
    useEffect(function () {
        if (!isEditorX && ready && sdk) {
            setFeaturedArticles();
        }
    }, [ready, sdk, isEditorX, setFeaturedArticles]);
    return (React.createElement(SmartAnswersWidgetComponent, { loaded: loaded && !shouldWaitForArticles, handleRef: handleRef, onLoaded: onWidgetLoaded }));
});
//# sourceMappingURL=smart-answers-widget.container.js.map