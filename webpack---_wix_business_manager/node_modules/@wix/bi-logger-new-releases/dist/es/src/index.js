var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
* @typedef {string} Url
*/
/**
* @typedef {string} GUID
*/
/**
* @typedef {number} DateTime
*/
var dummy;
var defaultConfig = { endpoint: 'new-releases' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 123 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'new-releases' });
    }
    ;
    /**
    * @typedef {Object} newReleasesOpenFeedParams
    * @property {GUID} msid - msid
    * @property {string} platform - platform
    **/
    /**
     * Name: New Releases - Open feed. Evid: 3.
     * Event description: users clicks in the icon which leads to open the feed.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: platform
     * @param {newReleasesOpenFeedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.newReleasesOpenFeed = function (params) {
        return this.bi.log(__assign({ evid: 3 }, params));
    };
    /**
    * @typedef {Object} nreReleasesBadgeNotificationParams
    * @property {GUID} msid - msid
    * @property {number} new_notifications - number in the badge
    * @property {string} platform - platform
    **/
    /**
     * Name: New Releases - Badge notification. Evid: 4.
     * Event description: a badge with new notifications is shown to the user.
    
     * msid - Type: guid. Desc: msid
     *
     * new_notifications - Type: numeric. Desc: number in the badge
     *
     * platform - Type: string. Desc: platform
     * @param {nreReleasesBadgeNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.nreReleasesBadgeNotification = function (params) {
        return this.bi.log(__assign({ evid: 4 }, params));
    };
    /**
    * @typedef {Object} newReleasesCardCtaParams
    * @property {GUID} announcement_id - announcement_id
    * @property {string} button_type - main/secondary
    * @property {string} button_name - cta name
    * @property {number} card_position - position of the announcement
    * @property {GUID} msid - msid
    * @property {string} platform - platform
    **/
    /**
     * Name: New Releases - Card CTA. Evid: 6.
     * Event description: CTA buttons clicked.
    
     * announcement_id - Type: guid. Desc: announcement_id
     *
     * button_type - Type: string. Desc: main/secondary
     *
     * button_name - Type: string. Desc: cta name
     *
     * card_position - Type: numeric. Desc: position of the announcement
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: platform
     * @param {newReleasesCardCtaParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.newReleasesCardCta = function (params) {
        return this.bi.log(__assign({ evid: 6 }, params));
    };
    /**
    * @typedef {Object} newReleasesViewFeatureCardParams
    * @property {GUID} announcement_id - announcement_id
    * @property {number} card_position - position of the announcement when viewed
    * @property {GUID} msid - msid
    * @property {string} platform - platform
    **/
    /**
     * Name: New Releases - View feature card. Evid: 5.
     * Event description: View is considered as follow: more than 75% of the card is shown for at least 3 seconds. In 3 second I managed to read the header of the announcement. The event should be fired only once per announcement per sidebar opened (if sidebar is opened again, an announcement that was already viewed can have another view event)..
    
     * announcement_id - Type: guid. Desc: announcement_id
     *
     * card_position - Type: numeric. Desc: position of the announcement when viewed
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: platform
     * @param {newReleasesViewFeatureCardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.newReleasesViewFeatureCard = function (params) {
        return this.bi.log(__assign({ evid: 5 }, params));
    };
    /**
    * @typedef {Object} newReleasesHoverNewReleasesIconParams
    * @property {GUID} msid - msid
    * @property {string} platform - platform
    **/
    /**
     * Name: New Releases - Hover new releases icon. Evid: 2.
     * Event description: The user hoovers the new releases icon in the top bar of the BM. The event tracks the first time per load page..
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: platform
     * @param {newReleasesHoverNewReleasesIconParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.newReleasesHoverNewReleasesIcon = function (params) {
        return this.bi.log(__assign({ evid: 2 }, params));
    };
    /**
    * @typedef {Object} newReleasesViewAllUpdatesParams
    * @property {GUID} msid - msid
    * @property {string} platform - platform
    **/
    /**
     * Name: New Releases - View all updates. Evid: 7.
     * Event description: Users gets to the bottom of the feed. This event should fire once per open feed as the view event..
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: platform
     * @param {newReleasesViewAllUpdatesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.newReleasesViewAllUpdates = function (params) {
        return this.bi.log(__assign({ evid: 7 }, params));
    };
    /*event 1 on project 'com.wixpress.new-releases has no function name set, please set one in BI Catalog.*/
    /**
    * @typedef {Object} feedContentVisibleParams
    * @property {GUID} msid - msid
    * @property {string} platform - platform
    **/
    /**
     * Name: Feed Content Visible. Evid: 8.
     * Event description: Event fires when the content of the feed is visible.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: platform
     * @param {feedContentVisibleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.feedContentVisible = function (params) {
        return this.bi.log(__assign({ evid: 8 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 123,
        endpoint: 'new-releases'
    };
}
//# sourceMappingURL=index.js.map