"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var commons_1 = require("./commons");
var mediaManagerIntegration_1 = require("./mediaManagerIntegration");
var baseDialogSettings = {
    baseHost: 'wix.com',
    i18nCode: 'en',
    siteMediaToken: null // permissionsManager.getSiteToken()
};
function setDialogi18nCode(i18nCode) {
    if (!(window && window.mediaManager)) {
        baseDialogSettings.i18nCode = i18nCode;
    }
}
exports.setDialogi18nCode = setDialogi18nCode;
function setSiteMediaToken(siteMediaToken) {
    if (window && window.mediaManager) {
        mediaManagerIntegration_1.updateWowToken(siteMediaToken);
    }
    else {
        baseDialogSettings.siteMediaToken = siteMediaToken;
    }
}
exports.setSiteMediaToken = setSiteMediaToken;
exports.MEDIA_TYPES = {
    AUDIO: 'audio',
    BACKGROUND: 'backgrounds',
    BG_IMAGE: 'backgrounds',
    BG_VIDEO: 'bg_video',
    CLIPART: 'clipart',
    DOCUMENT: 'documents',
    FLASH: 'swf',
    ICON_DOCUMENT: 'icon_document',
    ICON_FAVICON: 'bg_favicon',
    ICON_SOCIAL: 'bg_social',
    IMAGE: 'photos',
    IMAGE_PRO: 'secure_picture',
    MUSIC: 'music',
    MUSIC_PRO: 'secure_music',
    SECURE_MUSIC: 'secure_music',
    SHAPE: 'shape',
    SWF: 'swf',
    VIDEO: 'video'
};
function openMediaDialog(mediaType, multiSelection, onSuccess, onCancel, returnRawData) {
    if (returnRawData === void 0) { returnRawData = true; }
    if (window && window.mediaManager) {
        mediaManagerIntegration_1.openWowMediaDialog(mediaManagerIntegration_1.MEDIA_MANAGER_FACADE_MAPPINGS[mediaType], multiSelection, onSuccess, onCancel, returnRawData);
    }
    else {
        legacyMediaDialog(mediaType, multiSelection, onSuccess, onCancel, returnRawData);
    }
}
exports.openMediaDialog = openMediaDialog;
/**
 * Legacy method used for opening media frame, uses G5 facade directly, does not support G6
 * @deprecated
 * @param {TMediaType} mediaType
 * @param {boolean} multiSelection
 * @param {Function} onSuccess
 * @param {Function} onCancel
 * @param {boolean} returnRawData
 */
function legacyMediaDialog(mediaType, multiSelection, onSuccess, onCancel, returnRawData) {
    var mediaTypeMap = {
        photos: 'picture',
        clipart: 'picture',
        backgrounds: 'picture',
        audio: 'music',
        music: 'music',
        documents: 'document',
        swf: 'swf',
        video: 'video',
        shape: 'shape',
        secure_music: 'secure_music'
    };
    var publicMediaRootMap = {
        photos: 'photos',
        backgrounds: 'backgrounds',
        video: 'videos',
        shape: 'shapes',
        clipart: 'clipart'
    };
    var i18nPrefixMap = {
        photos: multiSelection ? 'multiple_images' : 'single_image',
        backgrounds: 'background',
        clipart: 'clipart'
    };
    if (!mediaTypeMap[mediaType]) {
        mediaType = 'photos';
    }
    var dialogSettings = Object.assign({}, baseDialogSettings, {
        mediaType: mediaTypeMap[mediaType],
        i18nPrefix: i18nPrefixMap[mediaType] || mediaTypeMap[mediaType],
        selectionType: multiSelection ? 'multiple' : 'single'
    });
    if (publicMediaRootMap[mediaType]) {
        dialogSettings.publicMediaRoot = publicMediaRootMap[mediaType];
    }
    if (mediaType === 'secure_music' || mediaType === 'video') {
        dialogSettings.tabsList = ['private'];
    }
    var removeCallbacks = function () {
        MediaFrame.off('items', itemsCallback);
        MediaFrame.off('close', closeCallback);
        MediaFrame.off('notauthorized', notAuthorizedCallback);
    };
    var closeCallback = function () {
        removeCallbacks();
        onCancel();
    };
    var itemsCallback = function (result) {
        removeCallbacks();
        var items = returnRawData ? commons_1.restoreRelativeUri(result.items) : commons_1.transformRawData(result.items);
        onSuccess(multiSelection ? items : items[0]);
    };
    var notAuthorizedCallback = function () {
        removeCallbacks();
    };
    MediaFrame.open(dialogSettings)
        .one('close', closeCallback)
        .one('items', itemsCallback)
        .one('notauthorized', notAuthorizedCallback);
}
