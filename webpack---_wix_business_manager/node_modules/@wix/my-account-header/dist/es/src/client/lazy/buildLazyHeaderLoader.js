import { __extends } from "tslib";
import { ReactLazyComponent } from 'react-module-container';
import { createBiLogger } from '../services/BiLogger';
import { BiEvents } from '../constants/biEvents';
var minified = function (debug) { return debug ? '' : '.min'; };
var files = function (_a) {
    var headerClientStaticsUrl = _a.headerClientStaticsUrl, isDebug = _a.isDebug;
    return [
        headerClientStaticsUrl + "header.bundle" + minified(isDebug) + ".js",
        headerClientStaticsUrl + "header" + minified(isDebug) + ".css",
    ];
};
export var buildLazyHeaderLoader = function (_a) {
    var componentName = _a.componentName, fallbackClassName = _a.fallbackClassName, _b = _a.fetchData, fetchData = _b === void 0 ? true : _b;
    var LazyComponentImplementation = /** @class */ (function (_super) {
        __extends(LazyComponentImplementation, _super);
        function LazyComponentImplementation(props) {
            var _a;
            var _this = this;
            var manifest = {
                files: files(props),
                component: componentName
            };
            _this = _super.call(this, props, manifest) || this;
            if (fetchData) {
                createBiLogger().logEvent(BiEvents.HEADER_LAZY_LOAD_START, {
                    msid: (_a = props.metaSiteId) !== null && _a !== void 0 ? _a : null,
                    page_view: props.biPageView,
                });
            }
            return _this;
        }
        return LazyComponentImplementation;
    }(ReactLazyComponent));
    return LazyComponentImplementation;
};
//# sourceMappingURL=buildLazyHeaderLoader.js.map