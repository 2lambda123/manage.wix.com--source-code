import { __assign, __extends } from "tslib";
import * as React from 'react';
import { WixPosition } from '../../services/WixPosition/WixPosition';
import { ClickOutside } from '../ReactClickOutside/ReactClickOutside';
import { PortalWithState } from 'react-portal';
import * as css from './ReactDropdownDialog.scss';
export var DEFAULT_AUTO_CLOSE_TIMEOUT = 2000;
var HOVER_OPEN_STRATEGY = 'hover';
var DEFAULT_OPEN_DIRECTION = 'bottom-center';
var DEFAULT_COLLISION_STRATEGY = 'fit';
var DIALOG_MARGIN_FROM_TRIGGER = 10;
var ARROW_MARGIN_FROM_TRIGGER = 8;
export var ReactDropdownDialogContext = React.createContext(null);
var currentlyOpenDialogs = [];
var ReactDropdownDialog = /** @class */ (function (_super) {
    __extends(ReactDropdownDialog, _super);
    function ReactDropdownDialog(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            dialogOpen: false
        };
        _this.unmounting = false;
        _this.wixPosition = new WixPosition();
        return _this;
    }
    ReactDropdownDialog.closeCurrentlyOpenDialogs = function () {
        currentlyOpenDialogs.reverse().forEach(function (dialog) { return dialog.closeDialog(); });
        currentlyOpenDialogs = [];
    };
    ReactDropdownDialog.prototype.openDialog = function () {
        var _this = this;
        this.clearAutoCloseTimer();
        if (!this.state.dialogOpen) {
            this.closeCurrentlyOpenDialogsIfNeeded();
            this.setState({
                dialogOpen: true
            }, function () {
                _this.addDialogToCurrentlyOpen(_this);
                _this.setDialogPosition();
            });
        }
    };
    ReactDropdownDialog.prototype.closeCurrentlyOpenDialogsIfNeeded = function () {
        if (!this.props.keepOpenDialogs) {
            ReactDropdownDialog.closeCurrentlyOpenDialogs();
        }
    };
    ReactDropdownDialog.prototype.addDialogToCurrentlyOpen = function (value) {
        currentlyOpenDialogs.push(value);
    };
    ReactDropdownDialog.prototype.setDialogPosition = function () {
        var rddDialogDomElement = this.rddDialogRef;
        var rddTriggerDomElement = this.rddTriggerRef;
        var openDirection = (this.props.dialogPosition && this.props.dialogPosition.openDirection) || DEFAULT_OPEN_DIRECTION;
        var margin = this.getDialogMargin(openDirection);
        var appendToBody = this.props.appendToBody !== false;
        var collisionStrategy = (this.props.dialogPosition && this.props.dialogPosition.collisionStrategy) || DEFAULT_COLLISION_STRATEGY;
        var pos = this.wixPosition.positionElements(rddTriggerDomElement, rddDialogDomElement, openDirection, margin, appendToBody, collisionStrategy);
        this.setElementStyle(rddDialogDomElement, pos);
        this.setArrowPosition(openDirection, pos.pos0, appendToBody);
    };
    ReactDropdownDialog.prototype.getDialogMargin = function (openDirection) {
        return {
            width: DIALOG_MARGIN_FROM_TRIGGER
        };
    };
    ReactDropdownDialog.prototype.setElementStyle = function (el, pos) {
        var moveBy = this.props.moveBy;
        el['style'].top = pos.top + moveBy.top + "px";
        el['style'].left = pos.left + moveBy.left + "px";
    };
    ReactDropdownDialog.prototype.setArrowPosition = function (dialogOpenDirection, pos0, appendToBody) {
        var rddTriggerDomElement = this.rddTriggerRef;
        var arrowDomElement = this.rddArrowRef;
        var openDirection = pos0 + "-center";
        var margin = this.getArrowMargin(dialogOpenDirection, pos0);
        var collisionStrategy = 'flip';
        var pos = this.wixPosition.positionElements(rddTriggerDomElement, arrowDomElement, openDirection, margin, appendToBody, collisionStrategy);
        this.setElementStyle(arrowDomElement, pos);
    };
    ReactDropdownDialog.prototype.getArrowMargin = function (dialogOpenDirection, pos0) {
        var verticalPos = (pos0 === 'bottom' || pos0 === 'top');
        var adjustDirection = dialogOpenDirection.match(pos0 + "-") ? 1 : -1; //no collision change was made
        return {
            height: verticalPos ? ARROW_MARGIN_FROM_TRIGGER * adjustDirection : 0,
            width: verticalPos ? 0 : ARROW_MARGIN_FROM_TRIGGER * adjustDirection
        };
    };
    ReactDropdownDialog.prototype.keepDialogOpen = function () {
        this.clearAutoCloseTimer();
    };
    ReactDropdownDialog.prototype.closeDialog = function () {
        if (this.state.dialogOpen && !this.unmounting) {
            this.setState({
                dialogOpen: false
            });
        }
    };
    ReactDropdownDialog.prototype.clearAutoCloseTimer = function () {
        if (this.autoCloseTimer) {
            clearTimeout(this.autoCloseTimer);
            this.autoCloseTimer = null;
        }
    };
    ReactDropdownDialog.prototype.handleMouseLeave = function () {
        var _this = this;
        this.autoCloseTimer = setTimeout(function () { return _this.closeDialog(); }, this.props.autoCloseTimeout || DEFAULT_AUTO_CLOSE_TIMEOUT);
    };
    ReactDropdownDialog.prototype.bindTriggerOpenStrategy = function (openStrategy) {
        var _this = this;
        var triggerProps = {};
        if (openStrategy === HOVER_OPEN_STRATEGY) {
            triggerProps.onMouseEnter = function () { return _this.openDialog(); };
            triggerProps.onMouseLeave = function () { return _this.handleMouseLeave(); };
        }
        else {
            triggerProps.onClick = function (e) { return _this.openDialog(); };
        }
        return triggerProps;
    };
    ReactDropdownDialog.prototype.bindDialogOpenStrategy = function (openStrategy) {
        var _this = this;
        var dialogProps = {};
        if (openStrategy === HOVER_OPEN_STRATEGY) {
            dialogProps.onMouseEnter = function () { return _this.keepDialogOpen(); };
            dialogProps.onMouseLeave = function () { return _this.handleMouseLeave(); };
        }
        return dialogProps;
    };
    ReactDropdownDialog.prototype.getClassNames = function () {
        var extendingClassNames = this.props.classNames || {};
        var isNarrow = this.props.narrow;
        return {
            dialogWrapper: [css.dialogWrapper, extendingClassNames.dialogWrapper].filter(function (el) { return !!el; }).join(' '),
            arrow: [css.arrow, extendingClassNames.arrow].filter(function (el) { return !!el; }).join(' '),
            dialogComponent: [css.dialogComponent, extendingClassNames.dialogComponent, isNarrow && css.dialogComponentNarrow].filter(function (el) { return !!el; }).join(' ')
        };
    };
    ReactDropdownDialog.prototype.componentDidMount = function () {
        if (this.props.isOpen === true) {
            this.openDialog();
        }
    };
    ReactDropdownDialog.prototype.componentWillUnmount = function () {
        this.unmounting = true;
    };
    ReactDropdownDialog.prototype.render = function () {
        var _this = this;
        var triggerComponent = this.props.children[0];
        var dialogComponent = this.props.children[1];
        var openStrategy = this.props.openStrategy;
        var appendToBody = this.props.appendToBody !== false;
        var getDialogWrapper = function () {
            var mergedClassNames = _this.getClassNames();
            return (React.createElement("div", __assign({ "data-hook": "rdd-dialog-wrapper", className: mergedClassNames.dialogWrapper }, _this.bindDialogOpenStrategy(openStrategy)),
                React.createElement("div", { "data-hook": "rdd-arrow", className: mergedClassNames.arrow, ref: function (ref) { return _this.rddArrowRef = ref; } }),
                React.createElement("div", { "data-hook": "rdd-dialog", className: mergedClassNames.dialogComponent, ref: function (ref) { return _this.rddDialogRef = ref; } }, dialogComponent)));
        };
        return (React.createElement(ReactDropdownDialogContext.Provider, { value: { closeDialog: function () { return _this.closeDialog(); } } },
            React.createElement("div", null,
                React.createElement("div", __assign({ "data-hook": "rdd-trigger", className: css.container }, this.bindTriggerOpenStrategy(openStrategy), { ref: function (ref) { return _this.rddTriggerRef = ref; } }), triggerComponent),
                this.state.dialogOpen ?
                    appendToBody ?
                        React.createElement(PortalWithState, { defaultOpen: this.state.dialogOpen, closeOnEsc: true, onClose: function () { return _this.closeDialog(); } }, function (_a) {
                            var portal = _a.portal;
                            return (React.createElement("div", null, portal(React.createElement(ClickOutside, { onClickOutside: function () { return _this.closeDialog(); } }, getDialogWrapper()))));
                        }) :
                        React.createElement(ClickOutside, { onClickOutside: function () { return _this.closeDialog(); } }, getDialogWrapper()) :
                    null)));
    };
    ReactDropdownDialog.defaultProps = {
        moveBy: {
            left: 0,
            top: 0
        }
    };
    return ReactDropdownDialog;
}(React.Component));
export { ReactDropdownDialog };
//# sourceMappingURL=ReactDropdownDialog.js.map