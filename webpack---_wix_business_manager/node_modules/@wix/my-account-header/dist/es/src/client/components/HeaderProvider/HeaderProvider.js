import { __extends } from "tslib";
import * as React from 'react';
import { Provider } from 'react-redux';
import { I18nextProvider } from '@wix/wix-i18n-config';
import { i18nClient } from '../../i18n/client-i18n';
import { configureStore } from '../../store/configureStore';
import { buildServices } from '../../store/headerServices';
import { configureWixAxiosInstance } from '../../utils/axiosInstance';
import { LoggerProvider } from '../../services/BiLogger';
import { headerProviderPropsToState } from './headerProviderPropsToState';
import { fetchHeaderData, fetchSitesList, setHeaderInitialData } from '../../actions/dataActions';
import { getInteractionName } from '../../services/fedops-interactions';
import { FontUpgrade } from 'wix-style-react';
import { BiEvents } from '../../constants/biEvents';
// Todo: deprecate fetchData once loading all components lazily
export function withHeaderProvider(WrappedComponent, fetchData) {
    if (fetchData === void 0) { fetchData = true; }
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1(props) {
            var _a, _b;
            var _this = _super.call(this, props) || this;
            var locale = props.locale, basename = props.basename, biPageView = props.biPageView, lazyLoadHeaders = props.lazyLoadHeaders, instance = props.instance;
            _this.i18n = i18nClient({ locale: locale });
            var initialState = headerProviderPropsToState(props);
            var headerServices = buildServices();
            if (fetchData) {
                if (!lazyLoadHeaders) {
                    headerServices.fedopsLogger.appLoadStarted();
                }
                headerServices.fedopsLogger.interactionStarted(getInteractionName(biPageView));
            }
            else if (lazyLoadHeaders) {
                headerServices.fedopsLogger.appLoaded();
            }
            _this.biLogger = headerServices.biLogger;
            _this.store = configureStore(initialState, headerServices);
            if (lazyLoadHeaders) {
                if (_this.props.initialData) {
                    _this.store.dispatch(setHeaderInitialData(_this.props.initialData));
                }
                (_b = (_a = _this.props).onLoaded) === null || _b === void 0 ? void 0 : _b.call(_a);
            }
            var baseURL = basename || window['__BASEURL__'] || '/';
            if (fetchData) {
                configureWixAxiosInstance({ baseURL: baseURL });
                if (!lazyLoadHeaders) {
                    _this.store.dispatch(fetchHeaderData(instance));
                }
                _this.store.dispatch(fetchSitesList());
            }
            return _this;
        }
        class_1.prototype.componentDidMount = function () {
            var _a;
            if (!this.props.lazyLoadHeaders && fetchData) {
                this.biLogger.logEvent(BiEvents.HEADER_IS_SHOWN, {
                    msid: (_a = this.props.metaSiteId) !== null && _a !== void 0 ? _a : null,
                    page_view: this.props.biPageView,
                });
            }
        };
        class_1.prototype.render = function () {
            return (React.createElement(Provider, { store: this.store },
                React.createElement(I18nextProvider, { i18n: this.i18n },
                    React.createElement(LoggerProvider, { biLogger: this.biLogger },
                        React.createElement(FontUpgrade, null,
                            React.createElement(WrappedComponent, null))))));
        };
        return class_1;
    }(React.Component));
}
//# sourceMappingURL=HeaderProvider.js.map