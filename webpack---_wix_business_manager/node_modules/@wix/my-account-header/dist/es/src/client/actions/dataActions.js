import { __awaiter, __generator } from "tslib";
import { axiosInstance } from '../utils/axiosInstance';
import { getInteractionName, SITES_DROPDOWN_ON_HEADER } from '../services/fedops-interactions';
import { fixUserGravatarDefaults } from '../services/fixUserGravatarDefaults/fixUserGravatarDefaults';
import { SitesListApi } from '@wix/sites-list-api';
import { BiEvents } from '../constants/biEvents';
import { getCurrentSiteId } from '../selectors/currentSiteSelectors';
import { getBiPageView } from '../selectors/biPageViewSelectors';
import { getSentryClient } from '../services/sentry-client';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
export var HEADER_DATA_FETCH_SUCCESS = 'HEADER_DATA_FETCH_SUCCESS';
export var SET_RECENT_SITES_LIST_DATA = 'SET_RECENT_SITES_LIST_DATA';
export var SET_RECENT_SITES_LIST_ERROR = 'SET_RECENT_SITES_LIST_ERROR';
export var SET_RECENT_SITES_LIST_LOADING = 'SET_RECENT_SITES_LIST_LOADING';
export var HEADER_DATA_URL = '/_api/header-server/';
export var MAX_SITES_IN_LIST = 12;
export var headerDataFetchSuccess = function (data) {
    return {
        type: HEADER_DATA_FETCH_SUCCESS,
        payload: data
    };
};
export var siteslistDataFetchSuccess = function (data) {
    return {
        type: SET_RECENT_SITES_LIST_DATA,
        payload: data
    };
};
export var sitesListDataFetchError = function () {
    return {
        type: SET_RECENT_SITES_LIST_ERROR
    };
};
export var sitesListDataFetchLoading = function () {
    return {
        type: SET_RECENT_SITES_LIST_LOADING,
    };
};
var getHeaderDataResponse = function (displaySiteNameFromHeaderMainCallEnabled, instance) {
    var axiosOptions;
    if (displaySiteNameFromHeaderMainCallEnabled) {
        var headers = instance ? { Authorization: instance } : {};
        axiosOptions = { headers: headers };
    }
    return axiosInstance.get(HEADER_DATA_URL, axiosOptions)
        .then(function (response) { return response.data; })
        .then(function (data) { return fixUserGravatarDefaults(data); });
};
var mapSitesToSitesListDropdown = function (sites) {
    sites = sites.splice(0, MAX_SITES_IN_LIST);
    return sites.map(function (site) {
        return {
            name: site.displayName || site.name,
            msid: site.metaSiteId,
            thumbnail: site.thumbnail,
            isPremium: site.premium
        };
    });
};
var getSitesListDataResponse = function () {
    var sitesListApi = new SitesListApi();
    return sitesListApi.searchSites({})
        .then(function (response) { return response.data; })
        .then(function (data) { return mapSitesToSitesListDropdown(data === null || data === void 0 ? void 0 : data.sites); });
};
export var fetchHeaderData = function (instance) {
    return function (dispatch, getState, _a) {
        var fedopsLogger = _a.fedopsLogger, biLogger = _a.biLogger;
        return __awaiter(void 0, void 0, void 0, function () {
            var headerDataResponse;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, getHeaderDataResponse(experimentsSelectors(getState()).enabled('specs.wosbm.displaySiteNameFromHeaderMainCall'), instance)];
                    case 1:
                        headerDataResponse = _b.sent();
                        sendEventsAndLogs(biLogger, getState, headerDataResponse, fedopsLogger);
                        return [2 /*return*/, dispatch(headerDataFetchSuccess(headerDataResponse))];
                }
            });
        });
    };
};
var sendHeaderBiEvent = function (biLogger, getState, response) {
    var _a;
    var state = getState();
    biLogger.logEvent(BiEvents.HEADER_FINISHED_LOADING, {
        msid: (_a = getCurrentSiteId(state)) !== null && _a !== void 0 ? _a : null,
        page_view: getBiPageView(state),
        is_partner: response.isExpertDashboardEnabled
    });
};
export var fetchSitesList = function () {
    return function (dispatch, getState, _a) {
        var fedopsLogger = _a.fedopsLogger;
        return __awaiter(void 0, void 0, void 0, function () {
            var sitesListDataResponse, e_1;
            var _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _c.trys.push([0, 2, , 3]);
                        fedopsLogger.interactionStarted(SITES_DROPDOWN_ON_HEADER);
                        sitesListDataResponse = void 0;
                        dispatch(sitesListDataFetchLoading());
                        return [4 /*yield*/, getSitesListDataResponse()];
                    case 1:
                        sitesListDataResponse = _c.sent();
                        fedopsLogger.interactionEnded(SITES_DROPDOWN_ON_HEADER);
                        return [2 /*return*/, dispatch(siteslistDataFetchSuccess(sitesListDataResponse))];
                    case 2:
                        e_1 = _c.sent();
                        if (experimentsSelectors(getState()).enabled('spec.wosbm.useSentryInHeader')) {
                            (_b = getSentryClient()) === null || _b === void 0 ? void 0 : _b.captureException(e_1);
                        }
                        return [2 /*return*/, dispatch(sitesListDataFetchError())];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
};
export var setHeaderInitialData = function (initialData) {
    return function (dispatch, getState, _a) {
        var fedopsLogger = _a.fedopsLogger, biLogger = _a.biLogger;
        return __awaiter(void 0, void 0, void 0, function () {
            var headerDataResponse;
            return __generator(this, function (_b) {
                headerDataResponse = fixUserGravatarDefaults(initialData);
                sendEventsAndLogs(biLogger, getState, headerDataResponse, fedopsLogger);
                dispatch(headerDataFetchSuccess(headerDataResponse));
                return [2 /*return*/];
            });
        });
    };
};
export var sendEventsAndLogs = function (biLogger, getState, headerDataResponse, fedopsLogger) {
    sendHeaderBiEvent(biLogger, getState, headerDataResponse);
    fedopsLogger.appLoaded();
    fedopsLogger.interactionEnded(getInteractionName(getState().biPageView));
};
//# sourceMappingURL=dataActions.js.map