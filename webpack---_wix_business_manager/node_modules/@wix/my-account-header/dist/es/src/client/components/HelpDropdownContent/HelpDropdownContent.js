import { __extends } from "tslib";
import * as React from 'react';
import { connect } from 'react-redux';
import * as css from '../HelpDropdown/HelpDropdown.scss';
import { DashboardAnswersWidget } from '@wix/dashboard-answers-widget';
import HireAnExpertFooter from '../HireAnExpertFooter/HireAnExpertFooter';
import { withTranslation } from '@wix/wix-i18n-config';
import { getDashboredWidgetStaticsVersion } from '../../selectors/topologySelectors';
import { getLanguage, getUserId } from '../../selectors/currentUserSelectors';
import { getCurrentSiteId } from '../../selectors/currentSiteSelectors';
import { getCurrentPage } from '../../selectors/currentPageSelectors';
import { getDebugStatus } from '../../selectors/debugSelectors';
import { isCoBranded } from '../../selectors/coBrandingSelector';
import { isNtt } from '../../services/cookieService/cookieService';
import { isEditorXBrand } from '../../selectors/isEditorXSelector';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
import SmartAnswersWidget from '@wix/dashboard-smart-answers-widget';
var HelpDropdownContent = /** @class */ (function (_super) {
    __extends(HelpDropdownContent, _super);
    function HelpDropdownContent(props) {
        var _this = _super.call(this, props) || this;
        _this.onWidgetLoad = function () { return _this.setState({ isWidgetLoaded: true }); };
        _this.state = {
            isWidgetLoaded: false
        };
        return _this;
    }
    HelpDropdownContent.prototype.render = function () {
        var _a = this.props, showNewAnswersWidget = _a.showNewAnswersWidget, userId = _a.userId, locale = _a.locale, dashboardAnswersWidgetStaticsVersion = _a.dashboardAnswersWidgetStaticsVersion, msid = _a.msid, origin = _a.origin, showExpertFooter = _a.showExpertFooter, isDebug = _a.isDebug, isEditorX = _a.isEditorX;
        return (React.createElement("div", { className: css.layout, key: "help-dropdown" },
            showNewAnswersWidget ?
                React.createElement(SmartAnswersWidget, { uuid: userId, locale: locale, msid: msid, origin: origin, isEditorX: isEditorX, onLoaded: this.onWidgetLoad }) :
                React.createElement(DashboardAnswersWidget, { dashboardWidgetStaticsVersion: dashboardAnswersWidgetStaticsVersion, msid: msid, origin: origin, isEditorX: isEditorX, onLoaded: this.onWidgetLoad, debug: isDebug, locale: locale }),
            showExpertFooter && React.createElement(HireAnExpertFooter, { show: this.state.isWidgetLoaded })));
    };
    return HelpDropdownContent;
}(React.Component));
var mapStateToProps = function (state) {
    var hideExpertsFooter = isNtt() || isCoBranded(state);
    return ({
        userId: getUserId(state),
        showExpertFooter: !hideExpertsFooter,
        dashboardAnswersWidgetStaticsVersion: getDashboredWidgetStaticsVersion(state),
        locale: getLanguage(state),
        isDebug: getDebugStatus(state),
        msid: getCurrentSiteId(state),
        origin: getCurrentPage(state),
        isEditorX: isEditorXBrand(state),
        showNewAnswersWidget: experimentsSelectors(state).enabled('specs.wos1.smartAnswersWidget'),
    });
};
export default withTranslation()(connect(mapStateToProps)(HelpDropdownContent));
//# sourceMappingURL=HelpDropdownContent.js.map