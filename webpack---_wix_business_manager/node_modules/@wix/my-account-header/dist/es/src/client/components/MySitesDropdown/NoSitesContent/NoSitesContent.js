import * as React from 'react';
import { memo, useEffect } from 'react';
import { Box, Heading, Text } from 'wix-style-react';
import { withTranslation } from '@wix/wix-i18n-config';
import { BiEvents } from '../../../constants/biEvents';
import { getCurrentSiteId } from '../../../selectors/currentSiteSelectors';
import { getBiPageView } from '../../../selectors/biPageViewSelectors';
import { provideLogger } from '../../../services/BiLogger';
import { connect } from 'react-redux';
import { MySitesDropdownDataHooks } from '../MySitesDropdown.data-hooks';
import { hasRecentSitesListError } from '../../../selectors/recentSitesListSelector';
var Mode;
(function (Mode) {
    Mode["Error"] = "Error";
    Mode["SiteLess"] = "SiteLess";
})(Mode || (Mode = {}));
export var NoSitesContent = memo(function (_a) {
    var biLogger = _a.biLogger, currentSiteId = _a.currentSiteId, biPageView = _a.biPageView, t = _a.t, mode = _a.mode, loadingStartTime = _a.loadingStartTime;
    function getBIEvid() {
        return mode === Mode.Error ? BiEvents.MY_SITES_DROPDOWN_ERROR : BiEvents.MY_SITES_DROPDOWN_ZERO_STATE;
    }
    useEffect(function () {
        biLogger.logEvent(getBIEvid(), {
            msid: currentSiteId,
            page_view: biPageView,
            loading_time: Date.now() - loadingStartTime,
        });
    });
    function getHeading() {
        return mode === Mode.Error ? t('site_list.dropdown.error.could_not_load_sites') : t('site_list.dropdown.zero_state.no_sites_found');
    }
    function getText() {
        return mode === Mode.Error ? t('site_list.dropdown.error.temporary_issue') : t('site_list.dropdown.zero_state.content');
    }
    return (React.createElement(Box, { height: 168, verticalAlign: "middle", align: "center", textAlign: "center", padding: '0 24px', direction: "vertical", dataHook: MySitesDropdownDataHooks.noSitesState },
        React.createElement(Heading, { appearance: "H3", dataHook: MySitesDropdownDataHooks.NoSiteHeading }, getHeading()),
        React.createElement(Box, { lineHeight: "72px" },
            React.createElement(Text, { size: "medium", secondary: true, dataHook: MySitesDropdownDataHooks.NoSitesText }, getText()))));
});
var mapStateToProps = function (state) {
    var isErrorInRecentSitesList = hasRecentSitesListError(state);
    var mode = isErrorInRecentSitesList ? Mode.Error : Mode.SiteLess;
    return ({
        currentSiteId: getCurrentSiteId(state),
        biPageView: getBiPageView(state),
        mode: mode
    });
};
export default provideLogger(withTranslation()(connect(mapStateToProps)(NoSitesContent)));
//# sourceMappingURL=NoSitesContent.js.map