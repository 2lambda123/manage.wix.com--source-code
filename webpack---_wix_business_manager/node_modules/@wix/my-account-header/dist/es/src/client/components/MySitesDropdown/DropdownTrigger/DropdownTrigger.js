import * as React from 'react';
import { memo } from 'react';
import { Box, Text } from 'wix-style-react';
import ChevronDownSmall from 'wix-ui-icons-common/ChevronDown';
import { MySitesDropdownDataHooks } from '../MySitesDropdown.data-hooks';
import * as s from './DropdownTrigger.scss';
import { withTranslation } from '@wix/wix-i18n-config';
import { connect } from 'react-redux';
import { isEditorXBrand } from '../../../selectors/isEditorXSelector';
import { getCurrentSiteName } from '../../../selectors/currentSiteSelectors';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
import { isLoadingSitesList as isLoadingSitesListSelector } from '../../../selectors/recentSitesListSelector';
import CurrentSiteName from './CurrentSiteName';
import TriggerLoader from './TriggerLoader';
import { getIsAtMySitesPage } from '../../../selectors/currentPageSelectors';
export var DropdownTrigger = memo(function (_a) {
    var isAccountLevel = _a.isAccountLevel, toggle = _a.toggle, t = _a.t, isEditorX = _a.isEditorX, isAtMySitesPage = _a.isAtMySitesPage, shouldShowLoaderOnSiteName = _a.shouldShowLoaderOnSiteName;
    function getTriggerClass() {
        return (shouldShowLoaderOnSiteName ?
            "" + s.loader :
            s.trigger + " " + (isEditorX ? s.editorX : s.wixBrand) + " " + (isAtMySitesPage ? s.selected : ''));
    }
    function getMySitesText() {
        if (isAccountLevel) {
            return (React.createElement(Text, { size: "small", dataHook: MySitesDropdownDataHooks.MySitesTrigger, className: s.mySites + " " + s.account }, t('site_list.header.my_sites')));
        }
        return React.createElement(React.Fragment, null);
    }
    function getCurrentSiteNameText() {
        if (!isAccountLevel && shouldShowLoaderOnSiteName) {
            return React.createElement(TriggerLoader, null);
        }
        return !isAccountLevel && React.createElement(CurrentSiteName, null);
    }
    return (React.createElement("div", { onClick: toggle },
        React.createElement(Box, { verticalAlign: 'middle', className: getTriggerClass(), dataHook: MySitesDropdownDataHooks.Trigger },
            getMySitesText(),
            getCurrentSiteNameText(),
            isAccountLevel && React.createElement(ChevronDownSmall, null))));
});
var mapStateToProps = function (state, _a) {
    var isAccountLevel = _a.isAccountLevel;
    var displaySiteNameFromHeaderMainCallEnabled = experimentsSelectors(state).enabled('specs.wosbm.displaySiteNameFromHeaderMainCall');
    var shouldDisplaySiteNameFromMainCall = displaySiteNameFromHeaderMainCallEnabled;
    var currentSiteName = getCurrentSiteName(state);
    var isLoadingSitesList = isLoadingSitesListSelector(state);
    var isLoadingSiteName = !isAccountLevel && !currentSiteName;
    var shouldShowLoaderOnSiteName = shouldDisplaySiteNameFromMainCall ? isLoadingSiteName : isLoadingSitesList;
    return ({
        isEditorX: isEditorXBrand(state),
        shouldDisplaySiteNameFromMainCall: shouldDisplaySiteNameFromMainCall,
        isLoadingSitesList: isLoadingSitesList,
        shouldShowLoaderOnSiteName: shouldShowLoaderOnSiteName,
        isAtMySitesPage: getIsAtMySitesPage(state),
    });
};
export default withTranslation()(connect(mapStateToProps)(DropdownTrigger));
//# sourceMappingURL=DropdownTrigger.js.map