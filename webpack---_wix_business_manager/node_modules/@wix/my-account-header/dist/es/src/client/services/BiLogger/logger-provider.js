import { __assign, __extends } from "tslib";
import * as React from 'react';
import * as PropTypes from 'prop-types';
import { BiLogger } from './logger';
var LoggerProvider = /** @class */ (function (_super) {
    __extends(LoggerProvider, _super);
    function LoggerProvider(props) {
        var _this = _super.call(this, props) || this;
        _this.biLogger = _this.props.biLogger;
        return _this;
    }
    LoggerProvider.prototype.getChildContext = function () {
        return {
            biLogger: this.biLogger
        };
    };
    LoggerProvider.prototype.render = function () {
        return this.props.children;
    };
    LoggerProvider.childContextTypes = {
        biLogger: PropTypes.instanceOf(BiLogger).isRequired
    };
    return LoggerProvider;
}(React.Component));
var provideLogger = function (WrappedComponent) { var _a; return _a = /** @class */ (function (_super) {
        __extends(ComponentWithLogger, _super);
        function ComponentWithLogger() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ComponentWithLogger.prototype.render = function () {
            return React.createElement(WrappedComponent, __assign({ biLogger: this.props.overrideLogger || this.context.biLogger }, this.props));
        };
        return ComponentWithLogger;
    }(React.Component)),
    _a.contextTypes = {
        biLogger: PropTypes.instanceOf(BiLogger)
    },
    _a; };
export { LoggerProvider, provideLogger };
//# sourceMappingURL=logger-provider.js.map