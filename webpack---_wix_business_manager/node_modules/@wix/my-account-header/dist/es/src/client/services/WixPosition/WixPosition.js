/* tslint:disable:restrict-plus-operands */
/* tslint:disable:no-unnecessary-else */
import { __assign } from "tslib";
var FIT = 'fit';
var FLIP = 'flip';
var NONE = 'none';
var TOP = 'top';
var BOTTOM = 'bottom';
var LEFT = 'left';
var RIGHT = 'right';
var CENTER = 'center';
var ALIGN_TOP = 'alignTop';
var ALIGN_BOTTOM = 'alignBottom';
var ALIGN_LEFT = 'alignLeft';
var ALIGN_RIGHT = 'alignRight';
var STICK_TO_TOP = 'stickToTop';
var STICK_TO_BOTTOM = 'stickToBottom';
var STICK_TO_LEFT = 'stickToLeft';
var STICK_TO_RIGHT = 'stickToRight';
var noop = function () { return undefined; };
var WixPosition = /** @class */ (function () {
    function WixPosition() {
    }
    WixPosition.prototype.getStyle = function (el, cssprop) {
        if (el.currentStyle) { //IE
            return el.currentStyle[cssprop];
        }
        else if (window.getComputedStyle) {
            return window.getComputedStyle(el)[cssprop];
        }
        // finally try and get inline style
        return el.style[cssprop];
    };
    /**
     * Checks if a given element is statically positioned
     * @param element - raw DOM element
     */
    WixPosition.prototype.isStaticPositioned = function (element) {
        return (this.getStyle(element, 'position') || 'static') === 'static';
    };
    /**
     * returns the closest, non-statically positioned parentOffset of a given element
     * @param element
     */
    WixPosition.prototype.parentOffsetEl = function (element) {
        var docDomEl = document;
        var offsetParent = element.offsetParent || docDomEl;
        while (offsetParent && offsetParent !== docDomEl && this.isStaticPositioned(offsetParent)) {
            offsetParent = offsetParent.offsetParent;
        }
        return offsetParent || docDomEl;
    };
    //rare cases in which an element inside the body has margin that pushes the body down.
    WixPosition.prototype.fixMarginBelowBody = function (rect) {
        rect.top = rect.top - document.body.getBoundingClientRect().top - (window.pageYOffset || document.documentElement.scrollTop);
        return rect;
    };
    WixPosition.prototype.overflowing = function (hostElPos, targetElSizes, windowSizes, pos1, margin) {
        margin = margin || {};
        margin.width = margin.width || 0;
        margin.height = margin.height || 0;
        var targetElSizesWithMargins = __assign({}, targetElSizes);
        targetElSizesWithMargins.width += margin.width;
        targetElSizesWithMargins.height += margin.height;
        return {
            top: this.isOverflowingOnTheTop(hostElPos, pos1, targetElSizesWithMargins),
            bottom: this.isOverflowingOnTheBottom(hostElPos, pos1, targetElSizesWithMargins, windowSizes),
            left: this.isOverflowingOnTheLeft(hostElPos, pos1, targetElSizesWithMargins),
            right: this.isOverflowingOnTheRight(hostElPos, pos1, targetElSizesWithMargins, windowSizes)
        };
    };
    WixPosition.prototype.isOverflowingOnTheTop = function (hostElPosition, pos1, targetElSizes) {
        if (pos1 === CENTER) {
            return hostElPosition.top + hostElPosition.height / 2 - targetElSizes.height / 2 < 0;
        }
        else {
            return (hostElPosition.top - targetElSizes.height) < 0;
        }
    };
    WixPosition.prototype.isOverflowingOnTheBottom = function (hostElPosition, pos1, targetElSizes, windowSize) {
        if (pos1 === CENTER) {
            return (hostElPosition.top + hostElPosition.height / 2 + targetElSizes.height / 2) - windowSize.height > 0;
        }
        else {
            return (hostElPosition.top + hostElPosition.height + targetElSizes.height - windowSize.height) > 0;
        }
    };
    WixPosition.prototype.isOverflowingOnTheLeft = function (hostElPosition, pos1, targetElSizes) {
        if (pos1 === CENTER) {
            return hostElPosition.left + hostElPosition.width / 2 - targetElSizes.width / 2 < 0;
        }
        else {
            return (hostElPosition.left - targetElSizes.width) < 0;
        }
    };
    WixPosition.prototype.isOverflowingOnTheRight = function (hostElPosition, pos1, targetElSizes, windowSize) {
        if (pos1 === CENTER) {
            return (hostElPosition.left + hostElPosition.width / 2 + targetElSizes.width / 2 - windowSize.width) > 0;
        }
        else {
            return (hostElPosition.left + hostElPosition.width + targetElSizes.width - windowSize.width) > 0;
        }
    };
    /**
     * Provides read-only equivalent of jQuery's offset function:
     * http://api.jquery.com/offset/
     */
    WixPosition.prototype.offset = function (element) {
        var boundingClientRect = element.getBoundingClientRect();
        return {
            width: element.offsetWidth || boundingClientRect.width,
            height: boundingClientRect.height || element.offsetHeight,
            top: boundingClientRect.top + (window.pageYOffset || document.documentElement.scrollTop),
            left: boundingClientRect.left + (window.pageXOffset || document.documentElement.scrollLeft)
        };
    };
    /**
     * Provides read-only equivalent of jQuery's position function:
     * http://api.jquery.com/position/
     */
    WixPosition.prototype.position = function (element) {
        var elBCR = this.offset(element);
        var offsetParentBCR = {
            top: 0,
            left: 0
        };
        var offsetParentEl = this.parentOffsetEl(element);
        if (offsetParentEl !== document) {
            offsetParentBCR = this.offset(offsetParentEl);
            offsetParentBCR.top += offsetParentEl.clientTop - offsetParentEl.scrollTop;
            offsetParentBCR.left += offsetParentEl.clientLeft - offsetParentEl.scrollLeft;
        }
        var boundingClientRect = element.getBoundingClientRect();
        return {
            width: boundingClientRect.width || element.offsetWidth,
            height: boundingClientRect.height || element.offsetHeight,
            top: elBCR.top - offsetParentBCR.top,
            left: elBCR.left - offsetParentBCR.left
        };
    };
    /**
     * Pure logic to test the element's position
     * @param hostElPos
     * @param targetElSizes
     * @param windowSizes
     * @param pos0
     * @param pos1
     * @returns {any}
     */
    WixPosition.prototype.calculatePosition = function (hostElPos, targetElSizes, windowSizes, pos0, pos1) {
        var _a, _b;
        var targetElPos = {
            top: 0,
            left: 0
        };
        var shiftWidth = (_a = {},
            _a[CENTER] = function () { return hostElPos.left + hostElPos.width / 2 - targetElSizes.width / 2; },
            _a[LEFT] = function () { return hostElPos.left - targetElSizes.width; },
            _a[RIGHT] = function () { return hostElPos.left + hostElPos.width; },
            _a[ALIGN_LEFT] = function () { return hostElPos.left; },
            _a[ALIGN_RIGHT] = function () { return hostElPos.left + hostElPos.width - targetElSizes.width; },
            _a[STICK_TO_LEFT] = function () { return 0; },
            _a[STICK_TO_RIGHT] = function () { return windowSizes.width - targetElSizes.width; },
            _a);
        var shiftHeight = (_b = {},
            _b[CENTER] = function () { return hostElPos.top + hostElPos.height / 2 - targetElSizes.height / 2; },
            _b[TOP] = function () { return hostElPos.top - targetElSizes.height; },
            _b[BOTTOM] = function () { return hostElPos.top + hostElPos.height; },
            _b[ALIGN_TOP] = function () { return hostElPos.top; },
            _b[ALIGN_BOTTOM] = function () { return hostElPos.top + hostElPos.height - targetElSizes.height; },
            _b[STICK_TO_TOP] = function () { return 0; },
            _b[STICK_TO_BOTTOM] = function () { return windowSizes.height - targetElSizes.height; },
            _b);
        switch (pos0) {
            case RIGHT:
            case LEFT:
                targetElPos.top = shiftHeight[pos1]();
                targetElPos.left = shiftWidth[pos0]();
                break;
            case BOTTOM:
            case TOP:
                targetElPos.top = shiftHeight[pos0]();
                targetElPos.left = shiftWidth[pos1]();
                break;
            default:
        }
        return targetElPos;
    };
    WixPosition.prototype.handleCollisionPos0 = function (pos0, overflowing, collisionStrategy) {
        var _a, _b;
        if (collisionStrategy !== FIT && collisionStrategy !== FLIP) {
            return pos0;
        }
        var selectedPos0 = (_a = {},
            _a[FLIP] = (_b = {},
                _b[TOP] = function () { return overflowing.top && !overflowing.bottom && BOTTOM; },
                _b[BOTTOM] = function () { return overflowing.bottom && !overflowing.top && TOP; },
                _b[LEFT] = function () { return overflowing.left && !overflowing.right && RIGHT; },
                _b[RIGHT] = function () { return overflowing.right && !overflowing.left && LEFT; },
                _b),
            _a);
        return (selectedPos0[FLIP][pos0] || noop)() || pos0;
    };
    WixPosition.prototype.handleCollisionPos1 = function (pos1, pos0, overflowing, collisionStrategy) {
        var _a, _b, _c;
        var _this = this;
        if (collisionStrategy !== FIT && collisionStrategy !== FLIP) {
            return pos1;
        }
        var selectedPos1 = (_a = {},
            _a[FIT] = (_b = {},
                _b[TOP] = function () { return overflowing.top && ALIGN_TOP; },
                _b[BOTTOM] = function () { return overflowing.bottom && ALIGN_BOTTOM; },
                _b[LEFT] = function () { return overflowing.left && ALIGN_LEFT; },
                _b[RIGHT] = function () { return overflowing.right && ALIGN_RIGHT; },
                _b[CENTER] = function () { return _this.handlePos1CenterAlignment(pos0, overflowing); },
                _b),
            _a[FLIP] = (_c = {},
                _c[TOP] = function () { return overflowing.top && !overflowing.bottom && BOTTOM; },
                _c[BOTTOM] = function () { return overflowing.bottom && !overflowing.top && TOP; },
                _c[LEFT] = function () { return overflowing.left && !overflowing.right && RIGHT; },
                _c[RIGHT] = function () { return overflowing.right && !overflowing.left && LEFT; },
                _c[CENTER] = function () { return CENTER; },
                _c),
            _a);
        return (selectedPos1[collisionStrategy][pos1] || noop)() || pos1;
    };
    WixPosition.prototype.handlePos1CenterAlignment = function (pos0, overflowing) {
        var _a;
        var selectedPos1CenterAlignment = (_a = {},
            _a[TOP] = function () {
                var option;
                option = overflowing.left && STICK_TO_LEFT;
                option = overflowing.right ? STICK_TO_RIGHT : option;
                return option;
            },
            _a[BOTTOM] = function () {
                var option;
                option = overflowing.left && STICK_TO_LEFT;
                option = overflowing.right ? STICK_TO_RIGHT : option;
                return option;
            },
            _a[LEFT] = function () {
                var option;
                option = overflowing.top && STICK_TO_TOP;
                option = overflowing.bottom ? STICK_TO_BOTTOM : option;
                return option;
            },
            _a[RIGHT] = function () {
                var option;
                option = overflowing.top && STICK_TO_TOP;
                option = overflowing.bottom ? STICK_TO_BOTTOM : option;
                return option;
            },
            _a);
        return selectedPos1CenterAlignment[pos0]();
    };
    WixPosition.prototype.handleCollisions = function (pos0, pos1, overflowing, collisionStrategy) {
        if (collisionStrategy === void 0) { collisionStrategy = NONE; }
        var newPos0 = this.handleCollisionPos0(pos0, overflowing, collisionStrategy);
        return {
            pos0: newPos0,
            pos1: this.handleCollisionPos1(pos1, newPos0, overflowing, collisionStrategy)
        };
    };
    WixPosition.prototype.getWindowSizes = function (hostEl, appendToBody) {
        if (appendToBody) {
            return {
                width: window.innerWidth,
                height: window.innerHeight
            };
        }
        else {
            var hostElOffsetParentEl = this.parentOffsetEl(hostEl);
            return {
                width: hostElOffsetParentEl.clientWidth || window.innerWidth,
                height: hostElOffsetParentEl.clientHeight || window.innerHeight
            };
        }
    };
    WixPosition.prototype.getHostElPos = function (hostEl, appendToBody) {
        if (appendToBody === void 0) { appendToBody = false; }
        return appendToBody ? this.fixMarginBelowBody(this.offset(hostEl)) : this.position(hostEl);
    };
    WixPosition.prototype.getTargetElPos = function (targetEl) {
        return this.offset(targetEl);
    };
    WixPosition.prototype.addMarginsToCalculation = function (pos0, pos1, calculatedPosition, margin) {
        var newCalculatedPosition = {
            top: calculatedPosition.top,
            left: calculatedPosition.left
        };
        switch (pos0) {
            case TOP:
                newCalculatedPosition.top -= margin.height;
                break;
            case BOTTOM:
                newCalculatedPosition.top += margin.height;
                break;
            case LEFT:
                newCalculatedPosition.left -= margin.width;
                break;
            case RIGHT:
                newCalculatedPosition.left += margin.width;
                break;
            default:
        }
        //do not handle case of center, this is part of how center works
        switch (pos1) {
            case TOP:
            case ALIGN_BOTTOM:
            case STICK_TO_TOP:
                newCalculatedPosition.top -= margin.height;
                break;
            case BOTTOM:
            case ALIGN_TOP:
            case STICK_TO_BOTTOM:
                newCalculatedPosition.top += margin.height;
                break;
            case LEFT:
            case ALIGN_RIGHT:
            case STICK_TO_RIGHT:
                newCalculatedPosition.left -= margin.width;
                break;
            case RIGHT:
            case ALIGN_LEFT:
            case STICK_TO_LEFT:
                newCalculatedPosition.left += margin.width;
                break;
            default:
        }
        return newCalculatedPosition;
    };
    /**
     * Provides coordinates for the targetElement in relation to hostElement
     */
    WixPosition.prototype.positionElements = function (hostElement, targetElement, positionString, margin, appendToBody, collisionStrategy) {
        if (appendToBody === void 0) { appendToBody = true; }
        if (collisionStrategy === void 0) { collisionStrategy = FIT; }
        margin = margin || {};
        margin.width = margin.width || 0;
        margin.height = margin.height || 0;
        var positionStrParts = positionString.split('-');
        var pos0 = positionStrParts[0], pos1 = positionStrParts[1] || CENTER;
        var hostElPos = this.getHostElPos(hostElement, appendToBody);
        var targetElPos = this.getTargetElPos(targetElement);
        var windowSizes = this.getWindowSizes(hostElement, appendToBody);
        var overflowing = this.overflowing(hostElPos, targetElPos, windowSizes, pos1, margin);
        var namedPosition = this.handleCollisions(pos0, pos1, overflowing, collisionStrategy);
        var calculatedPosition = this.calculatePosition(hostElPos, targetElPos, windowSizes, namedPosition.pos0, namedPosition.pos1);
        var calculatedPositionWithMargin = this.addMarginsToCalculation(namedPosition.pos0, namedPosition.pos1, calculatedPosition, margin);
        return __assign(__assign({}, calculatedPositionWithMargin), namedPosition);
    };
    return WixPosition;
}());
export { WixPosition };
//# sourceMappingURL=WixPosition.js.map