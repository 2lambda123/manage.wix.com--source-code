import * as React from 'react';
import { useEffect } from 'react';
import { Box } from 'wix-style-react';
import { connect } from 'react-redux';
import { getCurrentSite, getRecentSitesList, getSitesWithoutCurrent } from '../../../selectors/recentSitesListSelector';
import { provideLogger } from '../../../services/BiLogger';
import SiteItem from './SiteItem/SiteItem';
import * as s from './SiteList.scss';
import { MySitesDropdownDataHooks } from '../MySitesDropdown.data-hooks';
import { BiEvents } from '../../../constants/biEvents';
import { getCurrentSiteId } from '../../../selectors/currentSiteSelectors';
import { getBiPageView } from '../../../selectors/biPageViewSelectors';
export var SiteList = function (_a) {
    var currentSiteId = _a.currentSiteId, biLogger = _a.biLogger, biPageView = _a.biPageView, allSites = _a.allSites, shouldShowScroll = _a.shouldShowScroll, loadingStartTime = _a.loadingStartTime;
    useEffect(function () {
        biLogger.logEvent(BiEvents.MY_SITES_DROPDOWN_SUCCESS, {
            msid: currentSiteId,
            page_view: biPageView,
            site_list: allSites === null || allSites === void 0 ? void 0 : allSites.map(function (site) { return site.msid; }).join(','),
            loading_time: Date.now() - loadingStartTime,
        });
    }, [biLogger, currentSiteId, biPageView, allSites]);
    var height = shouldShowScroll ? 265 : undefined;
    return (React.createElement(Box, { direction: "vertical", className: s.sites, paddingBottom: '12px', dataHook: MySitesDropdownDataHooks.SitesList, height: height },
        React.createElement(Box, { direction: "vertical" }, allSites.map(function (site, index) { return React.createElement(SiteItem, { site: site, scrollShown: shouldShowScroll, location: index, isCurrent: currentSiteId === site.msid, isLast: index === allSites.length - 1 }); }))));
};
var mapStateToProps = function (state) {
    var allSites = getRecentSitesList(state);
    var shouldShowScroll = (allSites === null || allSites === void 0 ? void 0 : allSites.length) > 4;
    return ({
        currentSiteId: getCurrentSiteId(state),
        currentSite: getCurrentSite(state),
        sitesWithoutCurrent: getSitesWithoutCurrent(state),
        biPageView: getBiPageView(state),
        allSites: getRecentSitesList(state),
        shouldShowScroll: shouldShowScroll,
    });
};
export default provideLogger(connect(mapStateToProps)(SiteList));
//# sourceMappingURL=SiteList.js.map