import { appDefIds, closeSidePanel, getCurrentInstance, onSidePanelClose, onSidePanelOpen, openSidePanel } from '@wix/business-manager-api';
import { create } from '@wix/fedops-logger';
import webBiLogger from '@wix/web-bi-logger';
import initNewReleasesBiLogger from '@wix/bi-logger-new-releases';
import * as React from 'react';
import { withTranslation } from '@wix/wix-i18n-config';
import { connect } from 'react-redux';
import { CounterBadge } from 'wix-style-react';
import Promote from 'wix-ui-icons-common/Promote';
import { BiEvents } from '../../constants/biEvents';
import { getCurrentSiteId } from '../../selectors/currentSiteSelectors';
import { provideLogger } from '../../services/BiLogger';
import { axiosInstance } from '../../utils/axiosInstance';
import * as s from './NewReleasesWidget.scss';
import IconTooltip from '../IconTooltip/IconTooltip';
export var EVENTS_URL = '/_api/wix-new-releases-service/v1/events';
export var UNSEEN_COUNTER_URL = '/_api/wix-new-releases-service/v1/announcements/count?type=UNSEEN';
export var COMPONENT_NAME = 'new-releases-widget';
var fedopsLogger = create(COMPONENT_NAME);
var newReleasesBiLogger = initNewReleasesBiLogger(webBiLogger)();
var NewReleasesWidgetCmp = function (_a) {
    var biLogger = _a.biLogger, metaSiteId = _a.metaSiteId, t = _a.t;
    var _b = React.useState(false), isNewReleasesSidePanelOpened = _b[0], setNewReleasesSidePanelOpened = _b[1];
    var _c = React.useState(0), unreadCounter = _c[0], setUnreadCounter = _c[1];
    var _d = React.useState(false), iconHovered = _d[0], setIconHovered = _d[1];
    var logOpenDialogClick = function () {
        newReleasesBiLogger.newReleasesOpenFeed({
            platform: COMPONENT_NAME,
            msid: metaSiteId,
        });
        biLogger.logEvent(BiEvents.OPEN_DIALOG_CLICK, {
            msid: metaSiteId,
            page_view: 'dashboard',
            origin: 'header',
            view: 'new releases',
        });
    };
    var logBadgeCounter = function (new_notifications) {
        newReleasesBiLogger.nreReleasesBadgeNotification({
            platform: COMPONENT_NAME,
            msid: metaSiteId,
            new_notifications: new_notifications,
        });
        biLogger.logEvent(BiEvents.NEW_RELEASES_BADGE_COUNTER, {
            msid: metaSiteId,
            new_notifications: new_notifications,
        });
    };
    var onClick = function () {
        if (isNewReleasesSidePanelOpened) {
            closeSidePanel();
        }
        else {
            fedopsLogger.appLoadStarted();
            openSidePanel({
                componentName: COMPONENT_NAME,
                componentProps: {
                    metaSiteId: metaSiteId,
                },
            });
            setNewReleasesSidePanelOpened(true);
        }
        setUnreadCounter(0);
        logOpenDialogClick();
    };
    var onMouseEnter = function () {
        if (!iconHovered) {
            setIconHovered(true);
            newReleasesBiLogger.newReleasesHoverNewReleasesIcon({
                platform: COMPONENT_NAME,
                msid: metaSiteId,
            });
            biLogger.logEvent(BiEvents.NEW_RELEASES_ICON_HOVER, {
                msid: metaSiteId,
            });
        }
    };
    var sendEventToServer = function (type) {
        axiosInstance.post(EVENTS_URL, {
            event: {
                type: type,
            },
        }, {
            headers: {
                Authorization: getCurrentInstance(appDefIds.metaSite),
            }
        }).catch(function () { });
    };
    var fetchAnnouncementsCount = function () {
        fedopsLogger.interactionStarted('badge-counter');
        return axiosInstance.get(UNSEEN_COUNTER_URL, {
            headers: {
                Authorization: getCurrentInstance(appDefIds.metaSite),
            },
        })
            .then(function (_a) {
            var data = _a.data;
            if (data.count) {
                setUnreadCounter(data.count);
                logBadgeCounter(data.count);
            }
            fedopsLogger.interactionEnded('badge-counter');
            return data.count;
        })
            .catch(function () { return 0; });
    };
    var createLabelForGlassboxSession = function () {
        if (window.wixRecorder) {
            window.wixRecorder.addLabel(COMPONENT_NAME);
        }
    };
    React.useEffect(function () {
        sendEventToServer('ICON_SHOWN');
        void fetchAnnouncementsCount();
        createLabelForGlassboxSession();
        onSidePanelOpen(function () { return setNewReleasesSidePanelOpened(false); });
        onSidePanelClose(function () { return setNewReleasesSidePanelOpened(false); });
    }, []);
    return (React.createElement("div", { className: s.root, "data-hook": "new-releases-widget" },
        React.createElement("div", { "data-hook": "new-releases-icon-wrapper", className: s.wrapper, onMouseEnter: onMouseEnter },
            React.createElement(IconTooltip, { content: t('new_releases.tooltip') },
                React.createElement(Promote, { "data-hook": "new-releases-icon", className: s.icon, onClick: onClick })),
            unreadCounter > 0 && (React.createElement("span", { onClick: onClick },
                React.createElement(CounterBadge, { className: s.badge, skin: "danger", dataHook: "new-releases-badge" }, unreadCounter))))));
};
var mapStateToProps = function (state) {
    return {
        metaSiteId: getCurrentSiteId(state)
    };
};
export var NewReleasesWidget = provideLogger(withTranslation()(NewReleasesWidgetCmp));
export var NewReleasesWidgetConnected = connect(mapStateToProps)(NewReleasesWidget);
//# sourceMappingURL=NewReleasesWidget.js.map