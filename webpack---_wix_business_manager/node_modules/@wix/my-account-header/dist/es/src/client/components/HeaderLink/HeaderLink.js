import { __assign, __extends } from "tslib";
import * as React from 'react';
import * as css from './HeaderLink.scss';
import * as URI from 'urijs';
import classnames from 'classnames';
import { BiEvents } from '../../constants/biEvents';
import HeaderLinkBadge from './HeaderLinkBadge';
var HeaderLink = /** @class */ (function (_super) {
    __extends(HeaderLink, _super);
    function HeaderLink() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isCurrent = _this.props.linkPage === _this.props.currentPage;
        _this.onClick = function () {
            var _a = _this.props, biLinkName = _a.biLinkName, biPageView = _a.biPageView, msid = _a.msid;
            _this.props.biLogger.logEvent(BiEvents.HEADER_LINK_CLICKED, __assign(__assign({}, (msid ? { msid: msid } : {})), { hosting: 'MA', name: biLinkName, page_view: biPageView }));
            return true;
        };
        return _this;
    }
    HeaderLink.prototype.buildUrl = function () {
        var _a = this.props, url = _a.url, biPageView = _a.biPageView;
        return new URI(url).addQuery({ referralAdditionalInfo: biPageView }).toString();
    };
    HeaderLink.prototype.render = function () {
        var _a;
        var _b = this, isCurrent = _b.isCurrent, _c = _b.props, text = _c.text, dataHook = _c.dataHook, target = _c.target, badge = _c.badge;
        var classNames = classnames(css.wrapper, css.sitesDropDown, (_a = {}, _a[css.isCurrent] = isCurrent, _a));
        return (React.createElement("div", { "data-hook": dataHook },
            React.createElement("span", { className: classNames },
                React.createElement("a", { href: this.buildUrl(), className: css.link, "data-hook": "headerlink-href", target: target, onClick: this.onClick }, text),
                !!badge && React.createElement(HeaderLinkBadge, { text: badge }))));
    };
    return HeaderLink;
}(React.PureComponent));
export { HeaderLink };
//# sourceMappingURL=HeaderLink.js.map