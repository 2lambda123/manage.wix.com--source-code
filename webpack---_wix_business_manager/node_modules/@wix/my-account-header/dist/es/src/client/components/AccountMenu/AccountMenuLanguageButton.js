import { __extends } from "tslib";
import * as React from 'react';
import { withTranslation } from '@wix/wix-i18n-config';
import * as css from './AccountMenu.scss';
import Languages from 'wix-ui-icons-common/Languages';
import { connect } from 'react-redux';
import { ReactDropdownDialog } from '../ReactDropdownDialog/ReactDropdownDialog';
import { supportedLanguages } from '../LanguagesList/Languages';
import LanguagesList from '../LanguagesList/LanguagesList';
import { getLanguage } from '../../selectors/currentUserSelectors';
import { BILoggerAccountMenuService } from './BILoggerAccountMenuService';
import { provideLogger } from '../../services/BiLogger';
import { LANGUAGES } from './MenuItems';
import { getCurrentSiteId } from '../../selectors/currentSiteSelectors';
import { Button } from 'wix-style-react';
import classnames from 'classnames';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
var AccountMenuLanguageButton = /** @class */ (function (_super) {
    __extends(AccountMenuLanguageButton, _super);
    function AccountMenuLanguageButton(props) {
        var _this = _super.call(this, props) || this;
        _this.reportLanguageClicked = function (code) {
            var biLoggerService = new BILoggerAccountMenuService(_this.props.biLogger, _this.props.metaSiteId, _this.props.biPageView, _this.props.menuItemsForBI);
            biLoggerService.reportAccountMenuItemClicked({ id: code, origin: 'languages' });
        };
        return _this;
    }
    AccountMenuLanguageButton.prototype.render = function () {
        var _a;
        var isScrollableMenu = this.props.isScrollableMenu;
        var linkClassNames = classnames(css.languageLink, (_a = {}, _a[css.languageLinkWrapper] = isScrollableMenu, _a));
        return (React.createElement("div", { key: LANGUAGES, className: linkClassNames },
            React.createElement(LanguagesDropDown, { currentLanguage: this.props.currentLanguage, reportLanguageClicked: this.reportLanguageClicked, isScrollableMenu: isScrollableMenu })));
    };
    return AccountMenuLanguageButton;
}(React.Component));
var mapStateToProps = function (state) {
    return {
        currentLanguage: getLanguage(state),
        biPageView: state.biPageView,
        metaSiteId: getCurrentSiteId(state),
        isScrollableMenu: experimentsSelectors(state).enabled('specs.wosbm.scrollableAccountMenu')
    };
};
export default provideLogger(withTranslation()(connect(mapStateToProps)(AccountMenuLanguageButton)));
function CurrentLanguageLink(_a) {
    var currentLanguage = _a.currentLanguage, isScrollableMenu = _a.isScrollableMenu;
    return (React.createElement(Button, { as: "a", className: css.languageLinkButton, priority: "secondary", dataHook: LANGUAGES, size: "small", skin: "light", rel: LANGUAGES },
        React.createElement("span", { className: isScrollableMenu ? css.languagesMenuItemIconNew : css.languagesMenuItemIcon },
            React.createElement(Languages, { size: "24px" })),
        supportedLanguages[currentLanguage]));
}
function LanguagesDropDown(_a) {
    var currentLanguage = _a.currentLanguage, reportLanguageClicked = _a.reportLanguageClicked, isScrollableMenu = _a.isScrollableMenu;
    return (React.createElement(ReactDropdownDialog, { openStrategy: "hover", autoCloseTimeout: 100, appendToBody: false, dialogPosition: { openDirection: 'left-alignBottom', collisionStrategy: 'none' }, keepOpenDialogs: true, moveBy: { left: -3, top: 4 }, classNames: { arrow: css.dropdownArrow, dialogComponent: css.dropdownDialogComponent } },
        React.createElement(CurrentLanguageLink, { currentLanguage: currentLanguage, isScrollableMenu: isScrollableMenu }),
        React.createElement(LanguagesList, { reportLanguageClicked: reportLanguageClicked })));
}
//# sourceMappingURL=AccountMenuLanguageButton.js.map