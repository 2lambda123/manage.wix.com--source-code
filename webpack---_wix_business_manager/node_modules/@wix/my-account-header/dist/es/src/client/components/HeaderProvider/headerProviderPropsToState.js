import { ICurrentPage } from '../../types/currentPage';
export var headerProviderPropsToState = function (props) {
    // remove the = false once isEditorX is implemented in all 3 projects
    var initialData = props.initialData, metaSiteId = props.metaSiteId, isSiteOwner = props.isSiteOwner, sitePermissions = props.sitePermissions, experiments = props.experiments, locale = props.locale, isDebug = props.isDebug, biPageView = props.biPageView, isADIEditorType = props.isADIEditorType, currentPage = props.currentPage, dashboardAnswersWidgetStaticsVersion = props.dashboardAnswersWidgetStaticsVersion, pingNotificationsWidgetStaticsUrl = props.pingNotificationsWidgetStaticsUrl, searchEverythingWidgetStaticsUrl = props.searchEverythingWidgetStaticsUrl, inboxHeaderWidgetStaticsUrl = props.inboxHeaderWidgetStaticsUrl, coBranding = props.coBranding, _a = props.isEditorX, isEditorX = _a === void 0 ? false : _a;
    return {
        biPageView: biPageView,
        isADIEditorType: isADIEditorType,
        currentPage: currentPage || ICurrentPage.DASHBOARD,
        currentUser: { language: locale },
        currentSite: {
            id: metaSiteId,
            isSiteOwner: isSiteOwner,
            sitePermissions: sitePermissions
        },
        topology: {
            dashboardAnswersWidgetStaticsVersion: dashboardAnswersWidgetStaticsVersion,
            pingNotificationsWidgetStaticsUrl: pingNotificationsWidgetStaticsUrl,
            searchEverythingWidgetStaticsUrl: searchEverythingWidgetStaticsUrl,
            inboxHeaderWidgetStaticsUrl: inboxHeaderWidgetStaticsUrl
        },
        experiments: (initialData === null || initialData === void 0 ? void 0 : initialData.experiments) || experiments,
        isDebug: isDebug,
        siteCoBranding: coBranding,
        isEditorX: isEditorX
    };
};
//# sourceMappingURL=headerProviderPropsToState.js.map