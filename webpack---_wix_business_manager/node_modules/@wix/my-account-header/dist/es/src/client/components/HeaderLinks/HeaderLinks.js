import { __extends } from "tslib";
import * as React from 'react';
import { connect } from 'react-redux';
import HireAnExpertLink from '../HireAnExpertLink/HireAnExpertLink';
import { Position, Section } from '../Header/HeaderLayout/HeaderLayout';
import { Explore } from '../Exlpore/Explore';
import Help from '../Help/Help';
import SearchEverythingWidgetLazyComponent from '../SearchEverything/SearchEverythingWidget';
import ExpertDashboardLinkContainer from '../ExpertDashboardLink/ExpertDashboardLink.container';
import { HeaderViewMode } from '../../constants/headerViewMode';
import { isEditorXBrand } from '../../selectors/isEditorXSelector';
import AcademyX from '../AcademyX/AcademyX';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
import { hasSearchPermission } from '../../selectors/currentSiteSelectors';
import MySitesDropdown from '../MySitesDropdown/MySitesDropdown';
var HeaderLinks = /** @class */ (function (_super) {
    __extends(HeaderLinks, _super);
    function HeaderLinks() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    HeaderLinks.prototype.render = function () {
        var _a = this.props, showSearch = _a.showSearch, isEditorX = _a.isEditorX, shouldHideHireExpert = _a.shouldHideHireExpert, viewMode = _a.viewMode;
        return (React.createElement(Section, { position: Position.LEFT },
            React.createElement(MySitesDropdown, { viewMode: viewMode }),
            React.createElement(ExpertDashboardLinkContainer, null),
            isEditorX ? React.createElement(AcademyX, null) : React.createElement(Explore, null),
            React.createElement(Help, null),
            !shouldHideHireExpert && React.createElement(HireAnExpertLink, null),
            showSearch && React.createElement(SearchEverythingWidgetLazyComponent, null)));
    };
    return HeaderLinks;
}(React.PureComponent));
var mapStateToProps = function (state, ownProps) {
    var viewMode = ownProps.viewMode;
    var showSearch = !experimentsSelectors(state).enabled('specs.wos2.redesignSearchVersion1') &&
        viewMode === HeaderViewMode.SITE &&
        hasSearchPermission(state);
    var isEditorX = isEditorXBrand(state);
    var shouldHideHireExpert = isEditorX && experimentsSelectors(state).enabled('specs.wosbm.hireSpecialistInEditorX');
    return {
        showSearch: showSearch,
        isEditorX: isEditorX,
        shouldHideHireExpert: shouldHideHireExpert,
    };
};
export default connect(mapStateToProps)(HeaderLinks);
//# sourceMappingURL=HeaderLinks.js.map