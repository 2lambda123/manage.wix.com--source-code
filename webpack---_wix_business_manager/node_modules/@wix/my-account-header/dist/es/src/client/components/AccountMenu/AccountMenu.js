import { __extends, __spreadArrays } from "tslib";
import * as React from 'react';
import { withTranslation } from '@wix/wix-i18n-config';
import * as css from './AccountMenu.scss';
import Header from './AccountMenuHeader';
import LogoutButton from './AccountMenuLogoutButton';
import { getLanguage } from '../../selectors/currentUserSelectors';
import { connect } from 'react-redux';
import LanguageButton from './AccountMenuLanguageButton';
import AccountMenuItem from './AccountMenuItem';
import { HIRE_AN_EXPERT, HIRE_A_SPECIALIST, LANGUAGES, MenuItems, PAYMENT_METHODS, permissionMap } from './MenuItems';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
import { getUserPermissions } from '../../selectors/getPermissions';
import { isCoBranded } from '../../selectors/coBrandingSelector';
import { isNtt } from '../../services/cookieService/cookieService';
import { isEditorXBrand } from '../../selectors/isEditorXSelector';
import { AccountMenuFooter } from './AccountMenuFooter';
import { AccountMenuBody as AccountMenuScrollableBody } from './AccountMenuBody';
import classnames from 'classnames';
var AccountMenu = /** @class */ (function (_super) {
    __extends(AccountMenu, _super);
    function AccountMenu(props) {
        var _this = _super.call(this, props) || this;
        _this.menuItems = [];
        _this.menuItemsForBI = [];
        _this.menuItems = _this.getMenuItemsForUser(MenuItems({
            locale: props.locale, experiments: props.experiments, isEditorX: props.isEditorX
        }));
        _this.menuItemsForBI = __spreadArrays(_this.menuItems, [{ key: LANGUAGES }]);
        return _this;
    }
    AccountMenu.prototype.getMenuItemsForUser = function (menuItems) {
        var menuItemsForUser = menuItems;
        menuItemsForUser = menuItemsForUser
            .filter(this.byPermissions())
            .filter(this.byExperiments());
        return menuItemsForUser;
    };
    AccountMenu.prototype.byPermissions = function () {
        var _this = this;
        return function (item) { return permissionMap[item.key] === undefined || _this.props.permissions.includes(permissionMap[item.key]); };
    };
    AccountMenu.prototype.byExperiments = function () {
        var displayPaymentMethods = this.props.experiments.enabled('specs.premium-management.DisplayAccountPaymentMethodsInAccountMenu');
        var showHireAnExpert = this.props.showHireAnExpert;
        return function (item) {
            switch (item.key) {
                case PAYMENT_METHODS:
                    return displayPaymentMethods;
                case HIRE_AN_EXPERT:
                case HIRE_A_SPECIALIST:
                    return showHireAnExpert;
                default:
                    return true;
            }
        };
    };
    AccountMenu.prototype.render = function () {
        var _a;
        var isScrollableMenu = this.props.isScrollableMenu;
        var accountMenuClassNames = classnames(css.accountMenu, (_a = {}, _a[css.accountMenuNew] = isScrollableMenu, _a));
        return (React.createElement("div", { "data-hook": "account-menu", className: accountMenuClassNames },
            React.createElement(Header, null),
            isScrollableMenu ?
                React.createElement(AccountMenuScrollableBody, { menuItems: this.menuItems, menuItemsForBI: this.menuItemsForBI }) :
                React.createElement(AccountMenuBody, { menuItems: this.menuItems, menuItemsForBI: this.menuItemsForBI }),
            isScrollableMenu && React.createElement(AccountMenuFooter, { menuItemsForBI: this.menuItemsForBI })));
    };
    return AccountMenu;
}(React.Component));
var mapStateToProps = function (state) {
    var hideHireAnExpertLink = isNtt() || isCoBranded(state);
    return {
        locale: getLanguage(state),
        experiments: experimentsSelectors(state),
        permissions: getUserPermissions(state),
        showHireAnExpert: !hideHireAnExpertLink,
        isEditorX: isEditorXBrand(state),
        isScrollableMenu: experimentsSelectors(state).enabled('specs.wosbm.scrollableAccountMenu')
    };
};
export default withTranslation()(connect(mapStateToProps)(AccountMenu));
function AccountMenuBody(_a) {
    var menuItems = _a.menuItems, menuItemsForBI = _a.menuItemsForBI;
    return (React.createElement("div", { "data-hook": "account-menu-body", className: css.body },
        React.createElement("div", { className: css.accountMenuContent },
            menuItems.map(function (item, index) {
                return React.createElement(AccountMenuItem, { item: item, key: index, menuItemsForBI: menuItemsForBI });
            }),
            React.createElement("div", { className: css.footer },
                React.createElement(LanguageButton, { menuItemsForBI: menuItemsForBI }),
                React.createElement(LogoutButton, { menuItemsForBI: menuItemsForBI })))));
}
//# sourceMappingURL=AccountMenu.js.map