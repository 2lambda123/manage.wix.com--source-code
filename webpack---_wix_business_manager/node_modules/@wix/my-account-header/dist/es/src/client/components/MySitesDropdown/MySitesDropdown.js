import * as React from 'react';
import { Box, Popover } from 'wix-style-react';
import * as s from './MySitesDropdown.scss';
import { useCallback, useState } from 'react';
import { connect } from 'react-redux';
import DropdownTrigger from './DropdownTrigger/DropdownTrigger';
import { MySitesDropdownDataHooks } from './MySitesDropdown.data-hooks';
import { BiEvents, BiParams } from '../../constants/biEvents';
import { provideLogger } from '../../services/BiLogger';
import SiteList from './SiteList/SiteList';
import Header from './Header/Header.container';
import { getBiPageView } from '../../selectors/biPageViewSelectors';
import { getCurrentSite, hasNoSites, hasRecentSitesListError, isLoadingSitesList } from '../../selectors/recentSitesListSelector';
import Footer from './Footer/MySitesFooter';
import NoSitesContent from './NoSitesContent/NoSitesContent';
import Loader from './SiteList/Loader/Loader';
import { getCurrentSiteId } from '../../selectors/currentSiteSelectors';
import { HeaderViewMode } from '../../constants/headerViewMode';
import { isEditorXBrand } from '../../selectors/isEditorXSelector';
export var MySitesDropdown = function (_a) {
    var currentSiteId = _a.currentSiteId, currentSite = _a.currentSite, isAccountLevel = _a.isAccountLevel, biLogger = _a.biLogger, biPageView = _a.biPageView, isErrorInRecentSitesList = _a.isErrorInRecentSitesList, isLoading = _a.isLoading, isSiteLess = _a.isSiteLess, isEditorX = _a.isEditorX;
    var _b = useState(false), isShown = _b[0], setShown = _b[1];
    var _c = useState(0), loadingStartTime = _c[0], setLoadingStartTime = _c[1];
    var toggle = useCallback(function () {
        setShown(!isShown);
        if (!isShown) {
            setLoadingStartTime(Date.now());
            biLogger.logEvent(BiEvents.OPEN_DIALOG_CLICK, {
                msid: currentSiteId,
                page_view: biPageView,
                view: BiParams.MY_SITES_DROPDOWN,
            });
        }
    }, [isShown, setShown, biLogger, currentSite]);
    function getDropdownContent() {
        if (isErrorInRecentSitesList || isSiteLess) {
            return React.createElement(NoSitesContent, { loadingStartTime: loadingStartTime });
        }
        else if (isLoading) {
            return React.createElement(Loader, null);
        }
        else {
            return React.createElement(SiteList, { isAccountLevel: isAccountLevel, loadingStartTime: loadingStartTime });
        }
    }
    return (React.createElement(React.Fragment, null,
        React.createElement(Popover, { shown: isShown, placement: "bottom-start", moveBy: {
                y: 6,
                x: isEditorX ? -110 : -69,
            }, dataHook: MySitesDropdownDataHooks.Dropdown, onClickOutside: function () { return toggle(); }, showArrow: true },
            React.createElement(Popover.Element, null,
                React.createElement(DropdownTrigger, { toggle: toggle, isAccountLevel: isAccountLevel })),
            React.createElement(Popover.Content, null,
                React.createElement(Box, { width: 450 },
                    React.createElement(Box, { direction: "vertical", className: s.container, verticalAlign: "space-between" },
                        React.createElement(Header, null),
                        getDropdownContent(),
                        React.createElement(Footer, null)))))));
};
var mapStateToProps = function (state, _a) {
    var viewMode = _a.viewMode;
    var currentSite = getCurrentSite(state);
    return ({
        currentSiteId: getCurrentSiteId(state),
        currentSite: currentSite,
        isAccountLevel: viewMode === HeaderViewMode.ACCOUNT,
        biPageView: getBiPageView(state),
        isErrorInRecentSitesList: hasRecentSitesListError(state),
        isSiteLess: hasNoSites(state),
        isLoading: isLoadingSitesList(state),
        isEditorX: isEditorXBrand(state),
    });
};
export default provideLogger(connect(mapStateToProps)(MySitesDropdown));
//# sourceMappingURL=MySitesDropdown.js.map