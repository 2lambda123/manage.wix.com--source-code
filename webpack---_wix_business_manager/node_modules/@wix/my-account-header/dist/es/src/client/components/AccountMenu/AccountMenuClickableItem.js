import { __extends } from "tslib";
import * as React from 'react';
import { withTranslation } from '@wix/wix-i18n-config';
import { connect } from 'react-redux';
import * as URI from 'urijs';
import { getBackToSiteQuery } from '@wix/business-manager-api';
import { accountManagerPageComponentIdMap, HELP_CENTER, TEMPLATES } from './MenuItems';
import { snakeCase } from 'snake-case';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
import { BILoggerAccountMenuService } from './BILoggerAccountMenuService';
import { provideLogger } from '../../services/BiLogger';
import { getCurrentSiteId } from '../../selectors/currentSiteSelectors';
import { getUserPermissions } from '../../selectors/getPermissions';
import { ReactDropdownDialogContext } from '../ReactDropdownDialog/ReactDropdownDialog';
import { isCoBranded } from '../../selectors/coBrandingSelector';
import { Button } from 'wix-style-react';
import { isNtt } from '../../services/cookieService/cookieService';
export var NO_BACK_REDIRECT_NEEDED = [TEMPLATES, HELP_CENTER];
export var REQUIRE_NEW_TAB = [TEMPLATES, HELP_CENTER];
function backRedirectLink(link) {
    return URI.decode(new URI(link).addSearch(getBackToSiteQuery()).toString());
}
function addReferralInfo(link, biPageView, key) {
    var _a;
    var referralName = key === TEMPLATES ? 'ref' : 'referralAdditionalInfo';
    return new URI(link).addQuery((_a = {}, _a[referralName] = biPageView, _a)).toString();
}
var AccountMenuClickableItem = /** @class */ (function (_super) {
    __extends(AccountMenuClickableItem, _super);
    function AccountMenuClickableItem() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AccountMenuClickableItem.prototype.reportItemClicked = function (item) {
        var biLoggerService = new BILoggerAccountMenuService(this.props.biLogger, this.props.metaSiteId, this.props.biPageView, this.props.menuItemsForBI);
        biLoggerService.reportAccountMenuItemClicked({
            id: item.key,
            origin: 'main-menu'
        });
    };
    AccountMenuClickableItem.prototype.handleAccountManagerNavigationIfNeeded = function (item, event) {
        var AccountManager = window['AccountManager'];
        if (AccountManager && accountManagerPageComponentIdMap[item.key] && this.props.experiments.enabled('specs.wos2.supportNavigateToForAccountManagerLinks')) {
            AccountManager.navigateTo({ pageComponentId: accountManagerPageComponentIdMap[item.key] });
            event.preventDefault();
            this.context.closeDialog();
        }
    };
    AccountMenuClickableItem.prototype.onItemClick = function (item, event) {
        this.handleAccountManagerNavigationIfNeeded(item, event);
        this.reportItemClicked(item);
    };
    AccountMenuClickableItem.prototype.render = function () {
        var _this = this;
        var _a = this.props, item = _a.item, biPageView = _a.biPageView;
        var link = NO_BACK_REDIRECT_NEEDED.includes(item.key) ? item.link : backRedirectLink(item.link);
        return (React.createElement("div", null,
            React.createElement(Button, { as: "a", size: "small", onClick: function (event) { return _this.onItemClick(item, event); }, href: addReferralInfo(link, biPageView, item.key), rel: item.key, target: REQUIRE_NEW_TAB.includes(item.key) ? '_blank' : undefined, dataHook: item.key, skin: "light" }, this.props.t("account_settings." + snakeCase(item.key) + ".label"))));
    };
    AccountMenuClickableItem.contextType = ReactDropdownDialogContext;
    return AccountMenuClickableItem;
}(React.Component));
var mapStateToProps = function (state) {
    var hideHireAnExpertLink = isNtt() || isCoBranded(state);
    return {
        biPageView: state.biPageView,
        metaSiteId: getCurrentSiteId(state),
        permissions: getUserPermissions(state),
        experiments: experimentsSelectors(state),
        showHireAnExpert: !hideHireAnExpertLink
    };
};
export default provideLogger(withTranslation()(connect(mapStateToProps)(AccountMenuClickableItem)));
//# sourceMappingURL=AccountMenuClickableItem.js.map