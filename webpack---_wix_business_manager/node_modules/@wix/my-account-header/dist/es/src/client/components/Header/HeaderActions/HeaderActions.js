import { __assign, __extends } from "tslib";
import * as React from 'react';
import * as scss from './HeaderActions.scss';
import { Position } from '../HeaderLayout/HeaderLayout';
import { ModuleRegistry } from 'react-module-container';
import { connect } from 'react-redux';
import { Seperator } from '../../Seperator/Seperator';
import { getCurrentSiteId, hasSearchPermission } from '../../../selectors/currentSiteSelectors';
import NotificationsWidgetLazyComponent from '../../Ping/NotificationsWidgetLazyComponent.container';
import { NewReleasesWidgetConnected } from '../../NewReleases/NewReleasesWidget';
import InboxHeaderWidgetLazyComponent from '../../Inbox/InboxHeaderWidgetLazyComponent.container';
import { ReactDropdownDialog } from '../../ReactDropdownDialog/ReactDropdownDialog';
import { Section, SectionItem } from '../HeaderLayout/HeaderLayout';
import { AccountMenuDropdown } from '../../AccountMenu/AccountMenuDropdown/AccountMenuDropdown';
import { ModuleId } from '@wix/business-manager-api';
import { experimentsSelectors } from '@wix/wix-experiments-redux';
import IconTooltip from '../../IconTooltip/IconTooltip';
import { withTranslation } from '@wix/wix-i18n-config';
import { HeaderViewMode } from '../../../constants/headerViewMode';
import SearchEverythingWidgetLazyComponent from '../../SearchEverything/SearchEverythingWidget';
var HeaderActions = /** @class */ (function (_super) {
    __extends(HeaderActions, _super);
    function HeaderActions() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.closeAllOpenDialogs = function () {
            ReactDropdownDialog.closeCurrentlyOpenDialogs();
        };
        return _this;
    }
    HeaderActions.prototype.render = function () {
        var _a = this.props, metaSiteId = _a.metaSiteId, shouldShowNewReleasesWidget = _a.shouldShowNewReleasesWidget, viewMode = _a.viewMode, currentPage = _a.currentPage, t = _a.t, showTooltip = _a.showTooltip, showSearch = _a.showSearch;
        var notificationProps = viewMode === HeaderViewMode.SITE ?
            { origin: metaSiteId, metaSiteId: metaSiteId, onOpen: this.closeAllOpenDialogs } :
            { origin: currentPage };
        return (React.createElement(Section, { position: Position.RIGHT },
            showSearch &&
                React.createElement("div", { className: scss.searchSectionWrapper },
                    React.createElement("div", { className: scss.searchInputWrapper },
                        React.createElement(SearchEverythingWidgetLazyComponent, null)),
                    React.createElement(Seperator, null)),
            React.createElement(SectionItem, null,
                showTooltip && React.createElement(IconTooltip, { content: t('inbox.tooltip') },
                    React.createElement(InboxHeaderWidgetLazyComponent, { view: viewMode })),
                !showTooltip && React.createElement(InboxHeaderWidgetLazyComponent, { view: viewMode })),
            React.createElement(SectionItem, null,
                showTooltip && React.createElement(IconTooltip, { content: t('notifications.tooltip') },
                    React.createElement(NotificationsWidgetLazyComponent, __assign({}, notificationProps))),
                !showTooltip && React.createElement(NotificationsWidgetLazyComponent, __assign({}, notificationProps))),
            shouldShowNewReleasesWidget && (React.createElement(SectionItem, null,
                React.createElement(NewReleasesWidgetConnected, null))),
            React.createElement(Seperator, null),
            React.createElement(AccountMenuDropdown, null)));
    };
    return HeaderActions;
}(React.Component));
var mapStateToProps = function (state, ownProps) {
    var viewMode = ownProps.viewMode;
    var showSearch = experimentsSelectors(state).enabled('specs.wos2.redesignSearchVersion1') &&
        viewMode === HeaderViewMode.SITE &&
        hasSearchPermission(state);
    return {
        metaSiteId: getCurrentSiteId(state),
        shouldShowNewReleasesWidget: viewMode === HeaderViewMode.SITE && !!ModuleRegistry.getModule(ModuleId.NewReleasesWidget),
        showTooltip: experimentsSelectors(state).enabled('specs.funnel.EnableNewReleasesWidget'),
        currentPage: state.currentPage,
        showSearch: showSearch
    };
};
export default withTranslation()(connect(mapStateToProps)(HeaderActions));
//# sourceMappingURL=HeaderActions.js.map