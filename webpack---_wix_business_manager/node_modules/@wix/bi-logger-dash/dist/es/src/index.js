var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
* @typedef {string} Url
*/
/**
* @typedef {string} GUID
*/
/**
* @typedef {number} DateTime
*/
var dummy;
var defaultConfig = { endpoint: 'dash' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 5 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'dash' });
    }
    ;
    /**
    * @typedef {Object} bizManagerClickOnBackInSidebarItemParams
    * @property {string} app_id - app_id of the item
    * @property {string} hosting - MA/editor
    * @property {string} legacy_name - deprecated
    * @property {GUID} msid - metasite id
    * @property {string} name - unique name that doesn't change when changing the name on the side bar
    * @property {string} platform - null
    * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
    **/
    /**
     * Name: Biz Manager - click on back in sidebar item. Evid: 570.
     * Event description: user clicks on back from the sidebar in the business manager.
    
     * app_id - Type: string. Desc: app_id of the item
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * legacy_name - Type: string. Desc: deprecated
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: unique name that doesn't change when changing the name on the side bar
     *
     * platform - Type: string.
     *
     * sidebar_name - Type: string. Desc: the name that appears in the sidebar - can be changed
     * @param {bizManagerClickOnBackInSidebarItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickOnBackInSidebarItem = function (params) {
        return this.bi.log(__assign({ evid: 570 }, params));
    };
    /**
    * @typedef {Object} accountSettingsManagePrivacyPreferencesParams
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Manage Privacy Preferences. Evid: 695.
     * Event description: The user clicks on 'manage preferences' in the 'privacy preferences' section.
    
     * platform - Type: string.
     * @param {accountSettingsManagePrivacyPreferencesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsManagePrivacyPreferences = function (params) {
        return this.bi.log(__assign({ evid: 695 }, params));
    };
    /**
    * @typedef {Object} quotesDownloadPdfQuoteParams
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my quote for users
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Download PDF Quote. Evid: 89.
     * Event description: click on save as PDF on quote.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my quote for users
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesDownloadPdfQuoteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDownloadPdfQuote = function (params) {
        return this.bi.log(__assign({ evid: 89 }, params));
    };
    /**
    * @typedef {Object} quotesEditProductOrServiceParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {number} product_id - product_id
    * @property {string} productName - product_name
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - edit Product or service. Evid: 468.
     * Event description: edit Product or service (line item).
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * product_id - Type: numeric. Desc: product_id
     *
     * productName - Type: string. Desc: product_name
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesEditProductOrServiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEditProductOrService = function (params) {
        return this.bi.log(__assign({ evid: 468 }, params));
    };
    /**
    * @typedef {Object} ascendPageAscendVideoClickParams
    * @property {number} loading_time - loading_time
    * @property {string} platform - null
    * @property {string} prev_view - prev_view
    * @property {string} referral_info - referral_info
    **/
    /**
     * Name: ascend page - ascend video click. Evid: 121.
     * Event description: when user clicked on the video.
    
     * loading_time - Type: numeric. Desc: loading_time
     *
     * platform - Type: string.
     *
     * prev_view - Type: string. Desc: prev_view
     *
     * referral_info - Type: string. Desc: referral_info
     * @param {ascendPageAscendVideoClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPageAscendVideoClick = function (params) {
        return this.bi.log(__assign({ evid: 121 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoClickOnSaveParams
    * @property {string} fold_name - list of fold names, separated by commas
    * @property {string} hosting - MA/editor
    * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
    * @property {GUID} msid - metasite id
    * @property {string} name - list of fields, separated by commas
    * @property {string} page_view - The page where the changes were made
    * @property {string} place - place of save button: header, footer
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - click on save. Evid: 552.
     * Event description: user saves changes in business info page.
    
     * fold_name - Type: string. Desc: list of fold names, separated by commas
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * location_details - Type: string. Desc: 0- first location (create), 1-second location (add), 2- third location (add),...
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: list of fields, separated by commas
     *
     * page_view - Type: string. Desc: The page where the changes were made
     *
     * place - Type: string. Desc: place of save button: header, footer
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoClickOnSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoClickOnSave = function (params) {
        return this.bi.log(__assign({ evid: 552 }, params));
    };
    /**
    * @typedef {Object} accountSettingsStep1ToDisablePartnerDashboardParams
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - step 1 to disable Partner Dashboard. Evid: 739.
     * Event description: In account setting, the user clicked to disable Partner Dashboard and will need to confirm again to disable it.
    
     * platform - Type: string.
     * @param {accountSettingsStep1ToDisablePartnerDashboardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsStep1ToDisablePartnerDashboard = function (params) {
        return this.bi.log(__assign({ evid: 739 }, params));
    };
    /**
    * @typedef {Object} quotesNewProductClickParams
    * @property {string} msid - msid
    * @property {string} origin - product page, create invoice, empty experience
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - New product click. Evid: 414.
     * Event description: new product.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: product page, create invoice, empty experience
     *
     * platform - Type: string.
     * @param {quotesNewProductClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNewProductClick = function (params) {
        return this.bi.log(__assign({ evid: 414 }, params));
    };
    /**
    * @typedef {Object} accountSettingsDisableSocialAccountClickDisableInConfirmationModalParams
    * @property {string} platform - null
    * @property {string} provider_id - the social provider the user tried to disable (apple/google/facebook)
    **/
    /**
     * Name: Account Settings -  Disable Social Account - Click Disable in Confirmation Modal. Evid: 1120.
     * Event description: The user clicked on "disable" in the confirmation message shown once trying to disable Apple social account.
    
     * platform - Type: string.
     *
     * provider_id - Type: string. Desc: the social provider the user tried to disable (apple/google/facebook)
     * @param {accountSettingsDisableSocialAccountClickDisableInConfirmationModalParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsDisableSocialAccountClickDisableInConfirmationModal = function (params) {
        return this.bi.log(__assign({ evid: 1120 }, params));
    };
    /**
    * @typedef {Object} teamManagementEditRoleOpenDialogParams
    * @property {string} invite_status - pending/expired
    * @property {GUID} member_id - the uuid of the member which we edit the role for
    * @property {string} origin - where the dialog is opened from
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    **/
    /**
     * Name: Team Management - edit role - open dialog. Evid: 183.
     * Event description: When the user clicks on edit role.
    
     * invite_status - Type: string. Desc: pending/expired
     *
     * member_id - Type: guid. Desc: the uuid of the member which we edit the role for
     *
     * origin - Type: string. Desc: where the dialog is opened from
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     * @param {teamManagementEditRoleOpenDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementEditRoleOpenDialog = function (params) {
        return this.bi.log(__assign({ evid: 183 }, params));
    };
    /**
    * @typedef {Object} crmHomeIntegrationsCommunicationsConnectParams
    * @property {string} connectTab - which connection the user choose
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - integrations - communications connect. Evid: 855.
     * Event description: CRM Home - integrations - communications connect.
    
     * connectTab - Type: string. Desc: which connection the user choose
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeIntegrationsCommunicationsConnectParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeIntegrationsCommunicationsConnect = function (params) {
        return this.bi.log(__assign({ evid: 855 }, params));
    };
    /**
    * @typedef {Object} dashboardTourCloseTourParams
    * @property {string} experiment_name - null
    * @property {GUID} msid - null
    * @property {string} stage_process - null
    * @property {number} stage_number - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard tour > close tour. Evid: 31.
    
    
     * experiment_name - Type: string.
     *
     * msid - Type: guid.
     *
     * stage_process - Type: string.
     *
     * stage_number - Type: numeric.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTourCloseTourParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTourCloseTour = function (params) {
        return this.bi.log(__assign({ evid: 31 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetReportsTimePickerParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} time_frame - time picker
    **/
    /**
     * Name: Invoices - widget - reports - time picker. Evid: 1328.
     * Event description: Invoices - widget - see all invoices.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * time_frame - Type: string. Desc: time picker
     * @param {invoicesWidgetReportsTimePickerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetReportsTimePicker = function (params) {
        return this.bi.log(__assign({ evid: 1328 }, params));
    };
    /**
    * @typedef {Object} quotesResendFromPreviewPageParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Resend from preview page. Evid: 450.
     * Event description: Quotes - Resend from preview page.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesResendFromPreviewPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesResendFromPreviewPage = function (params) {
        return this.bi.log(__assign({ evid: 450 }, params));
    };
    /**
    * @typedef {Object} dashboardContributorsClickOnMangeRolesAndPermissionsParams
    * @property {string} hosting - MA
    * @property {GUID} msid - --
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > contributors > click on mange roles and permissions. Evid: 187.
     * Event description: When a user clicks on 'manage roles and permissions' from contributors pic.
    
     * hosting - Type: string. Desc: MA
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     * @param {dashboardContributorsClickOnMangeRolesAndPermissionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardContributorsClickOnMangeRolesAndPermissions = function (params) {
        return this.bi.log(__assign({ evid: 187 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersEditTriggerClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Edit Trigger Click. Evid: 213.
     * Event description: Edit Trigger Click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric.
     * @param {dashboardTriggersEditTriggerClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersEditTriggerClick = function (params) {
        return this.bi.log(__assign({ evid: 213 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersStep2ActionSelectedParams
    * @property {string} event_name - name of event (action)
    * @property {string} flowType - flow in which the save happens: {create, edit}
    * @property {number} index - number of action
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > step 2 > action selected. Evid: 224.
     * Event description: selecting an action for trigger.
    
     * event_name - Type: string. Desc: name of event (action)
     *
     * flowType - Type: string. Desc: flow in which the save happens: {create, edit}
     *
     * index - Type: numeric. Desc: number of action
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {dashboardTriggersStep2ActionSelectedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersStep2ActionSelected = function (params) {
        return this.bi.log(__assign({ evid: 224 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentCreateYourOwn287Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} invoiceSource - by app_def_id
    * @property {string} msid - msid
    * @property {string} paymentType - 'recurring','one time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Invoice paid - Thank you page shown. Evid: 287.
     * Event description: Quotes - Invoice paid - Thank you page shown.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * invoiceSource - Type: string. Desc: by app_def_id
     *
     * msid - Type: string. Desc: msid
     *
     * paymentType - Type: string. Desc: 'recurring','one time'
     *
     * platform - Type: string.
     * @param {automationsDaComponentCreateYourOwn287Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentCreateYourOwn287 = function (params) {
        return this.bi.log(__assign({ evid: 287 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersInactivateActivateTriggerParams
    * @property {string} status - status
    * @property {boolean} isPreinstalled - if the automation was pre installed
    * @property {GUID} msid - msid
    * @property {string} origin - origin which this action was made
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Inactivate /Activate trigger. Evid: 211.
     * Event description: Inactivate /Activate trigger.
    
     * status - Type: string. Desc: status
     *
     * isPreinstalled - Type: bool. Desc: if the automation was pre installed
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin which this action was made
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric.
     * @param {dashboardTriggersInactivateActivateTriggerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersInactivateActivateTrigger = function (params) {
        return this.bi.log(__assign({ evid: 211 }, params));
    };
    /**
    * @typedef {Object} quotesSortInvoicesParams
    * @property {string} msid - msid
    * @property {string} name - name of field sorted by
    * @property {number} num_of_invoices - number of invoices the user has
    * @property {string} order - desc/asc
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Sort invoices. Evid: 446.
     * Event description: user clicks on a column to sort by it.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of field sorted by
     *
     * num_of_invoices - Type: numeric. Desc: number of invoices the user has
     *
     * order - Type: string. Desc: desc/asc
     *
     * platform - Type: string.
     * @param {quotesSortInvoicesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSortInvoices = function (params) {
        return this.bi.log(__assign({ evid: 446 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentShowPage290Params
    * @property {GUID} msid - msid
    * @property {string} origin - button, link, header, success creation dialog
    * @property {string} platform - null
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    **/
    /**
     * Name: Automations > DaComponent > show page. Evid: 290.
     * Event description: Automations > DaComponent > show page.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: button, link, header, success creation dialog
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     * @param {automationsDaComponentShowPage290Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentShowPage290 = function (params) {
        return this.bi.log(__assign({ evid: 290 }, params));
    };
    /**
    * @typedef {Object} teamManagementDeleteTeamMemberDeleteClickParams
    * @property {string} invite_status - pending/expired/leave team
    * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
    * @property {string} origin - where the dialog was opened from
    * @property {string} platform - null
    * @property {string} role - the deleted user’s role
    **/
    /**
     * Name: Team Management - delete team member - delete click. Evid: 179.
     * Event description: When a user clicks on 'delete' in the delete team member window.
    
     * invite_status - Type: string. Desc: pending/expired/leave team
     *
     * member_id - Type: guid. Desc: the uuid of the deleted member (if status is pending then invite_id)
     *
     * origin - Type: string. Desc: where the dialog was opened from
     *
     * platform - Type: string.
     *
     * role - Type: string. Desc: the deleted user’s role
     * @param {teamManagementDeleteTeamMemberDeleteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementDeleteTeamMemberDeleteClick = function (params) {
        return this.bi.log(__assign({ evid: 179 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetCreateNewParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - Create New. Evid: 1324.
     * Event description: Invoices - widget - Create New.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetCreateNewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetCreateNew = function (params) {
        return this.bi.log(__assign({ evid: 1324 }, params));
    };
    /**
    * @typedef {Object} ascendPpPurchasePageViewParams
    * @property {GUID} app_id - app_id
    * @property {number} cycleId - cycle id
    * @property {string} cycle_name - cycle name
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - package id
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    **/
    /**
     * Name: Ascend PP - Purchase Page view. Evid: 138.
     * Event description: User view Payment page.
    
     * app_id - Type: guid. Desc: app_id
     *
     * cycleId - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: cycle name
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: package id
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     * @param {ascendPpPurchasePageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpPurchasePageView = function (params) {
        return this.bi.log(__assign({ evid: 138 }, params));
    };
    /**
    * @typedef {Object} homeMultipleSitesCheckParams
    * @property {boolean} has_two_sites - deprecated
    * @property {GUID} msid - deorecated
    * @property {number} num_displayed_sites - num sites that are displayed on page
    * @property {string} origin - dashboard / my-sites
    * @property {string} platform - null
    * @property {string} prev_view - search/dashboard/wix.com
    **/
    /**
     * Name: Home > multiple sites check. Evid: 305.
     * Event description: checked if a user has one site or more (including sites that he is a contributor.).
    
     * has_two_sites - Type: bool. Desc: deprecated
     *
     * msid - Type: guid. Desc: deorecated
     *
     * num_displayed_sites - Type: numeric. Desc: num sites that are displayed on page
     *
     * origin - Type: string. Desc: dashboard / my-sites
     *
     * platform - Type: string.
     *
     * prev_view - Type: string. Desc: search/dashboard/wix.com
     * @param {homeMultipleSitesCheckParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeMultipleSitesCheck = function (params) {
        return this.bi.log(__assign({ evid: 305 }, params));
    };
    /**
    * @typedef {Object} bizManagerStartLoadingParams
    * @property {string} app_id - --
    * @property {string} app_ids - all applications installed om Biz Mgr
    * @property {string} hosting - from where the user opened Biz manager
    * @property {boolean} initial_load - first load
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - start loading. Evid: 561.
     * Event description: user click to open Biz manager.
    
     * app_id - Type: string. Desc: --
     *
     * app_ids - Type: string. Desc: all applications installed om Biz Mgr
     *
     * hosting - Type: string. Desc: from where the user opened Biz manager
     *
     * initial_load - Type: bool. Desc: first load
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerStartLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerStartLoading = function (params) {
        return this.bi.log(__assign({ evid: 561 }, params));
    };
    /**
    * @typedef {Object} quotesPayInvoiceClick478Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my invoices for users
    * @property {string} paymentType - 'Recurring','One Time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Pay Invoice Click. Evid: 478.
     * Event description: Quotes - Pay Invoice Click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my invoices for users
     *
     * paymentType - Type: string. Desc: 'Recurring','One Time'
     *
     * platform - Type: string.
     * @param {quotesPayInvoiceClick478Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPayInvoiceClick478 = function (params) {
        return this.bi.log(__assign({ evid: 478 }, params));
    };
    /**
    * @typedef {Object} automationsClickOnViewAllInRecommendedAutomationsSectionParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} section_name - Boost Your Store Sales / Stay in Touch With Clients / ...
    **/
    /**
     * Name: Automations > click on view all in recommended automations section. Evid: 142.
     * Event description: click on view all in recommended automations section.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * section_name - Type: string. Desc: Boost Your Store Sales / Stay in Touch With Clients / ...
     * @param {automationsClickOnViewAllInRecommendedAutomationsSectionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClickOnViewAllInRecommendedAutomationsSection = function (params) {
        return this.bi.log(__assign({ evid: 142 }, params));
    };
    /**
    * @typedef {Object} automationsClickOnDuplicateAutomationParams
    * @property {GUID} msid - msid
    * @property {string} origin - 'home' / 'my automations page'
    * @property {string} platform - null
    * @property {GUID} prev_rule_id - previous rule id
    * @property {string} recipeName - recipeName
    * @property {GUID} rule_id - rule_id
    * @property {string} rule_name - rule_name
    **/
    /**
     * Name: Automations > click on duplicate automation. Evid: 109.
     * Event description: user click on duplicate automation.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: 'home' / 'my automations page'
     *
     * platform - Type: string.
     *
     * prev_rule_id - Type: guid. Desc: previous rule id
     *
     * recipeName - Type: string. Desc: recipeName
     *
     * rule_id - Type: guid. Desc: rule_id
     *
     * rule_name - Type: string. Desc: rule_name
     * @param {automationsClickOnDuplicateAutomationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClickOnDuplicateAutomation = function (params) {
        return this.bi.log(__assign({ evid: 109 }, params));
    };
    /**
    * @typedef {Object} automationsBrokenRulesParams
    * @property {string} action - actions
    * @property {string} additionalInfo - info off the error
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - the rule_id that the user started/edited
    * @property {string} ruleType - is it preinstalled or not
    * @property {string} trigger - trigger
    * @property {boolean} withTriggersCatalog - is with triggers catalog
    **/
    /**
     * Name: Automations > Broken rules. Evid: 1275.
     * Event description: Automations > Broken rules.
    
     * action - Type: string. Desc: actions
     *
     * additionalInfo - Type: string. Desc: info off the error
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: the rule_id that the user started/edited
     *
     * ruleType - Type: string. Desc: is it preinstalled or not
     *
     * trigger - Type: string. Desc: trigger
     *
     * withTriggersCatalog - Type: bool. Desc: is with triggers catalog
     * @param {automationsBrokenRulesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBrokenRules = function (params) {
        return this.bi.log(__assign({ evid: 1275 }, params));
    };
    /**
    * @typedef {Object} automationsPriceQuotesInvoicesSubmitFeedbackFormParams
    * @property {GUID} msid - msid
    * @property {string} origin - {automations, price quotes, invoices}
    * @property {string} platform - null
    **/
    /**
     * Name: Automations/ Price Quotes/ Invoices > Submit Feedback Form. Evid: 233.
     * Event description: user click Submit Feedback Form.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {automations, price quotes, invoices}
     *
     * platform - Type: string.
     * @param {automationsPriceQuotesInvoicesSubmitFeedbackFormParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsPriceQuotesInvoicesSubmitFeedbackForm = function (params) {
        return this.bi.log(__assign({ evid: 233 }, params));
    };
    /**
    * @typedef {Object} apesLoadSystemNotificationsModalEndParams
    * @property {boolean} edited - is it second time that the modal is opened (after edit mode)
    * @property {boolean} isPreinstalled - if the automation is pre installed
    * @property {number} loadTime - how much time it took to load the modal
    * @property {GUID} msid - msid
    * @property {string} origin - app id
    * @property {string} platform - null
    **/
    /**
     * Name: APeS - load system notifications modal - end. Evid: 1277.
     * Event description: APeS - load system notifications modal - start.
    
     * edited - Type: bool. Desc: is it second time that the modal is opened (after edit mode)
     *
     * isPreinstalled - Type: bool. Desc: if the automation is pre installed
     *
     * loadTime - Type: numeric. Desc: how much time it took to load the modal
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: app id
     *
     * platform - Type: string.
     * @param {apesLoadSystemNotificationsModalEndParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesLoadSystemNotificationsModalEnd = function (params) {
        return this.bi.log(__assign({ evid: 1277 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceDeleteLineParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - create invoice, edit invoice
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Create invoice - Delete line. Evid: 413.
     * Event description: Create invoice - delete line.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create invoice, edit invoice
     *
     * platform - Type: string.
     * @param {quotesCreateInvoiceDeleteLineParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceDeleteLine = function (params) {
        return this.bi.log(__assign({ evid: 413 }, params));
    };
    /**
    * @typedef {Object} quotesSelectTaxParams
    * @property {string} contact_id - contact_id
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {number} product_id - product_id
    * @property {number} taxRate - taxRate
    * @property {string} tax_name - tax_name
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes -Select Tax. Evid: 469.
     * Event description: Quotes - edit Product.
    
     * contact_id - Type: string. Desc: contact_id
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * product_id - Type: numeric. Desc: product_id
     *
     * taxRate - Type: numeric. Desc: taxRate
     *
     * tax_name - Type: string. Desc: tax_name
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesSelectTaxParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSelectTax = function (params) {
        return this.bi.log(__assign({ evid: 469 }, params));
    };
    /**
    * @typedef {Object} bizManagerModuleLoadingFinishParams
    * @property {GUID} app_id - application id
    * @property {string} hosting - MA/editor
    * @property {boolean} initial_load - first load
    * @property {number} loading_time - loading time from module loading start
    * @property {string} module_id - requested module
    * @property {GUID} msid - metasite id
    * @property {string} origin - specific button triggered the the view loading (== referral info from editor)
    * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
    * @property {string} platform - null
    * @property {string} referral_info - specific button triggered the the view loading
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: Biz Manager - module loading - finish. Evid: 565.
     * Event description: module that is loaded in the biz manager (like Stores, Shoutout, etc.).
    
     * app_id - Type: guid. Desc: application id
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * initial_load - Type: bool. Desc: first load
     *
     * loading_time - Type: numeric. Desc: loading time from module loading start
     *
     * module_id - Type: string. Desc: requested module
     *
     * msid - Type: guid. Desc: metasite id
     *
     * origin - Type: string. Desc: specific button triggered the the view loading (== referral info from editor)
     *
     * origin_app_id - Type: string. Desc: origin_app_id (what app opened the bizmgr)
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: specific button triggered the the view loading
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {bizManagerModuleLoadingFinishParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerModuleLoadingFinish = function (params) {
        return this.bi.log(__assign({ evid: 565 }, params));
    };
    /**
    * @typedef {Object} dashboardDeleteAndRestoreSiteOpenPopupParams
    * @property {GUID} msid - -
    * @property {string} name - deprecated
    * @property {string} platform - null
    * @property {string} popup_name - popup_name
    **/
    /**
     * Name: dashboard > delete and restore site -> Open Popup. Evid: 100.
     * Event description: user clicks on Move to Trash/Restore/Remove from Trash  button from popup window.
    
     * msid - Type: guid. Desc: -
     *
     * name - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * popup_name - Type: string. Desc: popup_name
     * @param {dashboardDeleteAndRestoreSiteOpenPopupParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardDeleteAndRestoreSiteOpenPopup = function (params) {
        return this.bi.log(__assign({ evid: 100 }, params));
    };
    /**
    * @typedef {Object} automationsEducationRawParams
    * @property {GUID} msid - msid
    * @property {string} option - which education the user choosed (video-tutorial/drip-campaign/zapier)
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - Education row. Evid: 1332.
     * Event description: Automations - stores choose specific product click.
    
     * msid - Type: guid. Desc: msid
     *
     * option - Type: string. Desc: which education the user choosed (video-tutorial/drip-campaign/zapier)
     *
     * platform - Type: string.
     * @param {automationsEducationRawParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsEducationRaw = function (params) {
        return this.bi.log(__assign({ evid: 1332 }, params));
    };
    /**
    * @typedef {Object} notificationsClickOnAChannelSettingsParams
    * @property {string} channel - channel section the user clicked on
    * @property {string} click_name - collapse/expand
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > Click on Channel settings. Evid: 379.
     * Event description: On the Notification Setting page,  "Set Notifications by Channel" section, click on collapse/expand..
    
     * channel - Type: string. Desc: channel section the user clicked on
     *
     * click_name - Type: string. Desc: collapse/expand
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {notificationsClickOnAChannelSettingsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsClickOnAChannelSettings = function (params) {
        return this.bi.log(__assign({ evid: 379 }, params));
    };
    /**
    * @typedef {Object} rolesEditRoleClickParams
    * @property {string} hosting - MA/Editor
    * @property {boolean} is_accepted - true if invite was accepted
    * @property {boolean} is_blog_shown - true if shown (blog manager appears only for sites with blog)
    * @property {boolean} is_events_shown - is_events_shown
    * @property {GUID} msid - msid
    * @property {string} origin - origin page
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    **/
    /**
     * Name: Roles - edit role - open dialog. Evid: 366.
     * Event description: click on edit role.
    
     * hosting - Type: string. Desc: MA/Editor
     *
     * is_accepted - Type: bool. Desc: true if invite was accepted
     *
     * is_blog_shown - Type: bool. Desc: true if shown (blog manager appears only for sites with blog)
     *
     * is_events_shown - Type: bool. Desc: is_events_shown
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     * @param {rolesEditRoleClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesEditRoleClick = function (params) {
        return this.bi.log(__assign({ evid: 366 }, params));
    };
    /**
    * @typedef {Object} teamManagementSaveParams
    * @property {boolean} is_logo_shown - true/false
    * @property {boolean} is_valid_team_name - true/false (false if error shows)
    * @property {string} platform - null
    **/
    /**
     * Name: Team management > save. Evid: 173.
     * Event description: User clicks to save his edit team dialog.
    
     * is_logo_shown - Type: bool. Desc: true/false
     *
     * is_valid_team_name - Type: bool. Desc: true/false (false if error shows)
     *
     * platform - Type: string.
     * @param {teamManagementSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementSave = function (params) {
        return this.bi.log(__assign({ evid: 173 }, params));
    };
    /**
    * @typedef {Object} bizManagerNewBadgeShowParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} name - unique name that doesn't change when changing the name on the side bar
    * @property {string} platform - null
    * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
    **/
    /**
     * Name: Biz Manager - 'new' badge show. Evid: 673.
     * Event description: 'new' badge show on the sidebar.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: unique name that doesn't change when changing the name on the side bar
     *
     * platform - Type: string.
     *
     * sidebar_name - Type: string. Desc: the name that appears in the sidebar - can be changed
     * @param {bizManagerNewBadgeShowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerNewBadgeShow = function (params) {
        return this.bi.log(__assign({ evid: 673 }, params));
    };
    /**
    * @typedef {Object} quotesEmailInvoicePageCancelClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {boolean} resend - resend mode?
    **/
    /**
     * Name: Quotes - Email invoice page - Cancel click. Evid: 405.
     * Event description: email invoice - clicked on cancel.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * resend - Type: bool. Desc: resend mode?
     * @param {quotesEmailInvoicePageCancelClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEmailInvoicePageCancelClick = function (params) {
        return this.bi.log(__assign({ evid: 405 }, params));
    };
    /**
    * @typedef {Object} bizManagerViewStartLoadingParams
    * @property {string} app_ids - app_ids
    * @property {GUID} app_instance_id - --
    * @property {string} hosting - ADI/MA/editor
    * @property {boolean} initial_load - True if first load
    * @property {GUID} msid - --
    * @property {string} platform - null
    * @property {string} prev_sub_view - previous page in app/module
    * @property {string} prev_view - origin view / module / app
    * @property {string} referral_info - specific button triggered the the view loading
    * @property {string} sub_view - page in app/module
    * @property {string} view - requested view/ module/ app
    **/
    /**
     * Name: Biz Manager  > View start loading. Evid: 581.
     * Event description: View/Sub View Start loading.
    
     * app_ids - Type: string. Desc: app_ids
     *
     * app_instance_id - Type: guid. Desc: --
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * initial_load - Type: bool. Desc: True if first load
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     *
     * prev_sub_view - Type: string. Desc: previous page in app/module
     *
     * prev_view - Type: string. Desc: origin view / module / app
     *
     * referral_info - Type: string. Desc: specific button triggered the the view loading
     *
     * sub_view - Type: string. Desc: page in app/module
     *
     * view - Type: string. Desc: requested view/ module/ app
     * @param {bizManagerViewStartLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerViewStartLoading = function (params) {
        return this.bi.log(__assign({ evid: 581 }, params));
    };
    /**
    * @typedef {Object} tooltipNotificationPopsUpParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - Tooltip notification pops up. Evid: 337.
     * Event description: Tooltip pops up. It happens only once when the site gets his first  "new release" notification..
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {tooltipNotificationPopsUpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.tooltipNotificationPopsUp = function (params) {
        return this.bi.log(__assign({ evid: 337 }, params));
    };
    /**
    * @typedef {Object} settingsOverviewPageClickOnItemParams
    * @property {string} click_name - deprecated
    * @property {string} fold_name - card name
    * @property {string} hosting - MA/editor/ADI
    * @property {string} item_name - the name of the item
    * @property {GUID} msid - --
    * @property {string} page_view - The page of the click (website settings/business info/language and region)
    * @property {string} platform - null
    * @property {string} status_text - deprecated
    **/
    /**
     * Name: Settings  > click on item. Evid: 345.
     * Event description: when a user clicks on item in one of the OS Settings page.
    
     * click_name - Type: string. Desc: deprecated
     *
     * fold_name - Type: string. Desc: card name
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * item_name - Type: string. Desc: the name of the item
     *
     * msid - Type: guid. Desc: --
     *
     * page_view - Type: string. Desc: The page of the click (website settings/business info/language and region)
     *
     * platform - Type: string.
     *
     * status_text - Type: string. Desc: deprecated
     * @param {settingsOverviewPageClickOnItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.settingsOverviewPageClickOnItem = function (params) {
        return this.bi.log(__assign({ evid: 345 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentExploreMoreClick289Params
    * @property {string} exposure_name - exposure_name
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {number} value_from_dealer - The value we get from the Dealer
    * @property {number} value_from_was - The value we get from the WAS
    **/
    /**
     * Name: General - Exposure Analytics from Dealer. Evid: 289.
     * Event description: General - Exposure Analytics from Dealer.
    
     * exposure_name - Type: string. Desc: exposure_name
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * value_from_dealer - Type: numeric. Desc: The value we get from the Dealer
     *
     * value_from_was - Type: numeric. Desc: The value we get from the WAS
     * @param {automationsDaComponentExploreMoreClick289Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentExploreMoreClick289 = function (params) {
        return this.bi.log(__assign({ evid: 289 }, params));
    };
    /**
    * @typedef {Object} quotesPrintFromPreviewPageParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Print from preview page. Evid: 481.
     * Event description: Quotes - Resend from preview page.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesPrintFromPreviewPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPrintFromPreviewPage = function (params) {
        return this.bi.log(__assign({ evid: 481 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentShowPage285Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my invoices for users
    * @property {string} paymentType - 'Recurring','One Time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Invoice Table  - Download PDF. Evid: 285.
     * Event description: Quotes - Invoice Table  - Download PDF.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my invoices for users
     *
     * paymentType - Type: string. Desc: 'Recurring','One Time'
     *
     * platform - Type: string.
     * @param {automationsDaComponentShowPage285Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentShowPage285 = function (params) {
        return this.bi.log(__assign({ evid: 285 }, params));
    };
    /**
    * @typedef {Object} automationsShowStatisticsClickParams
    * @property {GUID} msid - msid
    * @property {string} origin - (e.g: 'Forms') from where this action was called
    * @property {string} platform - null
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {string} ruleName - ruleName
    **/
    /**
     * Name: Automations > Show Statistics Click. Evid: 247.
     * Event description: Automations > Show Statistics Click.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: (e.g: 'Forms') from where this action was called
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * ruleName - Type: string. Desc: ruleName
     * @param {automationsShowStatisticsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsShowStatisticsClick = function (params) {
        return this.bi.log(__assign({ evid: 247 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsChangeValueSuccessParams
    * @property {string} create_method - save(pop-up),create new
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - field's value
    **/
    /**
     * Name: dashboard > site settings > change value success. Evid: 313.
     * Event description: user changed a value in the site settings successfully.
    
     * create_method - Type: string. Desc: save(pop-up),create new
     *
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: field's value
     * @param {dashboardSiteSettingsChangeValueSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsChangeValueSuccess = function (params) {
        return this.bi.log(__assign({ evid: 313 }, params));
    };
    /**
    * @typedef {Object} rolesDeleteRoleCloseWindowParams
    * @property {string} accept_email - accepted email
    * @property {string} hosting - MA /Editor
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - delete role - close window. Evid: 361.
     * Event description: user closed delete role window.
    
     * accept_email - Type: string. Desc: accepted email
     *
     * hosting - Type: string. Desc: MA /Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesDeleteRoleCloseWindowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesDeleteRoleCloseWindow = function (params) {
        return this.bi.log(__assign({ evid: 361 }, params));
    };
    /**
    * @typedef {Object} phoneVerificationCodeValidationParams
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    * @property {string} validstatus - good, expired, wrong, error
    **/
    /**
     * Name: Phone Verification - Confirmation Ended. Evid: 666.
     * Event description: validates the code entered.
    
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     *
     * validstatus - Type: string. Desc: good, expired, wrong, error
     * @param {phoneVerificationCodeValidationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.phoneVerificationCodeValidation = function (params) {
        return this.bi.log(__assign({ evid: 666 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsOverviewUnpublishPopupCancelParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site settings > overview > unpublish popup cancel. Evid: 327.
     * Event description: close Pop-up window either with 'cancel' option or 'X' ..
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     * @param {dashboardSiteSettingsOverviewUnpublishPopupCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsOverviewUnpublishPopupCancel = function (params) {
        return this.bi.log(__assign({ evid: 327 }, params));
    };
    /**
    * @typedef {Object} accountSettingsTwoFactorAuthenticationSetupSendCodeFailedParams
    * @property {string} action - send/resend
    * @property {string} mode - enable/edit
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Two Factor Authentication Setup - Send Code Failed. Evid: 697.
     * Event description: The code was not sent to the user's phone after he clicked on send code.
    
     * action - Type: string. Desc: send/resend
     *
     * mode - Type: string. Desc: enable/edit
     *
     * platform - Type: string.
     * @param {accountSettingsTwoFactorAuthenticationSetupSendCodeFailedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsTwoFactorAuthenticationSetupSendCodeFailed = function (params) {
        return this.bi.log(__assign({ evid: 697 }, params));
    };
    /**
    * @typedef {Object} dashboardDeleteAndRestoreSiteRestoreSiteClickParams
    * @property {GUID} msid - -
    * @property {string} origin - button name
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > delete and restore site -> restore site click. Evid: 101.
     * Event description: user clicks on Move to Trash/Restore/Remove from Trash  button from popup window.
    
     * msid - Type: guid. Desc: -
     *
     * origin - Type: string. Desc: button name
     *
     * platform - Type: string.
     * @param {dashboardDeleteAndRestoreSiteRestoreSiteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardDeleteAndRestoreSiteRestoreSiteClick = function (params) {
        return this.bi.log(__assign({ evid: 101 }, params));
    };
    /**
    * @typedef {Object} bizManagerOpenPanelStartParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - msid
    * @property {string} panel_name - the panel that was opened
    * @property {string} platform - null
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Biz Manager > Open panel start. Evid: 598.
     * Event description: panel is starting to load.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: msid
     *
     * panel_name - Type: string. Desc: the panel that was opened
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {bizManagerOpenPanelStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerOpenPanelStart = function (params) {
        return this.bi.log(__assign({ evid: 598 }, params));
    };
    /**
    * @typedef {Object} automationsRenameTriggerClick249Params
    * @property {GUID} msid - msid
    * @property {string} origin - (e.g: 'Forms') from where this action was called
    * @property {string} platform - null
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > Rename Trigger Click. Evid: 249.
     * Event description: Rename Trigger Click.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: (e.g: 'Forms') from where this action was called
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {automationsRenameTriggerClick249Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsRenameTriggerClick249 = function (params) {
        return this.bi.log(__assign({ evid: 249 }, params));
    };
    /**
    * @typedef {Object} automationsDialogShowClickParams
    * @property {string} action - name of action: {show, approve, cancel ; create new, all automations}
    * @property {string} flowType - flow in which the dialog is shown: {create, edit}
    * @property {GUID} msid - msid
    * @property {string} name - name of dialog: {leave, creation success}
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - the rule_id that the user started/edited
    **/
    /**
     * Name: Automations > Dialog show/click. Evid: 226.
     * Event description: showing/clicking a dialog under Automations.
    
     * action - Type: string. Desc: name of action: {show, approve, cancel ; create new, all automations}
     *
     * flowType - Type: string. Desc: flow in which the dialog is shown: {create, edit}
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of dialog: {leave, creation success}
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: the rule_id that the user started/edited
     * @param {automationsDialogShowClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDialogShowClick = function (params) {
        return this.bi.log(__assign({ evid: 226 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsPriceQuotesEditNumberingParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - Price Quotes - edit numbering. Evid: 1312.
     * Event description: Financial Services Settings - Price Quotes - edit numbering.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsPriceQuotesEditNumberingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsPriceQuotesEditNumbering = function (params) {
        return this.bi.log(__assign({ evid: 1312 }, params));
    };
    /**
    * @typedef {Object} rolesAcceptInviteFromMobilePageViewParams
    * @property {string} invite_id - invite_id
    * @property {string} inviteToken - token
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Roles - accept invite from mobile page view. Evid: 365.
     * Event description: user accepted invite from mobile page view.
    
     * invite_id - Type: string. Desc: invite_id
     *
     * inviteToken - Type: string. Desc: token
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {rolesAcceptInviteFromMobilePageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAcceptInviteFromMobilePageView = function (params) {
        return this.bi.log(__assign({ evid: 365 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteNavigationParams
    * @property {string} link - null
    * @property {GUID} msid - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site -> navigation. Evid: 15.
    
    
     * link - Type: string.
     *
     * msid - Type: guid.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardSiteNavigationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteNavigation = function (params) {
        return this.bi.log(__assign({ evid: 15 }, params));
    };
    /**
    * @typedef {Object} quotesDueDateUpdatingParams
    * @property {DateTime} due_date - due_date
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Due Date Updating. Evid: 463.
     * Event description: Invoice Due Date Updating.
    
     * due_date - Type: datetime. Desc: due_date
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesDueDateUpdatingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDueDateUpdating = function (params) {
        return this.bi.log(__assign({ evid: 463 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteActivityCenterClickOnArchiveItemParams
    * @property {string} action_desc - null
    * @property {string} action_url - null
    * @property {number} expire - null
    * @property {GUID} feed_id - null
    * @property {boolean} is_archived - null
    * @property {boolean} is_deleted - null
    * @property {GUID} item_id - null
    * @property {number} items_count - null
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {string} referral - null
    * @property {string} source - null
    * @property {number} src - null
    * @property {string} type - null
    **/
    /**
     * Name: dashboard > site -> activity center -> click on archive item. Evid: 104.
    
    
     * action_desc - Type: string.
     *
     * action_url - Type: string.
     *
     * expire - Type: numeric.
     *
     * feed_id - Type: guid.
     *
     * is_archived - Type: bool.
     *
     * is_deleted - Type: bool.
     *
     * item_id - Type: guid.
     *
     * items_count - Type: numeric.
     *
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * referral - Type: string.
     *
     * source - Type: string.
     *
     * src - Type: numeric.
     *
     * type - Type: string.
     * @param {dashboardSiteActivityCenterClickOnArchiveItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteActivityCenterClickOnArchiveItem = function (params) {
        return this.bi.log(__assign({ evid: 104 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersReachStepSaveAndActivatesParams
    * @property {string} flowType - flow in which the save happens: {create, edit}
    * @property {number} index - index for drip campaign
    * @property {boolean} is_auto - window opens automatically/manually
    * @property {GUID} msid - msid
    * @property {string} origin - deprecated
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - deprecated
    **/
    /**
     * Name: Automations > Reach step choose a time. Evid: 208.
     * Event description: open/close choose a time.
    
     * flowType - Type: string. Desc: flow in which the save happens: {create, edit}
     *
     * index - Type: numeric. Desc: index for drip campaign
     *
     * is_auto - Type: bool. Desc: window opens automatically/manually
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric. Desc: deprecated
     * @param {dashboardTriggersReachStepSaveAndActivatesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersReachStepSaveAndActivates = function (params) {
        return this.bi.log(__assign({ evid: 208 }, params));
    };
    /**
    * @typedef {Object} dashboardHoverContributorsPicParams
    * @property {string} hosting - MA
    * @property {GUID} msid - --
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > Hover contributors pic. Evid: 186.
     * Event description: When a user hovers on contributor pic in dashboard.
    
     * hosting - Type: string. Desc: MA
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     * @param {dashboardHoverContributorsPicParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardHoverContributorsPic = function (params) {
        return this.bi.log(__assign({ evid: 186 }, params));
    };
    /**
    * @typedef {Object} crmHomeInboxViewMessagesParams
    * @property {number} countMessages - count_messages
    * @property {GUID} msid - null
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - inbox - view messages. Evid: 1383.
     * Event description: CRM Home - inbox - view messages.
    
     * countMessages - Type: numeric. Desc: count_messages
     *
     * msid - Type: guid.
     *
     * platform - Type: string.
     * @param {crmHomeInboxViewMessagesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeInboxViewMessages = function (params) {
        return this.bi.log(__assign({ evid: 1383 }, params));
    };
    /**
    * @typedef {Object} notificationsEnableToTurnOnOffNotificationsPerChannelParams
    * @property {string} channel - desktop/email/ sms/ mobile
    * @property {string} group - desktop/ contact form/  subscriber/  becomes a member/requests to be a member
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {string} section - desktop/general/ wix chat/bookings/...
    * @property {boolean} toggle - 1 - on , 0- off
    **/
    /**
     * Name: Notifications > Enable to turn on/off notifications per channel. Evid: 276.
     * Event description: User turned on his desktop notification for the first time for all his sites (actually browser turned on).
    
     * channel - Type: string. Desc: desktop/email/ sms/ mobile
     *
     * group - Type: string. Desc: desktop/ contact form/  subscriber/  becomes a member/requests to be a member
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * section - Type: string. Desc: desktop/general/ wix chat/bookings/...
     *
     * toggle - Type: bool. Desc: 1 - on , 0- off
     * @param {notificationsEnableToTurnOnOffNotificationsPerChannelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsEnableToTurnOnOffNotificationsPerChannel = function (params) {
        return this.bi.log(__assign({ evid: 276 }, params));
    };
    /**
    * @typedef {Object} quotesPayInvoiceClick246Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my invoices for users
    * @property {string} paymentType - 'Recurring','One Time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Pay Invoice Click. Evid: 246.
     * Event description: Quotes - Pay Invoice Click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my invoices for users
     *
     * paymentType - Type: string. Desc: 'Recurring','One Time'
     *
     * platform - Type: string.
     * @param {quotesPayInvoiceClick246Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPayInvoiceClick246 = function (params) {
        return this.bi.log(__assign({ evid: 246 }, params));
    };
    /**
    * @typedef {Object} quotesPreviewInvoiceParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} invoiceSource - by app_def_id
    * @property {string} msid - msid
    * @property {string} origin - my invoices, edit invoice, widget
    * @property {string} origin_device - web,native
    * @property {string} paymentType - one time, recurring
    * @property {string} platform - null
    * @property {string} source - from where the invoice open {feed, more-->invoices}
    **/
    /**
     * Name: Quotes - Preview invoice. Evid: 422.
     * Event description: preview invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * invoiceSource - Type: string. Desc: by app_def_id
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices, edit invoice, widget
     *
     * origin_device - Type: string. Desc: web,native
     *
     * paymentType - Type: string. Desc: one time, recurring
     *
     * platform - Type: string.
     *
     * source - Type: string. Desc: from where the invoice open {feed, more-->invoices}
     * @param {quotesPreviewInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPreviewInvoice = function (params) {
        return this.bi.log(__assign({ evid: 422 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteInvoiceClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete invoice click. Evid: 430.
     * Event description: delete invoice click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesDeleteInvoiceClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteInvoiceClick = function (params) {
        return this.bi.log(__assign({ evid: 430 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteTaxPageCancelParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete tax page - Cancel. Evid: 439.
     * Event description: cancel in delete tax page (for every close (cancel, x, background click)).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDeleteTaxPageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteTaxPageCancel = function (params) {
        return this.bi.log(__assign({ evid: 439 }, params));
    };
    /**
    * @typedef {Object} dashboardChangeUrlSaveParams
    * @property {GUID} msid - site guid
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard> change url -save. Evid: 330.
     * Event description: user changed the url and clicked on save  in rename dialog.
    
     * msid - Type: guid. Desc: site guid
     *
     * platform - Type: string.
     * @param {dashboardChangeUrlSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardChangeUrlSave = function (params) {
        return this.bi.log(__assign({ evid: 330 }, params));
    };
    /**
    * @typedef {Object} setupWidgetItemsParams
    * @property {string} asset_campaign_guid - omni setup phase id, send the event for each "undone" phase
    * @property {string} available_items - a list of asset campaign IDs that are available in the phase
    * @property {string} hosting - ADI/Editor/MA
    * @property {GUID} msid - msid
    * @property {number} number_of_available_items - deprecated
    * @property {number} number_of_resolved_items - deprecated
    * @property {number} number_of_skipped_items - deprecated
    * @property {string} platform - platform
    * @property {string} resolved_items - a list of asset campaign IDs that were resolved in the phase
    * @property {string} skipped_items - a list of asset campaign IDs that were skipped in the phase
    **/
    /**
     * Name: Biz Manager - setup widget - OMNI Phase Available in Dashboard. Evid: 349.
     * Event description: When a user has an open phase in the dashboard (since they did not complete all tasks in the phase (it is not collapsed), sent each time the user enters the dashboard - home. Following a bug fix, the data is accurate since 25.5.20.
    
     * asset_campaign_guid - Type: string. Desc: omni setup phase id, send the event for each "undone" phase
     *
     * available_items - Type: string. Desc: a list of asset campaign IDs that are available in the phase
     *
     * hosting - Type: string. Desc: ADI/Editor/MA
     *
     * msid - Type: guid. Desc: msid
     *
     * number_of_available_items - Type: numeric. Desc: deprecated
     *
     * number_of_resolved_items - Type: numeric. Desc: deprecated
     *
     * number_of_skipped_items - Type: numeric. Desc: deprecated
     *
     * platform - Type: string. Desc: platform
     *
     * resolved_items - Type: string. Desc: a list of asset campaign IDs that were resolved in the phase
     *
     * skipped_items - Type: string. Desc: a list of asset campaign IDs that were skipped in the phase
     * @param {setupWidgetItemsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.setupWidgetItems = function (params) {
        return this.bi.log(__assign({ evid: 349 }, params));
    };
    /**
    * @typedef {Object} quotesEditTaxClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - edit tax click. Evid: 436.
     * Event description: edit tax click.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesEditTaxClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEditTaxClick = function (params) {
        return this.bi.log(__assign({ evid: 436 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorClickOnSiteParams
    * @property {string} location - the location of the site in the list (0 is first, 1 is second…)
    * @property {GUID} msid - metasite id
    * @property {GUID} msid_clicked - msid_clicked
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: Dashboard > Site Selector Click on Site. Evid: 1380.
     * Event description: When the user clicks on a site in the site selector.
    
     * location - Type: string. Desc: the location of the site in the list (0 is first, 1 is second…)
     *
     * msid - Type: guid. Desc: metasite id
     *
     * msid_clicked - Type: guid. Desc: msid_clicked
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     * @param {dashboardSiteSelectorClickOnSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorClickOnSite = function (params) {
        return this.bi.log(__assign({ evid: 1380 }, params));
    };
    /**
    * @typedef {Object} rolesDeleteRoleDeleteClickFailParams
    * @property {string} accept_email - accepted email
    * @property {string} hosting - MA / Editor
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - delete role - delete click fail. Evid: 364.
     * Event description: user clicked on 'delete' in the delete role window - fail response.
    
     * accept_email - Type: string. Desc: accepted email
     *
     * hosting - Type: string. Desc: MA / Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesDeleteRoleDeleteClickFailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesDeleteRoleDeleteClickFail = function (params) {
        return this.bi.log(__assign({ evid: 364 }, params));
    };
    /**
    * @typedef {Object} viewFeatureCardParams
    * @property {GUID} announcement_id - announcement_id
    * @property {number} card_position - position of the announcement
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - View feature card. Evid: 341.
     * Event description: View is more than 75% of the card and at least 3 seconds. In 3 second I managed to read the header of the announcement.
    The event should be fired only once per announcement per sidebar opened (if sidebar is opened again, an announcement that was already viewed can have another view event)..
    
     * announcement_id - Type: guid. Desc: announcement_id
     *
     * card_position - Type: numeric. Desc: position of the announcement
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {viewFeatureCardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.viewFeatureCard = function (params) {
        return this.bi.log(__assign({ evid: 341 }, params));
    };
    /**
    * @typedef {Object} quotesCreateQuoteSaveDraftClickParams
    * @property {string} msid - msid
    * @property {string} origin - create quote, edit quote
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Create quote - Save draft click. Evid: 77.
     * Event description: Create quote - Save draft button click.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create quote, edit quote
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesCreateQuoteSaveDraftClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateQuoteSaveDraftClick = function (params) {
        return this.bi.log(__assign({ evid: 77 }, params));
    };
    /**
    * @typedef {Object} quotesSettingsChangeTabsParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {string} tab - tab name
    **/
    /**
     * Name: Quotes - Settings - change tabs. Evid: 497.
     * Event description: Quotes - Settings - change tabs.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * tab - Type: string. Desc: tab name
     * @param {quotesSettingsChangeTabsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSettingsChangeTabs = function (params) {
        return this.bi.log(__assign({ evid: 497 }, params));
    };
    /**
    * @typedef {Object} dashboardClickToggleSitesListInNavbarParams
    * @property {string} action - null
    * @property {GUID} msid - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > click toggle sites list in navbar. Evid: 41.
    
    
     * action - Type: string.
     *
     * msid - Type: guid.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardClickToggleSitesListInNavbarParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickToggleSitesListInNavbar = function (params) {
        return this.bi.log(__assign({ evid: 41 }, params));
    };
    /**
    * @typedef {Object} dashboardCloseConnectDomainPopUpParams
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > close connect domain pop-up. Evid: 53.
    
    
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardCloseConnectDomainPopUpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardCloseConnectDomainPopUp = function (params) {
        return this.bi.log(__assign({ evid: 53 }, params));
    };
    /**
    * @typedef {Object} automationsMoreActionsMyAutomationsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > more actions - My Automations. Evid: 259.
     * Event description: user click on Send Feedback.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsMoreActionsMyAutomationsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsMoreActionsMyAutomations = function (params) {
        return this.bi.log(__assign({ evid: 259 }, params));
    };
    /**
    * @typedef {Object} notificationsClickOnChannelLinkParams
    * @property {string} channel - channel section channel section the user clicked on
    * @property {boolean} has_settings - Indication if there are settings options for the channel
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} url - the url the user is transferred to
    **/
    /**
     * Name: Notifications > Click on Channel link. Evid: 380.
     * Event description: Click on a Channel link via "Set Notifications by Channel" section.
    
     * channel - Type: string. Desc: channel section channel section the user clicked on
     *
     * has_settings - Type: bool. Desc: Indication if there are settings options for the channel
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * url - Type: string. Desc: the url the user is transferred to
     * @param {notificationsClickOnChannelLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsClickOnChannelLink = function (params) {
        return this.bi.log(__assign({ evid: 380 }, params));
    };
    /**
    * @typedef {Object} notificationsEnableToTurnOnOffAllSiteNotificationsExpertsParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {boolean} toggle - 1- on , 0- off
    **/
    /**
     * Name: Notifications > Enable to turn on /off all site notifications (Experts). Evid: 275.
     * Event description: expert can enable  / disable all notifications for a specific site.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * toggle - Type: bool. Desc: 1- on , 0- off
     * @param {notificationsEnableToTurnOnOffAllSiteNotificationsExpertsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsEnableToTurnOnOffAllSiteNotificationsExperts = function (params) {
        return this.bi.log(__assign({ evid: 275 }, params));
    };
    /**
    * @typedef {Object} automationsEditAutomationCloseParams
    * @property {string} componentChanged - which component was changed, if more than 1 put as array
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {boolean} save - is the modal was saved
    **/
    /**
     * Name: Automations > Edit automation close. Evid: 391.
     * Event description: Automations > Edit automation close.
    
     * componentChanged - Type: string. Desc: which component was changed, if more than 1 put as array
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * save - Type: bool. Desc: is the modal was saved
     * @param {automationsEditAutomationCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsEditAutomationClose = function (params) {
        return this.bi.log(__assign({ evid: 391 }, params));
    };
    /**
    * @typedef {Object} featureWizardTypingBusinessTypeParams
    * @property {number} cnt_results - how many results the user sees, 0 for zero matches. (without related)
    * @property {string} hosting - dashboard/onboarding/editor
    * @property {GUID} msid - --
    * @property {string} origin - tag/edit/search
    * @property {string} platform - null
    * @property {string} sub_category - the last sub-category the site had.
    * @property {string} text - searched text. When the results shown from clicking a tag send the event null.
    **/
    /**
     * Name: Feature Wizard > Typing Business Type. Evid: 1226.
     * Event description: When a user is typing the business type.
    
     * cnt_results - Type: numeric. Desc: how many results the user sees, 0 for zero matches. (without related)
     *
     * hosting - Type: string. Desc: dashboard/onboarding/editor
     *
     * msid - Type: guid. Desc: --
     *
     * origin - Type: string. Desc: tag/edit/search
     *
     * platform - Type: string.
     *
     * sub_category - Type: string. Desc: the last sub-category the site had.
     *
     * text - Type: string. Desc: searched text. When the results shown from clicking a tag send the event null.
     * @param {featureWizardTypingBusinessTypeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.featureWizardTypingBusinessType = function (params) {
        return this.bi.log(__assign({ evid: 1226 }, params));
    };
    /**
    * @typedef {Object} automationsWebhookV2PayloadStructureParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} type - all keys or custom
    **/
    /**
     * Name: Automations - webhook v2 - payload structure. Evid: 1393.
     * Event description: Automations - webhook v2 - payload structure.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * type - Type: string. Desc: all keys or custom
     * @param {automationsWebhookV2PayloadStructureParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsWebhookV2PayloadStructure = function (params) {
        return this.bi.log(__assign({ evid: 1393 }, params));
    };
    /**
    * @typedef {Object} analyticsClickOnWidgetButtonsParams
    * @property {string} click_name - collapse/expand/customize
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Analytics > Click on Widget Buttons. Evid: 372.
     * Event description: Click on Widget Buttons.
    
     * click_name - Type: string. Desc: collapse/expand/customize
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {analyticsClickOnWidgetButtonsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsClickOnWidgetButtons = function (params) {
        return this.bi.log(__assign({ evid: 372 }, params));
    };
    /**
    * @typedef {Object} bizManagerSetupProgressBarIsDisplayedParams
    * @property {string} asset_campaign_guid - the phase that is displayed to the user (e.g. setup phase)
    * @property {number} done_steps - number of done steps in setup
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {number} skipped_steps - number of skipped steps in setup
    * @property {number} steps - number of steps in setup
    **/
    /**
     * Name: Biz Manager - progress bar is displayed. Evid: 672.
     * Event description: setup progress bar is displayed in side bar.
    
     * asset_campaign_guid - Type: string. Desc: the phase that is displayed to the user (e.g. setup phase)
     *
     * done_steps - Type: numeric. Desc: number of done steps in setup
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * skipped_steps - Type: numeric. Desc: number of skipped steps in setup
     *
     * steps - Type: numeric. Desc: number of steps in setup
     * @param {bizManagerSetupProgressBarIsDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerSetupProgressBarIsDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 672 }, params));
    };
    /**
    * @typedef {Object} sidebarNavigationDropdownIsShownParams
    * @property {string} category_items_list - list of items viewed in the popup menu
    * @property {string} hosting - MA/editor/
    * @property {GUID} msid - site id
    * @property {string} name - the active sidebar item the user hovers on (the unique name)
    * @property {string} page_view - the page view the user is in
    * @property {string} platform - --
    * @property {string} section_name - the name of the source section (where the hover occurred)
    * @property {string} sidebar_name - the name appears in sidebar
    **/
    /**
     * Name: Sidebar Navigation > Dropdown is shown. Evid: 488.
     * Event description: when a user hovers an item from the sidebar and drop shown is shown..
    
     * category_items_list - Type: string. Desc: list of items viewed in the popup menu
     *
     * hosting - Type: string. Desc: MA/editor/
     *
     * msid - Type: guid. Desc: site id
     *
     * name - Type: string. Desc: the active sidebar item the user hovers on (the unique name)
     *
     * page_view - Type: string. Desc: the page view the user is in
     *
     * platform - Type: string. Desc: --
     *
     * section_name - Type: string. Desc: the name of the source section (where the hover occurred)
     *
     * sidebar_name - Type: string. Desc: the name appears in sidebar
     * @param {sidebarNavigationDropdownIsShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.sidebarNavigationDropdownIsShown = function (params) {
        return this.bi.log(__assign({ evid: 488 }, params));
    };
    /**
    * @typedef {Object} crmHomeCreateButtonChooseOptionParams
    * @property {GUID} msid - msid
    * @property {string} option - which option the user choosed
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: CRM Home - create button choose option. Evid: 490.
     * Event description: CRM Home - create button choose option.
    
     * msid - Type: guid. Desc: msid
     *
     * option - Type: string. Desc: which option the user choosed
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {crmHomeCreateButtonChooseOptionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeCreateButtonChooseOption = function (params) {
        return this.bi.log(__assign({ evid: 490 }, params));
    };
    /**
    * @typedef {Object} bizManagerShowUrgentMessagesParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - ids to be consistent with premium events
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - show urgent messages. Evid: 593.
     * Event description: show urgent messages.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * platform - Type: string.
     * @param {bizManagerShowUrgentMessagesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerShowUrgentMessages = function (params) {
        return this.bi.log(__assign({ evid: 593 }, params));
    };
    /**
    * @typedef {Object} engageEmailSettingsCancelBackParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - delete tax. Evid: 544.
     * Event description: Quotes - Settings - delete tax.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {engageEmailSettingsCancelBackParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.engageEmailSettingsCancelBack = function (params) {
        return this.bi.log(__assign({ evid: 544 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteActivityCenterClickDeleteItemParams
    * @property {GUID} feed_id - null
    * @property {boolean} is_archived - null
    * @property {boolean} is_deleted - null
    * @property {GUID} item_id - null
    * @property {number} items_count - null
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {string} source - null
    * @property {number} src - null
    * @property {string} type - null
    **/
    /**
     * Name: dashboard > site -> activity center -> click delete item. Evid: 102.
    
    
     * feed_id - Type: guid.
     *
     * is_archived - Type: bool.
     *
     * is_deleted - Type: bool.
     *
     * item_id - Type: guid.
     *
     * items_count - Type: numeric.
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * source - Type: string.
     *
     * src - Type: numeric.
     *
     * type - Type: string.
     * @param {dashboardSiteActivityCenterClickDeleteItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteActivityCenterClickDeleteItem = function (params) {
        return this.bi.log(__assign({ evid: 102 }, params));
    };
    /**
    * @typedef {Object} dashboardSearchParams
    * @property {GUID} msid - deprecated
    * @property {number} no_of_folders - number of folders
    * @property {number} no_of_html_sites - number of html sites
    * @property {number} no_of_sites - deprecated
    * @property {string} place - where the search took place: site-home, my-sites
    * @property {string} platform - null
    * @property {string} text - deprecated
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > search. Evid: 13.
    
    
     * msid - Type: guid. Desc: deprecated
     *
     * no_of_folders - Type: numeric. Desc: number of folders
     *
     * no_of_html_sites - Type: numeric. Desc: number of html sites
     *
     * no_of_sites - Type: numeric. Desc: deprecated
     *
     * place - Type: string. Desc: where the search took place: site-home, my-sites
     *
     * platform - Type: string.
     *
     * text - Type: string. Desc: deprecated
     *
     * src - Type: numeric.
     * @param {dashboardSearchParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSearch = function (params) {
        return this.bi.log(__assign({ evid: 13 }, params));
    };
    /**
    * @typedef {Object} quotesDateOfIssueUpdatingParams
    * @property {DateTime} date_of_issue - date_of_issue
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Date of Issue Updating. Evid: 464.
     * Event description: Invoice Date of Issue Updating.
    
     * date_of_issue - Type: datetime. Desc: date_of_issue
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesDateOfIssueUpdatingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDateOfIssueUpdating = function (params) {
        return this.bi.log(__assign({ evid: 464 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoSaveSuccessParams
    * @property {string} category - category of of the new sub-category
    * @property {string} fold_name - list of fold names, separated by commas
    * @property {string} hosting - MA/editor
    * @property {string} industry_id - industry_id of of the new sub-category
    * @property {boolean} is_physical_address - true/false
    * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
    * @property {GUID} msid - metasite id
    * @property {string} name - list of fields, separated by commas
    * @property {string} page_view - The page where the changes were made (website settings/business info/language and region)
    * @property {string} place - place of discard button: header, footer
    * @property {string} platform - null
    * @property {string} structure_id - structure_id of the new sub-category
    * @property {string} sub_category - business type at the end
    **/
    /**
     * Name: Biz Manager - Biz Info - save success. Evid: 553.
     * Event description: changes were saved successfully.
    
     * category - Type: string. Desc: category of of the new sub-category
     *
     * fold_name - Type: string. Desc: list of fold names, separated by commas
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * industry_id - Type: string. Desc: industry_id of of the new sub-category
     *
     * is_physical_address - Type: bool. Desc: true/false
     *
     * location_details - Type: string. Desc: 0- first location (create), 1-second location (add), 2- third location (add),...
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: list of fields, separated by commas
     *
     * page_view - Type: string. Desc: The page where the changes were made (website settings/business info/language and region)
     *
     * place - Type: string. Desc: place of discard button: header, footer
     *
     * platform - Type: string.
     *
     * structure_id - Type: string. Desc: structure_id of the new sub-category
     *
     * sub_category - Type: string. Desc: business type at the end
     * @param {bizManagerBizInfoSaveSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoSaveSuccess = function (params) {
        return this.bi.log(__assign({ evid: 553 }, params));
    };
    /**
    * @typedef {Object} verticalsEmailNotificationClickedParams
    * @property {string} button_name - cta name (in english)
    * @property {string} channel - email
    * @property {string} contact_id - If the email has been sent to member/contact
    * @property {string} deep_link - deep_link
    * @property {GUID} msid - msid
    * @property {string} notificationid - notification_id
    * @property {string} platform - null
    * @property {string} template_id - Descriptive name for the type of email. e.g. Identity.Member_Approved
    **/
    /**
     * Name: Verticals -> email notification -> Clicked. Evid: 1272.
     * Event description: When a user clicks on a CTA on a vertical's email notification which doesn't go via Ping!.
    
     * button_name - Type: string. Desc: cta name (in english)
     *
     * channel - Type: string. Desc: email
     *
     * contact_id - Type: string. Desc: If the email has been sent to member/contact
     *
     * deep_link - Type: string. Desc: deep_link
     *
     * msid - Type: guid. Desc: msid
     *
     * notificationid - Type: string. Desc: notification_id
     *
     * platform - Type: string.
     *
     * template_id - Type: string. Desc: Descriptive name for the type of email. e.g. Identity.Member_Approved
     * @param {verticalsEmailNotificationClickedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.verticalsEmailNotificationClicked = function (params) {
        return this.bi.log(__assign({ evid: 1272 }, params));
    };
    /**
    * @typedef {Object} bizManagerViewFinishLoadingParams
    * @property {string} app_ids - app_ids
    * @property {GUID} app_instance_id - --
    * @property {string} hosting - ADI/MA/editor
    * @property {boolean} initial_load - True if first load
    * @property {number} loading_time - loading time of page , sent only if this is first load
    * @property {GUID} msid - --
    * @property {string} platform - null
    * @property {string} prev_sub_view - prev page in app
    * @property {string} prev_view - origin view
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Biz Manager  > View finish loading. Evid: 582.
     * Event description: View/Sub View Start loading.
    
     * app_ids - Type: string. Desc: app_ids
     *
     * app_instance_id - Type: guid. Desc: --
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * initial_load - Type: bool. Desc: True if first load
     *
     * loading_time - Type: numeric. Desc: loading time of page , sent only if this is first load
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     *
     * prev_sub_view - Type: string. Desc: prev page in app
     *
     * prev_view - Type: string. Desc: origin view
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {bizManagerViewFinishLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerViewFinishLoading = function (params) {
        return this.bi.log(__assign({ evid: 582 }, params));
    };
    /**
    * @typedef {Object} homeAllowBlockBrowserNotificationClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {string} user_reply - allow/block/dismiss
    **/
    /**
     * Name: Home > Allow/Block browser notification click. Evid: 255.
     * Event description: User clicks on Allow/Block browser notification setting.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * user_reply - Type: string. Desc: allow/block/dismiss
     * @param {homeAllowBlockBrowserNotificationClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeAllowBlockBrowserNotificationClick = function (params) {
        return this.bi.log(__assign({ evid: 255 }, params));
    };
    /**
    * @typedef {Object} quotesNonValidPaypalAccountPopupClickLinkParams
    * @property {string} link_type - create, upgrade, support
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Non valid Paypal account popup - Click link. Evid: 445.
     * Event description: when a user closes the popup.
    
     * link_type - Type: string. Desc: create, upgrade, support
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow
     *
     * platform - Type: string.
     * @param {quotesNonValidPaypalAccountPopupClickLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNonValidPaypalAccountPopupClickLink = function (params) {
        return this.bi.log(__assign({ evid: 445 }, params));
    };
    /**
    * @typedef {Object} automationsStep2ClickOnLearnMoreParams
    * @property {string} button_name - button name
    * @property {string} event_name - name of event (action)
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > step 2 > click on learn more. Evid: 235.
     * Event description: click on learn more.
    
     * button_name - Type: string. Desc: button name
     *
     * event_name - Type: string. Desc: name of event (action)
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {automationsStep2ClickOnLearnMoreParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsStep2ClickOnLearnMore = function (params) {
        return this.bi.log(__assign({ evid: 235 }, params));
    };
    /**
    * @typedef {Object} accountSettingsErrorWhenClickToDisablePartnerDashboardParams
    * @property {string} errorReason - Teams/Custom branding
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Error when click to disable Partner Dashboard. Evid: 740.
     * Event description: In account setting, the user clicked to disable Partner Dashboard and receive an error because its a teams/custom branding account.
    
     * errorReason - Type: string. Desc: Teams/Custom branding
     *
     * platform - Type: string.
     * @param {accountSettingsErrorWhenClickToDisablePartnerDashboardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsErrorWhenClickToDisablePartnerDashboard = function (params) {
        return this.bi.log(__assign({ evid: 740 }, params));
    };
    /**
    * @typedef {Object} assetViewParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} group_id - id of category in setup widget
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - --
    * @property {string} item_mode - skipped , open . complete
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} platform - null
    * @property {string} premium_badge - the item requires upgrade
    * @property {string} promotionAssetType - deprecated
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    * @property {string} visibility_trigger - normal/step_completed/scrolling to view/ arrow
    **/
    /**
     * Name: Biz Manager - dashboard asset shown. Evid: 590.
     * Event description: what's next asset shown.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * group_id - Type: string. Desc: id of category in setup widget
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: --
     *
     * item_mode - Type: string. Desc: skipped , open . complete
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * platform - Type: string.
     *
     * premium_badge - Type: string. Desc: the item requires upgrade
     *
     * promotionAssetType - Type: string. Desc: deprecated
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     *
     * visibility_trigger - Type: string. Desc: normal/step_completed/scrolling to view/ arrow
     * @param {assetViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.assetView = function (params) {
        return this.bi.log(__assign({ evid: 590 }, params));
    };
    /**
    * @typedef {Object} quotesLimit5kCsvDownloadParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - limit 5K csv download. Evid: 738.
     * Event description: Quotes - limit 5K csv download.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesLimit5kCsvDownloadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesLimit5kCsvDownload = function (params) {
        return this.bi.log(__assign({ evid: 738 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetReportsViewReportParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - reports - view report. Evid: 1327.
     * Event description: Invoices - widget - see all invoices.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetReportsViewReportParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetReportsViewReport = function (params) {
        return this.bi.log(__assign({ evid: 1327 }, params));
    };
    /**
    * @typedef {Object} notificationsClickOnAllSitesTabParams
    * @property {string} feed_name - on which tab did he clicked
    * @property {string} msid - deprecated
    * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    * @property {string} tab_name - deprecated
    * @property {string} view - deprecated
    **/
    /**
     * Name: Notifications > Click on 'all sites' / this site feed. Evid: 256.
     * Event description: User clicks navigated between all site / this site tabs.
    
     * feed_name - Type: string. Desc: on which tab did he clicked
     *
     * msid - Type: string. Desc: deprecated
     *
     * origin - Type: string. Desc: MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     *
     * tab_name - Type: string. Desc: deprecated
     *
     * view - Type: string. Desc: deprecated
     * @param {notificationsClickOnAllSitesTabParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsClickOnAllSitesTab = function (params) {
        return this.bi.log(__assign({ evid: 256 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersGetTheAppClickFromLearnMoreParams
    * @property {GUID} app_id - appid
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Automations > get the app click (from learn more). Evid: 222.
     * Event description: get the app click (from learn more).
    
     * app_id - Type: guid. Desc: appid
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTriggersGetTheAppClickFromLearnMoreParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersGetTheAppClickFromLearnMore = function (params) {
        return this.bi.log(__assign({ evid: 222 }, params));
    };
    /**
    * @typedef {Object} analyticsErrorMessageParams
    * @property {string} error_type - type of the error
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} widget_name - widget name
    **/
    /**
     * Name: Widget Loaded Error. Evid: 370.
     * Event description: When the user sees an error message on the widgets in the dashboard.
    
     * error_type - Type: string. Desc: type of the error
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * widget_name - Type: string. Desc: widget name
     * @param {analyticsErrorMessageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsErrorMessage = function (params) {
        return this.bi.log(__assign({ evid: 370 }, params));
    };
    /**
    * @typedef {Object} dashboardAccountSettingsImageActionSuccessParams
    * @property {string} action - {upload, remove}
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > account settings -> image action success. Evid: 46.
     * Event description: image upload / remove success after user chooses action.
    
     * action - Type: string. Desc: {upload, remove}
     *
     * platform - Type: string.
     * @param {dashboardAccountSettingsImageActionSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardAccountSettingsImageActionSuccess = function (params) {
        return this.bi.log(__assign({ evid: 46 }, params));
    };
    /**
    * @typedef {Object} removePhoneNumberPhoneRemovalAskedParams
    * @property {string} hashed_phone - hashed phone
    * @property {string} platform - null
    **/
    /**
     * Name: Remove Phone Number - Phone Removal Asked. Evid: 99.
     * Event description: After entering a verified password, removing phone process starts.
    
     * hashed_phone - Type: string. Desc: hashed phone
     *
     * platform - Type: string.
     * @param {removePhoneNumberPhoneRemovalAskedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.removePhoneNumberPhoneRemovalAsked = function (params) {
        return this.bi.log(__assign({ evid: 99 }, params));
    };
    /**
    * @typedef {Object} quotesClickIssueDateParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click issue date. Evid: 385.
     * Event description: Quotes - click issue date.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesClickIssueDateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickIssueDate = function (params) {
        return this.bi.log(__assign({ evid: 385 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteClickOnLegalCheckboxInTransferSiteSecondWindowParams
    * @property {boolean} check_box - true/false
    * @property {string} hosting - ma/editor
    * @property {GUID} msid - site id
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site -> click on legal checkbox in Transfer Site second window. Evid: 49.
     * Event description: legal checkbox on/off.
    
     * check_box - Type: bool. Desc: true/false
     *
     * hosting - Type: string. Desc: ma/editor
     *
     * msid - Type: guid. Desc: site id
     *
     * platform - Type: string.
     * @param {dashboardSiteClickOnLegalCheckboxInTransferSiteSecondWindowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteClickOnLegalCheckboxInTransferSiteSecondWindow = function (params) {
        return this.bi.log(__assign({ evid: 49 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorIsLoadedWithoutScreenshotsParams
    * @property {number} loading_time - loading time
    * @property {GUID} msid - metasite id
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    * @property {string} site_list - a list with all the msids shown to the user, the first item is the first item, second item is the second msid and so on…)
    **/
    /**
     * Name: Dashboard > Site Selector Is Loaded without Screenshots. Evid: 1378.
     * Event description: When the site selector screenshots failed to load but the site selector is loaded..
    
     * loading_time - Type: numeric. Desc: loading time
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     *
     * site_list - Type: string. Desc: a list with all the msids shown to the user, the first item is the first item, second item is the second msid and so on…)
     * @param {dashboardSiteSelectorIsLoadedWithoutScreenshotsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorIsLoadedWithoutScreenshots = function (params) {
        return this.bi.log(__assign({ evid: 1378 }, params));
    };
    /**
    * @typedef {Object} uouUnsubscribePageViewParams
    * @property {string} device - mobile
    * @property {GUID} msid - msid
    * @property {GUID} notification_Id - notification id of unsubscribe sms
    * @property {string} platform - null
    * @property {GUID} visitor_id - visitor_id of uou
    **/
    /**
     * Name: UOU Unsubscribe > Page View. Evid: 798.
     * Event description: the page view UOU sees when they click unsubscribe from sms notification.
    
     * device - Type: string. Desc: mobile
     *
     * msid - Type: guid. Desc: msid
     *
     * notification_Id - Type: guid. Desc: notification id of unsubscribe sms
     *
     * platform - Type: string.
     *
     * visitor_id - Type: guid. Desc: visitor_id of uou
     * @param {uouUnsubscribePageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.uouUnsubscribePageView = function (params) {
        return this.bi.log(__assign({ evid: 798 }, params));
    };
    /**
    * @typedef {Object} twoFactorAuthenticationSetupEnableClickParams
    * @property {string} platform - null
    **/
    /**
     * Name: Two Factor Authentication Setup - Enable Click. Evid: 681.
     * Event description: The user click on 'enable' to enable two-factor authentication.
    
     * platform - Type: string.
     * @param {twoFactorAuthenticationSetupEnableClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.twoFactorAuthenticationSetupEnableClick = function (params) {
        return this.bi.log(__assign({ evid: 681 }, params));
    };
    /**
    * @typedef {Object} dashboardAccountSettingsClickLearnMoreInIParams
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > account settings -> click 'learn more' in i. Evid: 67.
     * Event description: user clicks 'learn more' in i.
    
     * platform - Type: string.
     * @param {dashboardAccountSettingsClickLearnMoreInIParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardAccountSettingsClickLearnMoreInI = function (params) {
        return this.bi.log(__assign({ evid: 67 }, params));
    };
    /**
    * @typedef {Object} quotesNewQuoteClickParams
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {GUID} original_quoteId - in case of duplicate: original quote guid
    * @property {string} platform - null
    * @property {GUID} quoteId - quote_guid
    **/
    /**
     * Name: Quotes - New Quote click. Evid: 65.
     * Event description: Click on create new quote.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * original_quoteId - Type: guid. Desc: in case of duplicate: original quote guid
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote_guid
     * @param {quotesNewQuoteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNewQuoteClick = function (params) {
        return this.bi.log(__assign({ evid: 65 }, params));
    };
    /**
    * @typedef {Object} ascendClickOnUpgradeAscendParams
    * @property {string} appName - BM App
    * @property {string} button_name - upgrade/upgrade business tools / ascend info / learn more
    * @property {GUID} msid - msid
    * @property {string} origin - web/native
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Ascend - Click on Upgrade Ascend. Evid: 189.
     * Event description: Click on Upgrade Ascend.
    
     * appName - Type: string. Desc: BM App
     *
     * button_name - Type: string. Desc: upgrade/upgrade business tools / ascend info / learn more
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: web/native
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {ascendClickOnUpgradeAscendParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendClickOnUpgradeAscend = function (params) {
        return this.bi.log(__assign({ evid: 189 }, params));
    };
    /**
    * @typedef {Object} automationsMoreActionsClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > more actions click. Evid: 258.
     * Event description: user click on Send Feedback.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsMoreActionsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsMoreActionsClick = function (params) {
        return this.bi.log(__assign({ evid: 258 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteNewsClickItemParams
    * @property {GUID} campaignId - unique identifier of CMS items
    * @property {GUID} feed_id - null
    * @property {boolean} is_archived - null
    * @property {boolean} is_deleted - null
    * @property {GUID} item_id - null
    * @property {string} lang - null
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} msg_origin - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {string} source - null
    * @property {number} src - null
    * @property {string} title - title of tip
    * @property {string} feed_type - null
    * @property {string} type - null
    * @property {string} url - null
    **/
    /**
     * Name: dashboard > site -> news -> click item. Evid: 19.
    
    
     * campaignId - Type: guid. Desc: unique identifier of CMS items
     *
     * feed_id - Type: guid.
     *
     * is_archived - Type: bool.
     *
     * is_deleted - Type: bool.
     *
     * item_id - Type: guid.
     *
     * lang - Type: string.
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * msg_origin - Type: string.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * source - Type: string.
     *
     * src - Type: numeric.
     *
     * title - Type: string. Desc: title of tip
     *
     * feed_type - Type: string.
     *
     * type - Type: string.
     *
     * url - Type: string.
     * @param {dashboardSiteNewsClickItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteNewsClickItem = function (params) {
        return this.bi.log(__assign({ evid: 19 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersUseThisTriggerClickParams
    * @property {string} group_name - group name of recommended triggers
    * @property {GUID} msid - msid
    * @property {string} multistep - multistep if it's multistep, null if not
    * @property {string} origin - origin page
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    * @property {string} section_name - section_name
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Start to create Automation from Recommendation. Evid: 201.
     * Event description: Use this trigger click.
    
     * group_name - Type: string. Desc: group name of recommended triggers
     *
     * msid - Type: guid. Desc: msid
     *
     * multistep - Type: string. Desc: multistep if it's multistep, null if not
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     *
     * section_name - Type: string. Desc: section_name
     *
     * src - Type: numeric.
     * @param {dashboardTriggersUseThisTriggerClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersUseThisTriggerClick = function (params) {
        return this.bi.log(__assign({ evid: 201 }, params));
    };
    /**
    * @typedef {Object} accountSettingsClickOnManagePreferencesParams
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Manage Preferences. Evid: 679.
     * Event description: The user clicks on 'manage preferences' in account settings (redesign).
    
     * platform - Type: string.
     * @param {accountSettingsClickOnManagePreferencesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsClickOnManagePreferences = function (params) {
        return this.bi.log(__assign({ evid: 679 }, params));
    };
    /**
    * @typedef {Object} automationsDeleteActionStepParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > delete action step. Evid: 737.
     * Event description: Automations > delete action step.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsDeleteActionStepParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDeleteActionStep = function (params) {
        return this.bi.log(__assign({ evid: 737 }, params));
    };
    /**
    * @typedef {Object} teamManagementPickLogoParams
    * @property {string} action_type - replace/remove/add/upload/purchase
    * @property {string} platform - null
    **/
    /**
     * Name: Team management > pick logo. Evid: 172.
     * Event description: when a user clicks to add/remove/replace/upload logo in edit team dialog.
    
     * action_type - Type: string. Desc: replace/remove/add/upload/purchase
     *
     * platform - Type: string.
     * @param {teamManagementPickLogoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementPickLogo = function (params) {
        return this.bi.log(__assign({ evid: 172 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorPopupCloseParams
    * @property {GUID} msid - site guid
    * @property {string} name - popup name
    * @property {string} platform - null
    * @property {string} siteTypeName - ADI/Editor
    **/
    /**
     * Name: dashboard > site selector popup close. Evid: 82.
     * Event description: when a user closed ADI popup.
    
     * msid - Type: guid. Desc: site guid
     *
     * name - Type: string. Desc: popup name
     *
     * platform - Type: string.
     *
     * siteTypeName - Type: string. Desc: ADI/Editor
     * @param {dashboardSiteSelectorPopupCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorPopupClose = function (params) {
        return this.bi.log(__assign({ evid: 82 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnCreateNewFolderParams
    * @property {string} hosting - MA
    * @property {number} nesting_level - 0 (my-sites)/1 (folder) /2/3...
    * @property {string} platform - null
    * @property {string} source - top-bar/dialog/quick action button
    * @property {string} sub_view - grid / list-view
    * @property {string} view - my-sites/folder-view
    **/
    /**
     * Name: Folders> Click on Create New Folder. Evid: 122.
     * Event description: when a user clicks on the 'Create New Folder' button from my-site or dialog.
    
     * hosting - Type: string. Desc: MA
     *
     * nesting_level - Type: numeric. Desc: 0 (my-sites)/1 (folder) /2/3...
     *
     * platform - Type: string.
     *
     * source - Type: string. Desc: top-bar/dialog/quick action button
     *
     * sub_view - Type: string. Desc: grid / list-view
     *
     * view - Type: string. Desc: my-sites/folder-view
     * @param {foldersClickOnCreateNewFolderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnCreateNewFolder = function (params) {
        return this.bi.log(__assign({ evid: 122 }, params));
    };
    /**
    * @typedef {Object} automationsScrollHomePageTillTheEndParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > scroll home page till the end. Evid: 146.
     * Event description: scroll home to end of page.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsScrollHomePageTillTheEndParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsScrollHomePageTillTheEnd = function (params) {
        return this.bi.log(__assign({ evid: 146 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersSendTriggerTestClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Send Trigger Test Click. Evid: 215.
     * Event description: Send Trigger Test Click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric.
     * @param {dashboardTriggersSendTriggerTestClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersSendTriggerTestClick = function (params) {
        return this.bi.log(__assign({ evid: 215 }, params));
    };
    /**
    * @typedef {Object} teamManagementClickToLearnMoreParams
    * @property {string} origin - team_onboarding/team_management_page/team profile dialog/MA/invite_members_dialog
    * @property {string} platform - null
    **/
    /**
     * Name: Team management - click to learn more. Evid: 170.
     * Event description: User clicks on 'Learn More'.
    
     * origin - Type: string. Desc: team_onboarding/team_management_page/team profile dialog/MA/invite_members_dialog
     *
     * platform - Type: string.
     * @param {teamManagementClickToLearnMoreParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementClickToLearnMore = function (params) {
        return this.bi.log(__assign({ evid: 170 }, params));
    };
    /**
    * @typedef {Object} dashboardUserClickedOnContactSNameFromUserActivityParams
    * @property {GUID} feed_id - null
    * @property {GUID} item_id - null
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {string} source - null
    * @property {number} src - null
    * @property {string} type - null
    **/
    /**
     * Name: dashboard > user clicked on Contact's name from userActivity. Evid: 105.
     * Event description: Click on contact's name in a feed that was added from a TPA due to UoU activity.
    
     * feed_id - Type: guid.
     *
     * item_id - Type: guid.
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * source - Type: string.
     *
     * src - Type: numeric.
     *
     * type - Type: string.
     * @param {dashboardUserClickedOnContactSNameFromUserActivityParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardUserClickedOnContactSNameFromUserActivity = function (params) {
        return this.bi.log(__assign({ evid: 105 }, params));
    };
    /**
    * @typedef {Object} crmHomeIntegrationsFinanceConnectParams
    * @property {string} connectTab - which connection the user choose
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - integrations - finance connect. Evid: 1116.
     * Event description: CRM Home - integrations - finance connect.
    
     * connectTab - Type: string. Desc: which connection the user choose
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeIntegrationsFinanceConnectParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeIntegrationsFinanceConnect = function (params) {
        return this.bi.log(__assign({ evid: 1116 }, params));
    };
    /**
    * @typedef {Object} invoicesEditModesEditInvoiceParams
    * @property {boolean} hasViewedInvoice - if the uou seen the invoice
    * @property {boolean} ifOrderExist - if order exist
    * @property {string} invoiceStatus - status of the invoice
    * @property {GUID} msid - msid
    * @property {string} origin - origin of the invoice
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - edit modes - edit invoice. Evid: 1329.
     * Event description: Invoices - edit invoice.
    
     * hasViewedInvoice - Type: bool. Desc: if the uou seen the invoice
     *
     * ifOrderExist - Type: bool. Desc: if order exist
     *
     * invoiceStatus - Type: string. Desc: status of the invoice
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin of the invoice
     *
     * platform - Type: string.
     * @param {invoicesEditModesEditInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesEditModesEditInvoice = function (params) {
        return this.bi.log(__assign({ evid: 1329 }, params));
    };
    /**
    * @typedef {Object} bizManagerSetupWidgetClickCtaAfterShowMessageCompleteParams
    * @property {string} asset_campaign_guid - asset_campaign_guid
    * @property {string} click_type - click/ close
    * @property {string} hosting - ADI/MA/editor
    * @property {string} module_id - module name
    * @property {GUID} msid - metasite id
    * @property {string} origin - light_box/progress_bar_popup
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - setup widget - Click CTA after show message complete. Evid: 576.
     * Event description: Click CTA after show message complete.
    
     * asset_campaign_guid - Type: string. Desc: asset_campaign_guid
     *
     * click_type - Type: string. Desc: click/ close
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * module_id - Type: string. Desc: module name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * origin - Type: string. Desc: light_box/progress_bar_popup
     *
     * platform - Type: string.
     * @param {bizManagerSetupWidgetClickCtaAfterShowMessageCompleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerSetupWidgetClickCtaAfterShowMessageComplete = function (params) {
        return this.bi.log(__assign({ evid: 576 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesClickCardParams
    * @property {string} card - which card was clicked
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - click card. Evid: 1302.
     * Event description: Financial Services Settings - invoices - click card.
    
     * card - Type: string. Desc: which card was clicked
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesClickCardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesClickCard = function (params) {
        return this.bi.log(__assign({ evid: 1302 }, params));
    };
    /**
    * @typedef {Object} invoicesMoreActionsClickParams
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - More Actions - Click. Evid: 193.
     * Event description: Invoices - More Actions - Click.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     * @param {invoicesMoreActionsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesMoreActionsClick = function (params) {
        return this.bi.log(__assign({ evid: 193 }, params));
    };
    /**
    * @typedef {Object} apesMoreActionsParams
    * @property {boolean} isPreinstalled - if the automation was preinstalled
    * @property {GUID} msid - msid
    * @property {string} origin - which origin was this action made from
    * @property {string} platform - null
    * @property {GUID} rule_id - rule id
    **/
    /**
     * Name: Automations - Widget- more actions. Evid: 1236.
     * Event description: APeS - Save edited notification.
    
     * isPreinstalled - Type: bool. Desc: if the automation was preinstalled
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: which origin was this action made from
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule id
     * @param {apesMoreActionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesMoreActions = function (params) {
        return this.bi.log(__assign({ evid: 1236 }, params));
    };
    /**
    * @typedef {Object} bizManagerBusinessInfoMergeDialogApproveParams
    * @property {string} hosting - MA/editor/ADI
    * @property {string} merged_apps - merged app def id, use delimiter "," between each app_id
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Business Info Merge Dialog - Approve. Evid: 586.
     * Event description: This dialog will alert the user about the change to his settings.
    It will be displayed only in case of a conflict (my account and other verticals) in the merge process. This event represents approval of merging.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * merged_apps - Type: string. Desc: merged app def id, use delimiter "," between each app_id
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerBusinessInfoMergeDialogApproveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBusinessInfoMergeDialogApprove = function (params) {
        return this.bi.log(__assign({ evid: 586 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceSaveDraftFailedParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - create invoice, edit invoice
    * @property {string} platform - null
    * @property {string} reason - failure reason
    **/
    /**
     * Name: Quotes - Create invoice - Save draft failed. Evid: 410.
     * Event description: Create invoice - Save draft failed.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create invoice, edit invoice
     *
     * platform - Type: string.
     *
     * reason - Type: string. Desc: failure reason
     * @param {quotesCreateInvoiceSaveDraftFailedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceSaveDraftFailed = function (params) {
        return this.bi.log(__assign({ evid: 410 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoApproveDiscardParams
    * @property {string} context - name of modal: discard modal, navigate away modal
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} page_view - hosting: MA/editor/onboarding msid context: name of modal: discard modal, navigate away modal page_view: The page where the changes were made (website settings/business info/language and region)
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - approve discard. Evid: 555.
     * Event description: user approves to discard changes in the discard modal
    or
    user navigates away and doesn't want to keep changes.
    
     * context - Type: string. Desc: name of modal: discard modal, navigate away modal
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: hosting: MA/editor/onboarding msid context: name of modal: discard modal, navigate away modal page_view: The page where the changes were made (website settings/business info/language and region)
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoApproveDiscardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoApproveDiscard = function (params) {
        return this.bi.log(__assign({ evid: 555 }, params));
    };
    /**
    * @typedef {Object} quotesSubscriptionViewPaymentsParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Subscription - view payments. Evid: 389.
     * Event description: Quotes - Subscription - view payments.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesSubscriptionViewPaymentsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSubscriptionViewPayments = function (params) {
        return this.bi.log(__assign({ evid: 389 }, params));
    };
    /**
    * @typedef {Object} dashboardCreateNewSiteParams
    * @property {string} origin - {site_list_top, site_list_bottom, top_bar, account_templates,...}
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > create new site. Evid: 80.
     * Event description: user adds a new site from different origins (site_list_top, site_list_bottom, top_bar, account_templates), where account_templates = account -> temlpates.
    
     * origin - Type: string. Desc: {site_list_top, site_list_bottom, top_bar, account_templates,...}
     *
     * platform - Type: string.
     * @param {dashboardCreateNewSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardCreateNewSite = function (params) {
        return this.bi.log(__assign({ evid: 80 }, params));
    };
    /**
    * @typedef {Object} dashboardCloseBannerParams
    * @property {GUID} msid - msid
    * @property {string} name - of banner
    * @property {string} origin - where is the banner displayed
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > close banner. Evid: 36.
     * Event description: send each time user see banner.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: of banner
     *
     * origin - Type: string. Desc: where is the banner displayed
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardCloseBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardCloseBanner = function (params) {
        return this.bi.log(__assign({ evid: 36 }, params));
    };
    /**
    * @typedef {Object} quotesAddDiscountParams
    * @property {string} discount - discount percentage
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Add Discount. Evid: 465.
     * Event description: user finish to add a discount.
    
     * discount - Type: string. Desc: discount percentage
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesAddDiscountParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddDiscount = function (params) {
        return this.bi.log(__assign({ evid: 465 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesDefaultsNotesPreviewInvoiceParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - defaults notes - preview invoice. Evid: 1309.
     * Event description: Financial Services Settings - invoices - defaults notes - preview invoice.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesDefaultsNotesPreviewInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesDefaultsNotesPreviewInvoice = function (params) {
        return this.bi.log(__assign({ evid: 1309 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceToggleRecurringParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {boolean} toggle - true if it's Recurring on, false for oposite
    **/
    /**
     * Name: Quotes - Create invoice - Toggle Recurring. Evid: 480.
     * Event description: Quotes - Create invoice - Toggle Recurring.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * toggle - Type: bool. Desc: true if it's Recurring on, false for oposite
     * @param {quotesCreateInvoiceToggleRecurringParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceToggleRecurring = function (params) {
        return this.bi.log(__assign({ evid: 480 }, params));
    };
    /**
    * @typedef {Object} quotesVoidClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - origin
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Void click. Evid: 427.
     * Event description: make invoice Void click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesVoidClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesVoidClick = function (params) {
        return this.bi.log(__assign({ evid: 427 }, params));
    };
    /**
    * @typedef {Object} crmHomeWorkflowsWidgetUseTemplateParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} template - which template the user chosen
    **/
    /**
     * Name: CRM Home - workflows widget - use template. Evid: 852.
     * Event description: CRM Home - workflows widget - use template.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * template - Type: string. Desc: which template the user chosen
     * @param {crmHomeWorkflowsWidgetUseTemplateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeWorkflowsWidgetUseTemplate = function (params) {
        return this.bi.log(__assign({ evid: 852 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersStep1TriggerSelectedParams
    * @property {string} event_name - name of event (action)
    * @property {string} flowType - flow in which the save happens: {create, edit}
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - null
    **/
    /**
     * Name: Automations > step 1 > trigger selected. Evid: 212.
     * Event description: selecting visitor action trigger.
    
     * event_name - Type: string. Desc: name of event (action)
     *
     * flowType - Type: string. Desc: flow in which the save happens: {create, edit}
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric.
     * @param {dashboardTriggersStep1TriggerSelectedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersStep1TriggerSelected = function (params) {
        return this.bi.log(__assign({ evid: 212 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsChangeValueFailureParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - field's value
    **/
    /**
     * Name: dashboard > site settings > change value failure. Evid: 314.
     * Event description: user changed a value in the dashboard > site settings > failed.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: field's value
     * @param {dashboardSiteSettingsChangeValueFailureParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsChangeValueFailure = function (params) {
        return this.bi.log(__assign({ evid: 314 }, params));
    };
    /**
    * @typedef {Object} crmHomeAddNewContactWidgetParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - add new contact widget. Evid: 746.
     * Event description: CRM Home - add new contact widget.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeAddNewContactWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeAddNewContactWidget = function (params) {
        return this.bi.log(__assign({ evid: 746 }, params));
    };
    /**
    * @typedef {Object} automationsWebhookV2CustomizeStructureSaveParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - webhook v2 - customize structure - save. Evid: 1398.
     * Event description: Automations - webhook v2 - customize structure - save.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsWebhookV2CustomizeStructureSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsWebhookV2CustomizeStructureSave = function (params) {
        return this.bi.log(__assign({ evid: 1398 }, params));
    };
    /**
    * @typedef {Object} crmHomeGeneralVideoParams
    * @property {GUID} msid - msid
    * @property {string} origin - origin of the video
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - General Video. Evid: 1314.
     * Event description: CRM Home - General Video.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin of the video
     *
     * platform - Type: string.
     * @param {crmHomeGeneralVideoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeGeneralVideo = function (params) {
        return this.bi.log(__assign({ evid: 1314 }, params));
    };
    /**
    * @typedef {Object} bizManagerSetupWidgetPhaseCompletedParams
    * @property {string} asset_campaign_guid - omni setup phase id
    * @property {string} hosting - ADI/Editor/MA
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - setup widget - Phase Completed. Evid: 169.
     * Event description: When a phase is completed in the OMNI Widget.
    
     * asset_campaign_guid - Type: string. Desc: omni setup phase id
     *
     * hosting - Type: string. Desc: ADI/Editor/MA
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {bizManagerSetupWidgetPhaseCompletedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerSetupWidgetPhaseCompleted = function (params) {
        return this.bi.log(__assign({ evid: 169 }, params));
    };
    /**
    * @typedef {Object} analyticsClickOnKpiParams
    * @property {string} hosting - MA/editor/ADI
    * @property {number} kpi_location - 0-left 1-middle 2-right
    * @property {string} kpi_name - kpi's name
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Analytics > click on KPI. Evid: 373.
     * Event description: click on KPI from Analytics Widget.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * kpi_location - Type: numeric. Desc: 0-left 1-middle 2-right
     *
     * kpi_name - Type: string. Desc: kpi's name
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {analyticsClickOnKpiParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsClickOnKpi = function (params) {
        return this.bi.log(__assign({ evid: 373 }, params));
    };
    /**
    * @typedef {Object} transferSiteReceiverOpenCompleteTransferDialogParams
    * @property {string} hosting - MA/Editor
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - receiver open complete transfer dialog. Evid: 64.
     * Event description: receiver clicked on accept transfer from mail, the dashboard is open and an complete transfer dialog is open.
    
     * hosting - Type: string. Desc: MA/Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {transferSiteReceiverOpenCompleteTransferDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteReceiverOpenCompleteTransferDialog = function (params) {
        return this.bi.log(__assign({ evid: 64 }, params));
    };
    /**
    * @typedef {Object} rolesDeleteRoleDeleteClickSuccessParams
    * @property {string} accept_email - accepted email
    * @property {string} hosting - MA / Editor
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - delete role - delete click success. Evid: 363.
     * Event description: user clicked on 'delete' in the delete role window - success response.
    
     * accept_email - Type: string. Desc: accepted email
     *
     * hosting - Type: string. Desc: MA / Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesDeleteRoleDeleteClickSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesDeleteRoleDeleteClickSuccess = function (params) {
        return this.bi.log(__assign({ evid: 363 }, params));
    };
    /**
    * @typedef {Object} crmHomeTopCarouselClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - Top carousel click. Evid: 1384.
     * Event description: CRM Home - Top carousel click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeTopCarouselClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeTopCarouselClick = function (params) {
        return this.bi.log(__assign({ evid: 1384 }, params));
    };
    /**
    * @typedef {Object} notificationsEnableDesktopNotificationsFirstTimeParams
    * @property {string} feed_name - All Sites/This Site / settings
    * @property {string} msid - deprecated
    * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > Enable Desktop Notifications (first time). Evid: 273.
     * Event description: User turned on his desktop notification for the first time for all his sites (actually browser turned on).
    
     * feed_name - Type: string. Desc: All Sites/This Site / settings
     *
     * msid - Type: string. Desc: deprecated
     *
     * origin - Type: string. Desc: (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {notificationsEnableDesktopNotificationsFirstTimeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsEnableDesktopNotificationsFirstTime = function (params) {
        return this.bi.log(__assign({ evid: 273 }, params));
    };
    /**
    * @typedef {Object} accountSettingsForgotPasswordClickParams
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Forgot Password Click. Evid: 691.
     * Event description: When a user clicks on "forgot password" in account settings.
    
     * platform - Type: string.
     * @param {accountSettingsForgotPasswordClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsForgotPasswordClick = function (params) {
        return this.bi.log(__assign({ evid: 691 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesSiteSelectionPageNumberViewParams
    * @property {GUID} msid - msid
    * @property {number} no_of_html_sites - number of html sites
    * @property {number} no_of_sites - number of sites user have
    * @property {number} page_number - פשעק מוצנקר
    * @property {string} platform - null
    * @property {number} prev_page - previous page
    **/
    /**
     * Name: dashboard > My Sites - site selection page number view. Evid: 152.
     * Event description: my sites selection page.
    
     * msid - Type: guid. Desc: msid
     *
     * no_of_html_sites - Type: numeric. Desc: number of html sites
     *
     * no_of_sites - Type: numeric. Desc: number of sites user have
     *
     * page_number - Type: numeric. Desc: פשעק מוצנקר
     *
     * platform - Type: string.
     *
     * prev_page - Type: numeric. Desc: previous page
     * @param {dashboardMySitesSiteSelectionPageNumberViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesSiteSelectionPageNumberView = function (params) {
        return this.bi.log(__assign({ evid: 152 }, params));
    };
    /**
    * @typedef {Object} accountSettingsOnRequestToUnlockFieldParams
    * @property {string} field_name - username/email address/2FA enable/2FA disable/2FA edit
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - OnRequest to Unlock Field. Evid: 689.
     * Event description: The user clicks in 'username' or 'email address' fields in account settings  (these fields are locked and the user must enter the account password). Once the user enters the correct password, these fields stay unlocked for the next 5 minutes and this event will not be sent again for those 5 minutes..
    
     * field_name - Type: string. Desc: username/email address/2FA enable/2FA disable/2FA edit
     *
     * platform - Type: string.
     * @param {accountSettingsOnRequestToUnlockFieldParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsOnRequestToUnlockField = function (params) {
        return this.bi.log(__assign({ evid: 689 }, params));
    };
    /**
    * @typedef {Object} dashboardChangeSiteDisplayNameSaveParams
    * @property {GUID} msid - site guid
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard> change site display name - save. Evid: 329.
     * Event description: user changed site display name and clicked on save in rename dialog.
    
     * msid - Type: guid. Desc: site guid
     *
     * platform - Type: string.
     * @param {dashboardChangeSiteDisplayNameSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardChangeSiteDisplayNameSave = function (params) {
        return this.bi.log(__assign({ evid: 329 }, params));
    };
    /**
    * @typedef {Object} invoicesMoreActionsChooseOptionParams
    * @property {string} msid - msid
    * @property {string} option - 'Products', 'Reports','Accept Payments', 'Invoice Settings','Feedback'
    * @property {string} origin - originPage
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - More Actions - Choose option. Evid: 194.
     * Event description: Invoices - More Actions - Choose option.
    
     * msid - Type: string. Desc: msid
     *
     * option - Type: string. Desc: 'Products', 'Reports','Accept Payments', 'Invoice Settings','Feedback'
     *
     * origin - Type: string. Desc: originPage
     *
     * platform - Type: string.
     * @param {invoicesMoreActionsChooseOptionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesMoreActionsChooseOption = function (params) {
        return this.bi.log(__assign({ evid: 194 }, params));
    };
    /**
    * @typedef {Object} quotesEditQuoteParams
    * @property {string} msid - msid
    * @property {string} origin - my quotes, preview
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Edit Quote. Evid: 75.
     * Event description: edit quote.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my quotes, preview
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesEditQuoteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEditQuote = function (params) {
        return this.bi.log(__assign({ evid: 75 }, params));
    };
    /**
    * @typedef {Object} bizManagerShowTooltipParams
    * @property {string} app_ids - all apps in dashboard (array)
    * @property {string} asset_campaign_guid - when whats next then place
    * @property {string} hosting - MA/editor
    * @property {boolean} is_hover - true if tooltip shown upon hover
    * @property {GUID} msid - metasite id
    * @property {string} name - tooltip name
    * @property {string} place - where tooltip was shown (sidebar, rename dialog)
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - show tooltip. Evid: 583.
     * Event description: tooltip is shown.
    
     * app_ids - Type: string. Desc: all apps in dashboard (array)
     *
     * asset_campaign_guid - Type: string. Desc: when whats next then place
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * is_hover - Type: bool. Desc: true if tooltip shown upon hover
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: tooltip name
     *
     * place - Type: string. Desc: where tooltip was shown (sidebar, rename dialog)
     *
     * platform - Type: string.
     * @param {bizManagerShowTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerShowTooltip = function (params) {
        return this.bi.log(__assign({ evid: 583 }, params));
    };
    /**
    * @typedef {Object} bizManagerSetupWidgetShowMessageCompleteParams
    * @property {string} asset_campaign_guid - id for phase is setup- ids to be consistent with premium events
    * @property {string} hosting - ADI/MA/editor
    * @property {string} module_id - module name
    * @property {GUID} msid - metasite id
    * @property {string} origin - light_box/progress_bar_popup
    * @property {string} platform - null
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Biz Manager - setup widget show message complete. Evid: 575.
     * Event description: setup widget show message complete.
    
     * asset_campaign_guid - Type: string. Desc: id for phase is setup- ids to be consistent with premium events
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * module_id - Type: string. Desc: module name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * origin - Type: string. Desc: light_box/progress_bar_popup
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {bizManagerSetupWidgetShowMessageCompleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerSetupWidgetShowMessageComplete = function (params) {
        return this.bi.log(__assign({ evid: 575 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersSaveOrUpdateTriggerParams
    * @property {string} action_service_name - 'Send email to visitors' / 'Send a chat message' / 'Create a task' / ....
    * @property {string} custom_name - custom name
    * @property {string} flowType - flow in which the save happens: {create, edit}
    * @property {boolean} is_suspended - will be suspended if user don't has Ascend and already has 3 active rules
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    * @property {GUID} rule_id - if this trigger already customized, null if it first time customization
    * @property {number} src - deprecated
    * @property {string} trigger_activity_type - 'Members Area' / 'Contact Form' / 'Price Quotes' / 'Wix Forms' / ...
    * @property {string} units - units of rule
    * @property {string} value - value of rule
    **/
    /**
     * Name: Automations > save or update trigger. Evid: 209.
     * Event description: Name your recipe click.
    
     * action_service_name - Type: string. Desc: 'Send email to visitors' / 'Send a chat message' / 'Create a task' / ....
     *
     * custom_name - Type: string. Desc: custom name
     *
     * flowType - Type: string. Desc: flow in which the save happens: {create, edit}
     *
     * is_suspended - Type: bool. Desc: will be suspended if user don't has Ascend and already has 3 active rules
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     *
     * rule_id - Type: guid. Desc: if this trigger already customized, null if it first time customization
     *
     * src - Type: numeric. Desc: deprecated
     *
     * trigger_activity_type - Type: string. Desc: 'Members Area' / 'Contact Form' / 'Price Quotes' / 'Wix Forms' / ...
     *
     * units - Type: string. Desc: units of rule
     *
     * value - Type: string. Desc: value of rule
     * @param {dashboardTriggersSaveOrUpdateTriggerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersSaveOrUpdateTrigger = function (params) {
        return this.bi.log(__assign({ evid: 209 }, params));
    };
    /**
    * @typedef {Object} notificationsShowMobileDialogParams
    * @property {boolean} is_installed_oneapp - true , false
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > Show Mobile dialog. Evid: 277.
     * Event description: allow to enable desktop notifications after clicking on "turn on".
    
     * is_installed_oneapp - Type: bool. Desc: true , false
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {notificationsShowMobileDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsShowMobileDialog = function (params) {
        return this.bi.log(__assign({ evid: 277 }, params));
    };
    /**
    * @typedef {Object} bizmgrErrorPageClickParams
    * @property {string} error_location - specifies the location in page: header/sidebar/app/sidepanel etc. includes error type. different for refresh/load types of actions
    * @property {string} error_name - null when it's a system error, permissions when the error is permission related (user has no permission for the page)
    * @property {string} hosting - --
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: bizmgr > error page click. Evid: 295.
     * Event description: When a user clicks on the CTA in the error page.
    
     * error_location - Type: string. Desc: specifies the location in page: header/sidebar/app/sidepanel etc. includes error type. different for refresh/load types of actions
     *
     * error_name - Type: string. Desc: null when it's a system error, permissions when the error is permission related (user has no permission for the page)
     *
     * hosting - Type: string. Desc: --
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {bizmgrErrorPageClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizmgrErrorPageClick = function (params) {
        return this.bi.log(__assign({ evid: 295 }, params));
    };
    /**
    * @typedef {Object} rolesAddRoleInviteClickSuccessParams
    * @property {string} hosting - Editor / MA
    * @property {string} invite_email - invited email
    * @property {string} invite_role - invited role
    * @property {boolean} is_blog_shown - deprecated from 2/6/19 and replaced by roles_displayed field
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab dashboard/authorization/my sites
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    * @property {number} src - null
    **/
    /**
     * Name: Roles - add role - invite click success. Evid: 353.
     * Event description: user clicked on 'invite' in the add role window - success response.
    
     * hosting - Type: string. Desc: Editor / MA
     *
     * invite_email - Type: string. Desc: invited email
     *
     * invite_role - Type: string. Desc: invited role
     *
     * is_blog_shown - Type: bool. Desc: deprecated from 2/6/19 and replaced by roles_displayed field
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab dashboard/authorization/my sites
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     *
     * src - Type: numeric.
     * @param {rolesAddRoleInviteClickSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAddRoleInviteClickSuccess = function (params) {
        return this.bi.log(__assign({ evid: 353 }, params));
    };
    /**
    * @typedef {Object} accountSettingsDisableSocialAccountConfirmationModalLoadParams
    * @property {string} platform - null
    * @property {string} provider_id - the social provider the user tried to disable (apple/google/facebook)
    **/
    /**
     * Name: Account Settings -  Disable Social Account - Confirmation Modal Load. Evid: 1119.
     * Event description: When the user clicks on "disable" Apple social login, and they don't have any other social login connected, he will see a modal with confirmation message.
    
     * platform - Type: string.
     *
     * provider_id - Type: string. Desc: the social provider the user tried to disable (apple/google/facebook)
     * @param {accountSettingsDisableSocialAccountConfirmationModalLoadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsDisableSocialAccountConfirmationModalLoad = function (params) {
        return this.bi.log(__assign({ evid: 1119 }, params));
    };
    /**
    * @typedef {Object} quotesPreviewQuoteParams
    * @property {string} msid - msid
    * @property {string} origin - my quotes, edit quotes
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    * @property {string} source - from where the quote open {feed, more-->quotes}
    **/
    /**
     * Name: Quotes - Preview Quote. Evid: 76.
     * Event description: preview quote.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my quotes, edit quotes
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     *
     * source - Type: string. Desc: from where the quote open {feed, more-->quotes}
     * @param {quotesPreviewQuoteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPreviewQuote = function (params) {
        return this.bi.log(__assign({ evid: 76 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersServerSaveOrUpdateTriggerFailedParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe_name
    * @property {GUID} rule_id - rule
    * @property {number} src - null
    **/
    /**
     * Name: Automations Server > save or update trigger failed. Evid: 221.
     * Event description: save or update trigger failed.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe_name
     *
     * rule_id - Type: guid. Desc: rule
     *
     * src - Type: numeric.
     * @param {dashboardTriggersServerSaveOrUpdateTriggerFailedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersServerSaveOrUpdateTriggerFailed = function (params) {
        return this.bi.log(__assign({ evid: 221 }, params));
    };
    /**
    * @typedef {Object} teamManagementAddMembersInviteClickSuccessParams
    * @property {string} invite_role - (please note that using the toggle changes role desc) the role the user sends to the invitees
    * @property {string} origin - where the dialog is opened from
    * @property {string} platform - null
    **/
    /**
     * Name: Team Management - add members - invite click success. Evid: 176.
     * Event description: When a user clicks on 'send invites' in the add member window - success response.
    
     * invite_role - Type: string. Desc: (please note that using the toggle changes role desc) the role the user sends to the invitees
     *
     * origin - Type: string. Desc: where the dialog is opened from
     *
     * platform - Type: string.
     * @param {teamManagementAddMembersInviteClickSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementAddMembersInviteClickSuccess = function (params) {
        return this.bi.log(__assign({ evid: 176 }, params));
    };
    /**
    * @typedef {Object} quotesPrintInvoice245Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my invoices for users
    * @property {string} paymentType - 'Recurring','One Time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Print Invoice. Evid: 245.
     * Event description: Quotes - Print Invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my invoices for users
     *
     * paymentType - Type: string. Desc: 'Recurring','One Time'
     *
     * platform - Type: string.
     * @param {quotesPrintInvoice245Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPrintInvoice245 = function (params) {
        return this.bi.log(__assign({ evid: 245 }, params));
    };
    /**
    * @typedef {Object} automationsAddFollowUpActionClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > Add follow up action click. Evid: 736.
     * Event description: Automations > Add follow up action click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsAddFollowUpActionClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsAddFollowUpActionClick = function (params) {
        return this.bi.log(__assign({ evid: 736 }, params));
    };
    /**
    * @typedef {Object} automationsBanner3PresentedMembersChatParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations -> Banner 3 presented - members=>chat. Evid: 239.
     * Event description: Automations -> Banner presented - members=>chat.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsBanner3PresentedMembersChatParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBanner3PresentedMembersChat = function (params) {
        return this.bi.log(__assign({ evid: 239 }, params));
    };
    /**
    * @typedef {Object} quotesRemoveProductParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {number} product_id - product_id
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - remove Product. Evid: 467.
     * Event description: Quotes - remove Product.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * product_id - Type: numeric. Desc: product_id
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesRemoveProductParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesRemoveProduct = function (params) {
        return this.bi.log(__assign({ evid: 467 }, params));
    };
    /**
    * @typedef {Object} rolesEditRoleUpdateClickParams
    * @property {string} hosting - Editor / MA
    * @property {boolean} is_accepted - true if edit is after invite was accepted
    * @property {boolean} is_blog_shown - true if shown (blog manager appears only for sites with blog)
    * @property {GUID} msid - msid
    * @property {string} new_role - new role
    * @property {string} origin - origin page
    * @property {string} platform - null
    * @property {string} prev_role - previous role
    * @property {string} roles_displayed - list of roles displayed to the user
    **/
    /**
     * Name: Roles - edit role - update click. Evid: 367.
     * Event description: user clicked on 'update' in the edit role window - success response.
    
     * hosting - Type: string. Desc: Editor / MA
     *
     * is_accepted - Type: bool. Desc: true if edit is after invite was accepted
     *
     * is_blog_shown - Type: bool. Desc: true if shown (blog manager appears only for sites with blog)
     *
     * msid - Type: guid. Desc: msid
     *
     * new_role - Type: string. Desc: new role
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     *
     * prev_role - Type: string. Desc: previous role
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     * @param {rolesEditRoleUpdateClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesEditRoleUpdateClick = function (params) {
        return this.bi.log(__assign({ evid: 367 }, params));
    };
    /**
    * @typedef {Object} notificationsDisplayDesktopNotificationsBannerParams
    * @property {string} feed_name - All Sites/This Site /Float
    * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > display desktop notifications banner. Evid: 280.
     * Event description: display desktop notifications banner.
    
     * feed_name - Type: string. Desc: All Sites/This Site /Float
     *
     * origin - Type: string. Desc: (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {notificationsDisplayDesktopNotificationsBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsDisplayDesktopNotificationsBanner = function (params) {
        return this.bi.log(__assign({ evid: 280 }, params));
    };
    /**
    * @typedef {Object} closeTooltipPopUpParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - Close tooltip pop up. Evid: 339.
     * Event description: Event fires when users closes the tooltip..
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {closeTooltipPopUpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.closeTooltipPopUp = function (params) {
        return this.bi.log(__assign({ evid: 339 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesSettingsClickParams
    * @property {GUID} msid - msid
    * @property {string} origin - holds the origin of click
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - Invoices - Settings click. Evid: 1313.
     * Event description: Financial Services Settings - Invoices - Settings click.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: holds the origin of click
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesSettingsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesSettingsClick = function (params) {
        return this.bi.log(__assign({ evid: 1313 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsSeoClickEnterAddressManuallyParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {string} value - Link URL
    **/
    /**
     * Name: dashboard > site settings > seo > click enter address Manually. Evid: 323.
     * Event description: user clicked on a link 'Enter address manually' in SEO section.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * value - Type: string. Desc: Link URL
     * @param {dashboardSiteSettingsSeoClickEnterAddressManuallyParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsSeoClickEnterAddressManually = function (params) {
        return this.bi.log(__assign({ evid: 323 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsExperienceDisplayedParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} origin - name of previous tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site settings > experience displayed. Evid: 311.
     * Event description: what is the experience of the user when he sees the page.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of previous tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardSiteSettingsExperienceDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsExperienceDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 311 }, params));
    };
    /**
    * @typedef {Object} quotesEditProductClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Edit product click. Evid: 417.
     * Event description: edit product.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesEditProductClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEditProductClick = function (params) {
        return this.bi.log(__assign({ evid: 417 }, params));
    };
    /**
    * @typedef {Object} ascendPagePageNavigationClickParams
    * @property {string} category - marketing / customer
    * @property {string} item_name - inbox /chat/seo wiz/ coupons etc.
    * @property {number} loading_time - loading_time
    * @property {string} platform - null
    * @property {string} prev_view - prev_view
    * @property {string} referral_info - referral_info
    **/
    /**
     * Name: ascend page - Page navigation - click. Evid: 120.
     * Event description: click on one of the items in the page.
    
     * category - Type: string. Desc: marketing / customer
     *
     * item_name - Type: string. Desc: inbox /chat/seo wiz/ coupons etc.
     *
     * loading_time - Type: numeric. Desc: loading_time
     *
     * platform - Type: string.
     *
     * prev_view - Type: string. Desc: prev_view
     *
     * referral_info - Type: string. Desc: referral_info
     * @param {ascendPagePageNavigationClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPagePageNavigationClick = function (params) {
        return this.bi.log(__assign({ evid: 120 }, params));
    };
    /**
    * @typedef {Object} bizManagerFinishLoadingParams
    * @property {string} app_id - --
    * @property {string} hosting - from where the user opened Biz manager
    * @property {boolean} initial_load - first load
    * @property {number} loading_time - loading time of page
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - finish loading. Evid: 562.
     * Event description: Biz Manager loaded successfully.
    
     * app_id - Type: string. Desc: --
     *
     * hosting - Type: string. Desc: from where the user opened Biz manager
     *
     * initial_load - Type: bool. Desc: first load
     *
     * loading_time - Type: numeric. Desc: loading time of page
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerFinishLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerFinishLoading = function (params) {
        return this.bi.log(__assign({ evid: 562 }, params));
    };
    /**
    * @typedef {Object} managerFullStoryRecordingStartedParams
    * @property {string} full_story_url - FullStory url
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - FullStory recording started. Evid: 588.
     * Event description: FullStory started recording session.
    
     * full_story_url - Type: string. Desc: FullStory url
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {managerFullStoryRecordingStartedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.managerFullStoryRecordingStarted = function (params) {
        return this.bi.log(__assign({ evid: 588 }, params));
    };
    /**
    * @typedef {Object} rolesAddRoleInviteClickFailParams
    * @property {string} error_desc - error description
    * @property {string} hosting - MA / Editor
    * @property {string} invite_email - invited email, empty if email isn't valid
    * @property {string} invite_role - invited role
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab dashboard/authorization/my sites
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    * @property {number} src - null
    **/
    /**
     * Name: Roles - add role - invite click fail. Evid: 355.
     * Event description: user clicked on 'invite' in the add role window - fail response.
    
     * error_desc - Type: string. Desc: error description
     *
     * hosting - Type: string. Desc: MA / Editor
     *
     * invite_email - Type: string. Desc: invited email, empty if email isn't valid
     *
     * invite_role - Type: string. Desc: invited role
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab dashboard/authorization/my sites
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     *
     * src - Type: numeric.
     * @param {rolesAddRoleInviteClickFailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAddRoleInviteClickFail = function (params) {
        return this.bi.log(__assign({ evid: 355 }, params));
    };
    /**
    * @typedef {Object} myAccountEditSiteParams
    * @property {string} ds_origin - null
    * @property {GUID} esi - null
    * @property {string} hosting - hosting
    * @property {number} src - null
    * @property {GUID} msid - null
    * @property {string} origin - {site_list_top, site_list_bottom, top_bar, account_templates,...}
    * @property {string} place - origin inside page
    * @property {string} platform - null
    * @property {GUID} site_id - null
    * @property {number} site_type_enriched - null
    * @property {undefined} site_type - null
    * @property {undefined} siteType - null
    * @property {number} artificial_src - null
    **/
    /**
     * Name: my account -> Edit site. Evid: 71.
     * Event description: events from 5/71 are mapped into 2/71 - don't use!.
    
     * ds_origin - Type: string.
     *
     * esi - Type: guid.
     *
     * hosting - Type: string. Desc: hosting
     *
     * src - Type: numeric.
     *
     * msid - Type: guid.
     *
     * origin - Type: string. Desc: {site_list_top, site_list_bottom, top_bar, account_templates,...}
     *
     * place - Type: string. Desc: origin inside page
     *
     * platform - Type: string.
     *
     * site_id - Type: guid.
     *
     * site_type_enriched - Type: numeric.
     *
     * site_type - Type: map.
     *
     * siteType - Type: map.
     *
     * artificial_src - Type: numeric.
     * @param {myAccountEditSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.myAccountEditSite = function (params) {
        return this.bi.log(__assign({ evid: 71 }, params));
    };
    /**
    * @typedef {Object} quotesCancelFromInsideTheInvoiceCreationParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Cancel from inside the invoice creation. Evid: 483.
    
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesCancelFromInsideTheInvoiceCreationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCancelFromInsideTheInvoiceCreation = function (params) {
        return this.bi.log(__assign({ evid: 483 }, params));
    };
    /**
    * @typedef {Object} engageEmailSettingsSaveChangesClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - edit tax. Evid: 542.
     * Event description: Quotes - Settings - edit tax.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {engageEmailSettingsSaveChangesClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.engageEmailSettingsSaveChangesClick = function (params) {
        return this.bi.log(__assign({ evid: 542 }, params));
    };
    /**
    * @typedef {Object} quotesDownloadPdfParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} invoiceSource - by def_app_id
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my invoices for users
    * @property {string} paymentType - 'Recurring','One Time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Download PDF. Evid: 449.
     * Event description: click on save as PDF.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * invoiceSource - Type: string. Desc: by def_app_id
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my invoices for users
     *
     * paymentType - Type: string. Desc: 'Recurring','One Time'
     *
     * platform - Type: string.
     * @param {quotesDownloadPdfParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDownloadPdf = function (params) {
        return this.bi.log(__assign({ evid: 449 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersGetTheAppPopUpGoParams
    * @property {GUID} app_id - app_id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Get the app PopUp Go. Evid: 204.
     * Event description: Get the app PopUp Go.
    
     * app_id - Type: guid. Desc: app_id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * src - Type: numeric.
     * @param {dashboardTriggersGetTheAppPopUpGoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersGetTheAppPopUpGo = function (params) {
        return this.bi.log(__assign({ evid: 204 }, params));
    };
    /**
    * @typedef {Object} ascendPpThankYouPageParams
    * @property {GUID} app_id - app_id
    * @property {number} cycleId - cycle id
    * @property {string} cycle_name - Cycle bought
    * @property {string} package_id - package id
    * @property {string} package_name - package bought
    * @property {string} platform - web/native
    * @property {string} type - Page View / Click go to Dashboard
    **/
    /**
     * Name: Ascend PP - Thank you Page. Evid: 191.
     * Event description: Thank you page after purchasing Ascend PP.
    
     * app_id - Type: guid. Desc: app_id
     *
     * cycleId - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: Cycle bought
     *
     * package_id - Type: string. Desc: package id
     *
     * package_name - Type: string. Desc: package bought
     *
     * platform - Type: string. Desc: web/native
     *
     * type - Type: string. Desc: Page View / Click go to Dashboard
     * @param {ascendPpThankYouPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpThankYouPage = function (params) {
        return this.bi.log(__assign({ evid: 191 }, params));
    };
    /**
    * @typedef {Object} crmHomeIntegrationsMarketingViewAllParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - integrations - marketing view all. Evid: 860.
     * Event description: CRM Home - integrations - marketing view all.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeIntegrationsMarketingViewAllParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeIntegrationsMarketingViewAll = function (params) {
        return this.bi.log(__assign({ evid: 860 }, params));
    };
    /**
    * @typedef {Object} quotesGetTheWixAppBannerDisplayedParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name {get wix app}
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Get the Wix app banner displayed. Evid: 474.
     * Event description: Get the Wix app banner is displayed in invoices app.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name {get wix app}
     *
     * platform - Type: string.
     * @param {quotesGetTheWixAppBannerDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesGetTheWixAppBannerDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 474 }, params));
    };
    /**
    * @typedef {Object} crmHomeChooseContactFromWidgetParams
    * @property {GUID} contactId - contactId
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - choose contact from widget. Evid: 747.
     * Event description: CRM Home - choose contact from widget.
    
     * contactId - Type: guid. Desc: contactId
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeChooseContactFromWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeChooseContactFromWidget = function (params) {
        return this.bi.log(__assign({ evid: 747 }, params));
    };
    /**
    * @typedef {Object} crmHomeWorkflowsWidgetGoToWorkflowsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - workflows widget - go to workflows. Evid: 844.
     * Event description: CRM Home - workflows widget - go to workflows.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeWorkflowsWidgetGoToWorkflowsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeWorkflowsWidgetGoToWorkflows = function (params) {
        return this.bi.log(__assign({ evid: 844 }, params));
    };
    /**
    * @typedef {Object} generalExposureEventParams
    * @property {string} exposure_name - exposure_name
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: General - Exposure event. Evid: 149.
     * Event description: general exposure event . can be used in several cases.
    
     * exposure_name - Type: string. Desc: exposure_name
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {generalExposureEventParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.generalExposureEvent = function (params) {
        return this.bi.log(__assign({ evid: 149 }, params));
    };
    /**
    * @typedef {Object} rolesAddRoleCloseWindowParams
    * @property {string} hosting - Editor / MA
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab dashboard/authorization/my sites
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - add role - close window. Evid: 351.
     * Event description: user closed add role window.
    
     * hosting - Type: string. Desc: Editor / MA
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab dashboard/authorization/my sites
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesAddRoleCloseWindowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAddRoleCloseWindow = function (params) {
        return this.bi.log(__assign({ evid: 351 }, params));
    };
    /**
    * @typedef {Object} mobileDashboardCreateNewSiteParams
    * @property {string} platform - null
    * @property {string} view - siteless/ my-sites
    **/
    /**
     * Name: Mobile Dashboard > create new site. Evid: 108.
     * Event description: when a user creates a new site from the mobile dashboard.
    
     * platform - Type: string.
     *
     * view - Type: string. Desc: siteless/ my-sites
     * @param {mobileDashboardCreateNewSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileDashboardCreateNewSite = function (params) {
        return this.bi.log(__assign({ evid: 108 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsPriceQuotesBusinessDetailsSiteSettingsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - Price Quotes - business details - site settings. Evid: 1310.
     * Event description: Financial Services Settings - Price Quotes - business details - site settings.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsPriceQuotesBusinessDetailsSiteSettingsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsPriceQuotesBusinessDetailsSiteSettings = function (params) {
        return this.bi.log(__assign({ evid: 1310 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteClickCancelBackOnTransferSiteActionWindowParams
    * @property {string} hosting - ma/editor
    * @property {GUID} msid - --
    * @property {string} name - name of quick action (transfer,etc.)
    * @property {string} origin - --
    * @property {string} stage_process - {transfer_details_summary, transfer_options_select}
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site -> click cancel/back on transfer site action window. Evid: 47.
     * Event description: when user click on quick action, and then click on cancel when the quick action window is opened.
    
     * hosting - Type: string. Desc: ma/editor
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: name of quick action (transfer,etc.)
     *
     * origin - Type: string. Desc: --
     *
     * stage_process - Type: string. Desc: {transfer_details_summary, transfer_options_select}
     *
     * platform - Type: string.
     * @param {dashboardSiteClickCancelBackOnTransferSiteActionWindowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteClickCancelBackOnTransferSiteActionWindow = function (params) {
        return this.bi.log(__assign({ evid: 47 }, params));
    };
    /**
    * @typedef {Object} invoicesAddAProductVariantOpenModalParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - Add a product Variant - open modal. Evid: 1209.
     * Event description: Invoices - Add a product Variant - open modal.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesAddAProductVariantOpenModalParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesAddAProductVariantOpenModal = function (params) {
        return this.bi.log(__assign({ evid: 1209 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorIsOpenParams
    * @property {number} loading_time - loading_time
    * @property {GUID} msid - metasite id
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    * @property {string} site_list - a list with all the msids shown to the user, the first item is the first item, second item is the second msid and so on…)
    **/
    /**
     * Name: Dashboard > Site Selector Is Open. Evid: 1377.
     * Event description: When the site selector is opened successfully (the image is loaded and there is no error).
    
     * loading_time - Type: numeric. Desc: loading_time
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     *
     * site_list - Type: string. Desc: a list with all the msids shown to the user, the first item is the first item, second item is the second msid and so on…)
     * @param {dashboardSiteSelectorIsOpenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorIsOpen = function (params) {
        return this.bi.log(__assign({ evid: 1377 }, params));
    };
    /**
    * @typedef {Object} crmHomeTopCarouselMainCtaClickParams
    * @property {string} bannerName - which banner was clicked
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - Top carousel main CTA click. Evid: 1385.
     * Event description: CRM Home - Top carousel main CTA click.
    
     * bannerName - Type: string. Desc: which banner was clicked
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeTopCarouselMainCtaClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeTopCarouselMainCtaClick = function (params) {
        return this.bi.log(__assign({ evid: 1385 }, params));
    };
    /**
    * @typedef {Object} notificationsResolveAlertNotificationParams
    * @property {string} channel - deprecated
    * @property {string} msid - deprecated
    * @property {string} notificationid - notificationid
    * @property {string} platform - null
    * @property {string} resolve_type - resolve/ revoke
    * @property {string} template_id - template_id
    **/
    /**
     * Name: Notifications > Resolve alert notification. Evid: 282.
     * Event description: display desktop notifications banner.
    
     * channel - Type: string. Desc: deprecated
     *
     * msid - Type: string. Desc: deprecated
     *
     * notificationid - Type: string. Desc: notificationid
     *
     * platform - Type: string.
     *
     * resolve_type - Type: string. Desc: resolve/ revoke
     *
     * template_id - Type: string. Desc: template_id
     * @param {notificationsResolveAlertNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsResolveAlertNotification = function (params) {
        return this.bi.log(__assign({ evid: 282 }, params));
    };
    /**
    * @typedef {Object} quotesSettingsNewTaxPageSaveParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - create,edit
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - New tax page - Save. Evid: 434.
     * Event description: Settings - New tax page - Save successful.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create,edit
     *
     * platform - Type: string.
     * @param {quotesSettingsNewTaxPageSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSettingsNewTaxPageSave = function (params) {
        return this.bi.log(__assign({ evid: 434 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsPageViewParams
    * @property {string} alert_sections - json of sections and sub-items that were loaded to settings with the red badge. For example: { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
    * @property {string} alertStatus - If the red badge is shown in the sidebar then "true", if not "false"
    * @property {string} available_sections - json of sections and sub-items that were loaded to settings. For example:  { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
    * @property {string} focus_section - section name of the automatic scrolling if null then the page wasn't automated scrolled
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of tab
    * @property {string} origin - name of previous tab
    * @property {string} place - deprecated
    * @property {string} platform - null
    * @property {string} seen_sections - list of sections the user sees above the fold
    * @property {number} src - null
    * @property {string} unseen_sections - list of sections that loaded in settings lobby but the user is not seeing in the page loading separated by comma
    **/
    /**
     * Name: dashboard > site settings > page view. Evid: 310.
     * Event description: site settings page view.
    
     * alert_sections - Type: string. Desc: json of sections and sub-items that were loaded to settings with the red badge. For example: { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
     *
     * alertStatus - Type: string. Desc: If the red badge is shown in the sidebar then "true", if not "false"
     *
     * available_sections - Type: string. Desc: json of sections and sub-items that were loaded to settings. For example:  { ‘Site-details’: ‘connect-domain,compare-plans,get a business email’, ’General’: ‘website settings, business info, language and region’, ‘Ecommerce’: ‘accept payments, store shipping...’ ‘Bookings’:... ‘Communication’:... ... }
     *
     * focus_section - Type: string. Desc: section name of the automatic scrolling if null then the page wasn't automated scrolled
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of tab
     *
     * origin - Type: string. Desc: name of previous tab
     *
     * place - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * seen_sections - Type: string. Desc: list of sections the user sees above the fold
     *
     * src - Type: numeric.
     *
     * unseen_sections - Type: string. Desc: list of sections that loaded in settings lobby but the user is not seeing in the page loading separated by comma
     * @param {dashboardSiteSettingsPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsPageView = function (params) {
        return this.bi.log(__assign({ evid: 310 }, params));
    };
    /**
    * @typedef {Object} dashboardAccountSettingsClickSendConfirmationParams
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > account settings -> click 'send confirmation'. Evid: 68.
     * Event description: user click send confirmation in account settings.
    
     * platform - Type: string.
     * @param {dashboardAccountSettingsClickSendConfirmationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardAccountSettingsClickSendConfirmation = function (params) {
        return this.bi.log(__assign({ evid: 68 }, params));
    };
    /**
    * @typedef {Object} dashboardFinishLoadingParams
    * @property {string} app_id - application id
    * @property {string} app_ids - all applications installed on Biz Mgr
    * @property {string} hosting - dashboard/editor/onboarding
    * @property {boolean} initial_load - intial load
    * @property {boolean} is_account_mgr - true/ false
    * @property {boolean} is_biz_mgr - true if page is loaded when Biz mgr is active
    * @property {boolean} is_pro - not in use
    * @property {number} loading_time - loading time of page (from 300 )
    * @property {number} loading_time_from_first_interaction - loading_time_from_first_interaction (309)
    * @property {number} loading_time_from_module - Loading time from module start loading (from 564)
    * @property {number} loading_time_from_performance_now - loading_time_from_performance_now  when server start to load. the real beginning
    * @property {number} loading_time_from_start - loading time from start loading Bizmgr (from 561)
    * @property {string} module_id - *not in use*
    * @property {GUID} msid - null
    * @property {string} origin - origin
    * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
    * @property {string} platform - null
    * @property {string} prev_sub_view - previous sub view
    * @property {string} prev_view - origin view
    * @property {string} referral_info - specific button triggered the the view loading
    * @property {number} screen_height - screen height
    * @property {number} screen_width - screen width
    * @property {number} src - null
    * @property {string} sub_view - --
    * @property {string} view - requested view
    * @property {string} view_mode - grid/list-view
    * @property {number} window_height - --
    * @property {number} window_width - --
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: dashboard > finish loading. Evid: 302.
    
    
     * app_id - Type: string. Desc: application id
     *
     * app_ids - Type: string. Desc: all applications installed on Biz Mgr
     *
     * hosting - Type: string. Desc: dashboard/editor/onboarding
     *
     * initial_load - Type: bool. Desc: intial load
     *
     * is_account_mgr - Type: bool. Desc: true/ false
     *
     * is_biz_mgr - Type: bool. Desc: true if page is loaded when Biz mgr is active
     *
     * is_pro - Type: bool. Desc: not in use
     *
     * loading_time - Type: numeric. Desc: loading time of page (from 300 )
     *
     * loading_time_from_first_interaction - Type: numeric. Desc: loading_time_from_first_interaction (309)
     *
     * loading_time_from_module - Type: numeric. Desc: Loading time from module start loading (from 564)
     *
     * loading_time_from_performance_now - Type: numeric. Desc: loading_time_from_performance_now  when server start to load. the real beginning
     *
     * loading_time_from_start - Type: numeric. Desc: loading time from start loading Bizmgr (from 561)
     *
     * module_id - Type: string. Desc: *not in use*
     *
     * msid - Type: guid.
     *
     * origin - Type: string. Desc: origin
     *
     * origin_app_id - Type: string. Desc: origin_app_id (what app opened the bizmgr)
     *
     * platform - Type: string.
     *
     * prev_sub_view - Type: string. Desc: previous sub view
     *
     * prev_view - Type: string. Desc: origin view
     *
     * referral_info - Type: string. Desc: specific button triggered the the view loading
     *
     * screen_height - Type: numeric. Desc: screen height
     *
     * screen_width - Type: numeric. Desc: screen width
     *
     * src - Type: numeric.
     *
     * sub_view - Type: string. Desc: --
     *
     * view - Type: string. Desc: requested view
     *
     * view_mode - Type: string. Desc: grid/list-view
     *
     * window_height - Type: numeric. Desc: --
     *
     * window_width - Type: numeric. Desc: --
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {dashboardFinishLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardFinishLoading = function (params) {
        return this.bi.log(__assign({ evid: 302 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesSiteHomeAlertMessageFromPremiumDisplayParams
    * @property {GUID} alert_id - deprecated
    * @property {string} alert_type - alert_message
    * @property {string} hosting - MA/editor
    * @property {string} platform - null
    * @property {string} premium_alert_id - alert received from premium
    **/
    /**
     * Name: dashboard > My Sites/site-home - alert message from premium display. Evid: 157.
     * Event description: when a user opens my-sites/site-home he receives a message based on notifications that transferred from premiums. This event collects  about what shown to user.
    
     * alert_id - Type: guid. Desc: deprecated
     *
     * alert_type - Type: string. Desc: alert_message
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * platform - Type: string.
     *
     * premium_alert_id - Type: string. Desc: alert received from premium
     * @param {dashboardMySitesSiteHomeAlertMessageFromPremiumDisplayParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesSiteHomeAlertMessageFromPremiumDisplay = function (params) {
        return this.bi.log(__assign({ evid: 157 }, params));
    };
    /**
    * @typedef {Object} badgeNotificationParams
    * @property {GUID} msid - msid
    * @property {number} new_notifications - number in the badge
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - Badge notification. Evid: 340.
     * Event description: a badge with new notifications is shown to the user.
    
     * msid - Type: guid. Desc: msid
     *
     * new_notifications - Type: numeric. Desc: number in the badge
     *
     * platform - Type: string.
     * @param {badgeNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.badgeNotification = function (params) {
        return this.bi.log(__assign({ evid: 340 }, params));
    };
    /**
    * @typedef {Object} quotesAddPaymentPageCancelParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - my invoices,preview
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Add payment page - Cancel. Evid: 426.
     * Event description: cancel in add payment page (for every close (cancel, x, background click)).
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices,preview
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesAddPaymentPageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddPaymentPageCancel = function (params) {
        return this.bi.log(__assign({ evid: 426 }, params));
    };
    /**
    * @typedef {Object} dashboardShowSideBarParams
    * @property {string} action - open/close
    * @property {boolean} alwaysOpen - if the side bar always open at application (not relevant anymore)
    * @property {GUID} msid - msid
    * @property {string} selectedItem - name of application ('mobile sidebar' in case of mobile web)
    * @property {string} page_view - my sites/site home
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > show side bar. Evid: 35.
     * Event description: send event each time the side bar is being shown ( repurposed for mobile web sidebar).
    
     * action - Type: string. Desc: open/close
     *
     * alwaysOpen - Type: bool. Desc: if the side bar always open at application (not relevant anymore)
     *
     * msid - Type: guid. Desc: msid
     *
     * selectedItem - Type: string. Desc: name of application ('mobile sidebar' in case of mobile web)
     *
     * page_view - Type: string. Desc: my sites/site home
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardShowSideBarParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardShowSideBar = function (params) {
        return this.bi.log(__assign({ evid: 35 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsDomainSslOptionParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {string} mode - {Turn on SSL,Remove SSL}
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site settings > Domain > SSL Option. Evid: 321.
     * Event description: User choose to Activate/ Deactivate the  HTTPS option.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * mode - Type: string. Desc: {Turn on SSL,Remove SSL}
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     * @param {dashboardSiteSettingsDomainSslOptionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsDomainSslOption = function (params) {
        return this.bi.log(__assign({ evid: 321 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersGetTheAppPopUpCloseParams
    * @property {GUID} app_id - app_id
    * @property {GUID} msid - msid
    * @property {string} origin - origin page
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Get the app PopUp close. Evid: 203.
     * Event description: Get the app PopUp close.
    
     * app_id - Type: guid. Desc: app_id
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * src - Type: numeric.
     * @param {dashboardTriggersGetTheAppPopUpCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersGetTheAppPopUpClose = function (params) {
        return this.bi.log(__assign({ evid: 203 }, params));
    };
    /**
    * @typedef {Object} siteHistoryViewerNotLoadedParams
    * @property {string} platform - null
    * @property {string} referralInfo - editor / home
    **/
    /**
     * Name: Site History - Viewer not loaded. Evid: 56.
     * Event description: error on loading of the viewer iframe in site history.
    
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: editor / home
     * @param {siteHistoryViewerNotLoadedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.siteHistoryViewerNotLoaded = function (params) {
        return this.bi.log(__assign({ evid: 56 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetMoreActionChooseAnActionParams
    * @property {string} action - action name
    * @property {GUID} contactId - contact id
    * @property {GUID} invoiceId - invoice id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - more action - choose an action. Evid: 1321.
     * Event description: Invoices - widget - more action - choose an action.
    
     * action - Type: string. Desc: action name
     *
     * contactId - Type: guid. Desc: contact id
     *
     * invoiceId - Type: guid. Desc: invoice id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetMoreActionChooseAnActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetMoreActionChooseAnAction = function (params) {
        return this.bi.log(__assign({ evid: 1321 }, params));
    };
    /**
    * @typedef {Object} quotesBulkActionsDownloadPdfParams
    * @property {string} filter - type of filter
    * @property {string} msid - msid
    * @property {string} number - number of invoices choose or all
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - bulk actions - Download PDF. Evid: 397.
     * Event description: Quotes - Create invoice - Toggle Recurring.
    
     * filter - Type: string. Desc: type of filter
     *
     * msid - Type: string. Desc: msid
     *
     * number - Type: string. Desc: number of invoices choose or all
     *
     * platform - Type: string.
     * @param {quotesBulkActionsDownloadPdfParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesBulkActionsDownloadPdf = function (params) {
        return this.bi.log(__assign({ evid: 397 }, params));
    };
    /**
    * @typedef {Object} notificationGroupNotificationIsDisplayedParams
    * @property {string} channel - null
    * @property {string} contact_id - contact_id guid
    * @property {string} feed_name - All sites/This site /float
    * @property {string} notification_id_shown - the shown notification id
    * @property {string} notification_ids - list of the notification ids
    * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {number} page_number - page number - each page is limited to 30 notifications
    * @property {string} platform - --
    **/
    /**
     * Name: Notification -Group Notification is displayed. Evid: 387.
     * Event description: user opens the dialog and group notification is seen..
    
     * channel - Type: string.
     *
     * contact_id - Type: string. Desc: contact_id guid
     *
     * feed_name - Type: string. Desc: All sites/This site /float
     *
     * notification_id_shown - Type: string. Desc: the shown notification id
     *
     * notification_ids - Type: string. Desc: list of the notification ids
     *
     * origin - Type: string. Desc: MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * page_number - Type: numeric. Desc: page number - each page is limited to 30 notifications
     *
     * platform - Type: string. Desc: --
     * @param {notificationGroupNotificationIsDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationGroupNotificationIsDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 387 }, params));
    };
    /**
    * @typedef {Object} rolesAddRoleInviteClickParams
    * @property {string} hosting - MA / Editor
    * @property {string} invite_email - not reported (PII)
    * @property {string} invite_role - invited role
    * @property {boolean} is_valid_email - email validation
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab dashboard/authorization/my sites
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    * @property {number} src - null
    **/
    /**
     * Name: Roles - add role - invite click. Evid: 352.
     * Event description: user clicked on 'invite' in the add role window.
    
     * hosting - Type: string. Desc: MA / Editor
     *
     * invite_email - Type: string. Desc: not reported (PII)
     *
     * invite_role - Type: string. Desc: invited role
     *
     * is_valid_email - Type: bool. Desc: email validation
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab dashboard/authorization/my sites
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     *
     * src - Type: numeric.
     * @param {rolesAddRoleInviteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAddRoleInviteClick = function (params) {
        return this.bi.log(__assign({ evid: 352 }, params));
    };
    /**
    * @typedef {Object} quotesClickOnCreateLinkFromMoreActionsParams
    * @property {GUID} invoiceId - invoiceId
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: dummy-name. Evid: 729.
     * Event description: Quotes - click on create link from more actions.
    
     * invoiceId - Type: guid. Desc: invoiceId
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesClickOnCreateLinkFromMoreActionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickOnCreateLinkFromMoreActions = function (params) {
        return this.bi.log(__assign({ evid: 729 }, params));
    };
    /**
    * @typedef {Object} dashboardUserSeeFeedParams
    * @property {boolean} aboveTheFold - was the item full viewed above the fold
    * @property {GUID} campaignId - unique identifier of CMS items
    * @property {GUID} feedId - feed id
    * @property {GUID} feed_id - feed id
    * @property {boolean} more3sec - if the item was full displayed for 3 sec or more
    * @property {GUID} msid - msid
    * @property {string} origin - origin
    * @property {string} platform - null
    * @property {string} source - the application/CMS that sent the feed. send the application ID.
    * @property {number} src - null
    * @property {string} title - title of feed
    * @property {string} type - type
    * @property {string} url - the link of the action
    **/
    /**
     * Name: dashboard > user see feed. Evid: 20.
     * Event description: whenever a news item is a fully displayed in the newsfeed send a bi-feed so I will be able to know that a user saw the feed.
    
     * aboveTheFold - Type: bool. Desc: was the item full viewed above the fold
     *
     * campaignId - Type: guid. Desc: unique identifier of CMS items
     *
     * feedId - Type: guid. Desc: feed id
     *
     * feed_id - Type: guid. Desc: feed id
     *
     * more3sec - Type: bool. Desc: if the item was full displayed for 3 sec or more
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin
     *
     * platform - Type: string.
     *
     * source - Type: string. Desc: the application/CMS that sent the feed. send the application ID.
     *
     * src - Type: numeric.
     *
     * title - Type: string. Desc: title of feed
     *
     * type - Type: string. Desc: type
     *
     * url - Type: string. Desc: the link of the action
     * @param {dashboardUserSeeFeedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardUserSeeFeed = function (params) {
        return this.bi.log(__assign({ evid: 20 }, params));
    };
    /**
    * @typedef {Object} quotesPageViewParams
    * @property {GUID} msid - null
    * @property {number} num_of_contacts - null
    * @property {number} num_of_invoices - null
    * @property {string} origin - deprecated
    * @property {string} platform - null
    * @property {string} referral - the origin of navigation to this page {invoice card preview,direct}
    **/
    /**
     * Name: Quotes - page view. Evid: 454.
     * Event description: viewing invoices page in Oneapp.
    
     * msid - Type: guid.
     *
     * num_of_contacts - Type: numeric.
     *
     * num_of_invoices - Type: numeric.
     *
     * origin - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * referral - Type: string. Desc: the origin of navigation to this page {invoice card preview,direct}
     * @param {quotesPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPageView = function (params) {
        return this.bi.log(__assign({ evid: 454 }, params));
    };
    /**
    * @typedef {Object} automationsBanner4PresentedFormsTaskParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations -> Banner 4 presented - forms=>task. Evid: 240.
     * Event description: Automations -> Banner presented - forms=>task.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsBanner4PresentedFormsTaskParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBanner4PresentedFormsTask = function (params) {
        return this.bi.log(__assign({ evid: 240 }, params));
    };
    /**
    * @typedef {Object} crmHomeIntegrationsFinanceViewAllParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - integrations - finance view all. Evid: 1115.
     * Event description: CRM Home - integrations - marketing view all.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeIntegrationsFinanceViewAllParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeIntegrationsFinanceViewAll = function (params) {
        return this.bi.log(__assign({ evid: 1115 }, params));
    };
    /**
    * @typedef {Object} needsYourActionItemIsShownParams
    * @property {string} hosting - MA/editor/ADI
    * @property {string} item_id - id of the specific item
    * @property {number} item_location_on_page - item location appear on page
    * @property {GUID} msid - msid
    * @property {number} num_of_items - num of NYA items appears to users
    * @property {string} platform - null
    * @property {string} template_id - template id of the action
    **/
    /**
     * Name: Needs Your Action > item is shown. Evid: 332.
     * Event description: show 1 Needs Your Action item.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * item_id - Type: string. Desc: id of the specific item
     *
     * item_location_on_page - Type: numeric. Desc: item location appear on page
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_items - Type: numeric. Desc: num of NYA items appears to users
     *
     * platform - Type: string.
     *
     * template_id - Type: string. Desc: template id of the action
     * @param {needsYourActionItemIsShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.needsYourActionItemIsShown = function (params) {
        return this.bi.log(__assign({ evid: 332 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentRecommendationClick293Params
    * @property {string} action - which action was presented
    * @property {number} countAutomations - how many automations was presented in the widget
    * @property {GUID} msid - msid
    * @property {string} name - Name of the recommendation
    * @property {string} origin - button, link, header, success creation dialog
    * @property {string} platform - null
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    **/
    /**
     * Name: Automations > DaComponent > Recommendation Click. Evid: 293.
     * Event description: Automations > DaComponent > Recommendation Click.
    
     * action - Type: string. Desc: which action was presented
     *
     * countAutomations - Type: numeric. Desc: how many automations was presented in the widget
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: Name of the recommendation
     *
     * origin - Type: string. Desc: button, link, header, success creation dialog
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     * @param {automationsDaComponentRecommendationClick293Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentRecommendationClick293 = function (params) {
        return this.bi.log(__assign({ evid: 293 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceFromQuotesParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Create Invoice from Quotes. Evid: 96.
     * Event description: User click on Create Invoice (from Price Quotes).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesCreateInvoiceFromQuotesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceFromQuotes = function (params) {
        return this.bi.log(__assign({ evid: 96 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsSelectValueParams
    * @property {string} adding_method - manually(pop-up),drop-down
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was selected
    * @property {string} origin - name of current tab
    * @property {string} place - UI type (picture/button/select/input...)
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - user's selection
    **/
    /**
     * Name: dashboard > site settings > select value. Evid: 319.
     * Event description: user selected a value and didn't change it (drop down and select image).
    
     * adding_method - Type: string. Desc: manually(pop-up),drop-down
     *
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was selected
     *
     * origin - Type: string. Desc: name of current tab
     *
     * place - Type: string. Desc: UI type (picture/button/select/input...)
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: user's selection
     * @param {dashboardSiteSettingsSelectValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsSelectValue = function (params) {
        return this.bi.log(__assign({ evid: 319 }, params));
    };
    /**
    * @typedef {Object} dashboardAccountSettingsImageActionParams
    * @property {string} action - {upload, remove}
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > account settings -> image action click. Evid: 45.
     * Event description: user changes profile image in account settings - can choose upload / remove image.
    
     * action - Type: string. Desc: {upload, remove}
     *
     * platform - Type: string.
     * @param {dashboardAccountSettingsImageActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardAccountSettingsImageAction = function (params) {
        return this.bi.log(__assign({ evid: 45 }, params));
    };
    /**
    * @typedef {Object} quotesAddPaymentPageOkParams
    * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - my invoices,preview
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Add payment page - Ok. Evid: 425.
     * Event description: OK clicked in add payment page, fully_paid is true when the full amount is paid in one payment.
    
     * fully_paid - Type: bool. Desc: true for fully paid selected, false for partial payment selected
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices,preview
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesAddPaymentPageOkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddPaymentPageOk = function (params) {
        return this.bi.log(__assign({ evid: 425 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsDeleteValueSuccessParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - delete/clear value
    **/
    /**
     * Name: dashboard > site settings > delete value success. Evid: 317.
     * Event description: user deleted/cleared a value from field - success.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: delete/clear value
     * @param {dashboardSiteSettingsDeleteValueSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsDeleteValueSuccess = function (params) {
        return this.bi.log(__assign({ evid: 317 }, params));
    };
    /**
    * @typedef {Object} crmHomeSendMessageToInboxParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - send message to inbox. Evid: 745.
     * Event description: CRM Home - send message to inbox.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeSendMessageToInboxParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeSendMessageToInbox = function (params) {
        return this.bi.log(__assign({ evid: 745 }, params));
    };
    /**
    * @typedef {Object} quotesEditInvoiceParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - my invoices, preview
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Edit invoice. Evid: 421.
     * Event description: edit invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices, preview
     *
     * platform - Type: string.
     * @param {quotesEditInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEditInvoice = function (params) {
        return this.bi.log(__assign({ evid: 421 }, params));
    };
    /**
    * @typedef {Object} twoFactorAuthenticationSetupConfirmCodeClickParams
    * @property {boolean} is_valid - did the user enter the correct code sent to his mobile device
    * @property {string} mode - enable/edit
    * @property {string} platform - null
    **/
    /**
     * Name: Two Factor Authentication Setup - Confirm Code Click. Evid: 684.
     * Event description: The user clicks on 'confirm' after entering the 6-digit code he received in an sms.
    
     * is_valid - Type: bool. Desc: did the user enter the correct code sent to his mobile device
     *
     * mode - Type: string. Desc: enable/edit
     *
     * platform - Type: string.
     * @param {twoFactorAuthenticationSetupConfirmCodeClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.twoFactorAuthenticationSetupConfirmCodeClick = function (params) {
        return this.bi.log(__assign({ evid: 684 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteQuoteClickParams
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Delete Quote click. Evid: 90.
     * Event description: delete quote click.
    
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesDeleteQuoteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteQuoteClick = function (params) {
        return this.bi.log(__assign({ evid: 90 }, params));
    };
    /**
    * @typedef {Object} settingsLobbySectionIsSeenParams
    * @property {string} hosting - MA/editor/onboarding
    * @property {GUID} msid - --
    * @property {string} platform - null
    * @property {string} section_loaction_on_page - the location of section in page (order from 0,1,..)
    * @property {string} section_name - site-details/general/ecommerce/..
    **/
    /**
     * Name: Settings Lobby > Section is Seen. Evid: 1156.
     * Event description: when a section is seen (actually) in setting lobby page.
    
     * hosting - Type: string. Desc: MA/editor/onboarding
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     *
     * section_loaction_on_page - Type: string. Desc: the location of section in page (order from 0,1,..)
     *
     * section_name - Type: string. Desc: site-details/general/ecommerce/..
     * @param {settingsLobbySectionIsSeenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.settingsLobbySectionIsSeen = function (params) {
        return this.bi.log(__assign({ evid: 1156 }, params));
    };
    /**
    * @typedef {Object} dashboardErrorPageParams
    * @property {string} error_location - specifies the location in page: header/sidebar/app/sidepanel etc. includes error type
    * @property {string} error_name - null when it's a system error, permission when the error is permission related (user has no permission for the page)
    * @property {string} hosting - --
    * @property {GUID} msid - msid
    * @property {string} page_url - page_url
    * @property {string} platform - null
    **/
    /**
     * Name: bizmgr > error page. Evid: 297.
     * Event description: error page is displayed in one of the bizmgr pages.
    
     * error_location - Type: string. Desc: specifies the location in page: header/sidebar/app/sidepanel etc. includes error type
     *
     * error_name - Type: string. Desc: null when it's a system error, permission when the error is permission related (user has no permission for the page)
     *
     * hosting - Type: string. Desc: --
     *
     * msid - Type: guid. Desc: msid
     *
     * page_url - Type: string. Desc: page_url
     *
     * platform - Type: string.
     * @param {dashboardErrorPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardErrorPage = function (params) {
        return this.bi.log(__assign({ evid: 297 }, params));
    };
    /**
    * @typedef {Object} quotesOpenFirstCardParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - open first card. Evid: 733.
     * Event description: Quotes - Header Preview.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesOpenFirstCardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesOpenFirstCard = function (params) {
        return this.bi.log(__assign({ evid: 733 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesEditLogoParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - edit logo. Evid: 1304.
     * Event description: Financial Services Settings - invoices - edit logo.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesEditLogoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesEditLogo = function (params) {
        return this.bi.log(__assign({ evid: 1304 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteAppPromoParams
    * @property {string} name - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site -> app promo. Evid: 17.
    
    
     * name - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardSiteAppPromoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteAppPromo = function (params) {
        return this.bi.log(__assign({ evid: 17 }, params));
    };
    /**
    * @typedef {Object} automationsDuplicateStepParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > duplicate step. Evid: 743.
     * Event description: Automations > end of steps quota upgrade ascend.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsDuplicateStepParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDuplicateStep = function (params) {
        return this.bi.log(__assign({ evid: 743 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetPreviewInvoiceParams
    * @property {GUID} contactId - contact id
    * @property {GUID} invoiceId - invoice Id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - preview invoice. Evid: 1325.
     * Event description: Invoices - widget - Create New.
    
     * contactId - Type: guid. Desc: contact id
     *
     * invoiceId - Type: guid. Desc: invoice Id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetPreviewInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetPreviewInvoice = function (params) {
        return this.bi.log(__assign({ evid: 1325 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesDefaultsNotesLegalTermsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - defaults notes - legal terms. Evid: 1308.
     * Event description: Financial Services Settings - invoices - defaults notes - legal terms.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesDefaultsNotesLegalTermsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesDefaultsNotesLegalTerms = function (params) {
        return this.bi.log(__assign({ evid: 1308 }, params));
    };
    /**
    * @typedef {Object} dashboardNewsClickViewAllParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > news -> click view all. Evid: 38.
     * Event description: clicking view all. leads to the News Feed.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardNewsClickViewAllParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardNewsClickViewAll = function (params) {
        return this.bi.log(__assign({ evid: 38 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnItemFromHeaderParams
    * @property {string} hosting - MA
    * @property {GUID} msid - --
    * @property {string} name - the item clicked name (my-sites/partner dashors'
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > click on item from Header. Evid: 147.
     * Event description: When a user clicks on an item in the header that redirects him to another page.
    
     * hosting - Type: string. Desc: MA
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: the item clicked name (my-sites/partner dashors'
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     * @param {dashboardClickOnItemFromHeaderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnItemFromHeader = function (params) {
        return this.bi.log(__assign({ evid: 147 }, params));
    };
    /**
    * @typedef {Object} automationsEndOfQuotaAscendPopUpParams
    * @property {GUID} msid - null
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > end of quota Ascend pop up. Evid: 487.
    
    
     * msid - Type: guid.
     *
     * platform - Type: string.
     * @param {automationsEndOfQuotaAscendPopUpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsEndOfQuotaAscendPopUp = function (params) {
        return this.bi.log(__assign({ evid: 487 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesSiteSelectionPageViewParams
    * @property {GUID} msid - msid
    * @property {number} no_of_html_sites - number of html sites
    * @property {number} no_of_sites - number of sites user have
    * @property {string} origin - origin of page
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > My Sites - site selection page view. Evid: 151.
     * Event description: my sites selection page.
    
     * msid - Type: guid. Desc: msid
     *
     * no_of_html_sites - Type: numeric. Desc: number of html sites
     *
     * no_of_sites - Type: numeric. Desc: number of sites user have
     *
     * origin - Type: string. Desc: origin of page
     *
     * platform - Type: string.
     * @param {dashboardMySitesSiteSelectionPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesSiteSelectionPageView = function (params) {
        return this.bi.log(__assign({ evid: 151 }, params));
    };
    /**
    * @typedef {Object} dashboardDashboardHomeIsFullyLoadedParams
    * @property {string} hosting - MA/editor
    * @property {number} loading_time - loading time of page (from 300 )
    * @property {number} loading_time_from_first_interaction - deprecated
    * @property {number} loading_time_from_module - Loading time from module start loading (from 564)
    * @property {number} loading_time_from_performance_now - loading_time_from_performance_now  when server start to load. the real beginning
    * @property {number} loading_time_from_start - loading time from start loading Bizmgr (from 561)
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} prev_sub_view - prev page in app
    * @property {string} prev_view - origin view
    * @property {string} referral_info - specific button triggered the the view loading
    * @property {number} screen_height - screen_height
    * @property {number} screen_width - screen_width
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    * @property {number} window_height - window_height
    * @property {number} window_width - window_width
    **/
    /**
     * Name: dashboard > dashboard (home) is interactive. Evid: 309.
     * Event description: dashboard (home) is fully loaded.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * loading_time - Type: numeric. Desc: loading time of page (from 300 )
     *
     * loading_time_from_first_interaction - Type: numeric. Desc: deprecated
     *
     * loading_time_from_module - Type: numeric. Desc: Loading time from module start loading (from 564)
     *
     * loading_time_from_performance_now - Type: numeric. Desc: loading_time_from_performance_now  when server start to load. the real beginning
     *
     * loading_time_from_start - Type: numeric. Desc: loading time from start loading Bizmgr (from 561)
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * prev_sub_view - Type: string. Desc: prev page in app
     *
     * prev_view - Type: string. Desc: origin view
     *
     * referral_info - Type: string. Desc: specific button triggered the the view loading
     *
     * screen_height - Type: numeric. Desc: screen_height
     *
     * screen_width - Type: numeric. Desc: screen_width
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     *
     * window_height - Type: numeric. Desc: window_height
     *
     * window_width - Type: numeric. Desc: window_width
     * @param {dashboardDashboardHomeIsFullyLoadedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardDashboardHomeIsFullyLoaded = function (params) {
        return this.bi.log(__assign({ evid: 309 }, params));
    };
    /**
    * @typedef {Object} quotesViewInvoicePageViewParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} invoiceSource - by app_def_id
    * @property {boolean} is_visible - true if the pay invoice button is shown
    * @property {string} msid - msid
    * @property {string} no_of_payments - number of online payments available for this invoice
    * @property {string} origin - origin page
    * @property {boolean} paid - true if invoice was paid
    * @property {string} paymentType - null
    * @property {string} platform - null
    * @property {string} source - null
    * @property {string} view - other/desktop/tablet/smartphone
    **/
    /**
     * Name: Quotes - View Invoice page view. Evid: 406.
     * Event description: view invoice page view.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * invoiceSource - Type: string. Desc: by app_def_id
     *
     * is_visible - Type: bool. Desc: true if the pay invoice button is shown
     *
     * msid - Type: string. Desc: msid
     *
     * no_of_payments - Type: string. Desc: number of online payments available for this invoice
     *
     * origin - Type: string. Desc: origin page
     *
     * paid - Type: bool. Desc: true if invoice was paid
     *
     * paymentType - Type: string.
     *
     * platform - Type: string.
     *
     * source - Type: string.
     *
     * view - Type: string. Desc: other/desktop/tablet/smartphone
     * @param {quotesViewInvoicePageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesViewInvoicePageView = function (params) {
        return this.bi.log(__assign({ evid: 406 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesEditNumberingParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - edit numbering. Evid: 1303.
     * Event description: Financial Services Settings - invoices - edit numbering.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesEditNumberingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesEditNumbering = function (params) {
        return this.bi.log(__assign({ evid: 1303 }, params));
    };
    /**
    * @typedef {Object} accountSettingsDisabledEnabledPartnerDashboardParams
    * @property {string} action - ENABLE/DISABLE
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - disabled/enabled Partner Dashboard. Evid: 741.
     * Event description: enable or disable successfully the Partners Dashboard from account settings.
    
     * action - Type: string. Desc: ENABLE/DISABLE
     *
     * platform - Type: string.
     * @param {accountSettingsDisabledEnabledPartnerDashboardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsDisabledEnabledPartnerDashboard = function (params) {
        return this.bi.log(__assign({ evid: 741 }, params));
    };
    /**
    * @typedef {Object} needsYourActionNyaWidgetShownParams
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {number} num_of_items - num of NYA items appears to users
    * @property {string} platform - null
    **/
    /**
     * Name: Needs Your Action > NYA Widget shown. Evid: 331.
     * Event description: When a user entered into the dashboard and has at least 1 NYA item.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_items - Type: numeric. Desc: num of NYA items appears to users
     *
     * platform - Type: string.
     * @param {needsYourActionNyaWidgetShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.needsYourActionNyaWidgetShown = function (params) {
        return this.bi.log(__assign({ evid: 331 }, params));
    };
    /**
    * @typedef {Object} dashboardUserSeeFeedMoreThen3secParams
    * @property {boolean} aboveTheFold - aboveTheFold
    * @property {GUID} campaignId - unique identifier of CMS items
    * @property {GUID} feedId - feedId
    * @property {GUID} feed_id - feed id
    * @property {GUID} msid - msid
    * @property {string} origin - origin
    * @property {string} platform - null
    * @property {string} source - source
    * @property {number} src - null
    * @property {string} title - title
    * @property {string} type - type
    * @property {string} url - url
    **/
    /**
     * Name: dashboard > user see feed more then 3sec. Evid: 33.
     * Event description: whenever a news item is a fully displayed in the newsfeed more then 3 sec send a bi-feed so I will be able to know that a user saw the feed.
    
     * aboveTheFold - Type: bool. Desc: aboveTheFold
     *
     * campaignId - Type: guid. Desc: unique identifier of CMS items
     *
     * feedId - Type: guid. Desc: feedId
     *
     * feed_id - Type: guid. Desc: feed id
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin
     *
     * platform - Type: string.
     *
     * source - Type: string. Desc: source
     *
     * src - Type: numeric.
     *
     * title - Type: string. Desc: title
     *
     * type - Type: string. Desc: type
     *
     * url - Type: string. Desc: url
     * @param {dashboardUserSeeFeedMoreThen3secParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardUserSeeFeedMoreThen3sec = function (params) {
        return this.bi.log(__assign({ evid: 33 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteQuotePageOkParams
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Delete quote page - Ok. Evid: 91.
     * Event description: OK clicked in delete page.
    
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesDeleteQuotePageOkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteQuotePageOk = function (params) {
        return this.bi.log(__assign({ evid: 91 }, params));
    };
    /**
    * @typedef {Object} rolesDeleteRoleDeleteClickParams
    * @property {string} accept_email - accepted email
    * @property {string} hosting - MA / Editor
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - delete role - delete click. Evid: 362.
     * Event description: user clicked on 'delete' in the delete role window.
    
     * accept_email - Type: string. Desc: accepted email
     *
     * hosting - Type: string. Desc: MA / Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesDeleteRoleDeleteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesDeleteRoleDeleteClick = function (params) {
        return this.bi.log(__assign({ evid: 362 }, params));
    };
    /**
    * @typedef {Object} crmHomeCreateButtonClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: CRM Home - create button click. Evid: 489.
     * Event description: CRM Home - create button click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {crmHomeCreateButtonClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeCreateButtonClick = function (params) {
        return this.bi.log(__assign({ evid: 489 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnFolderSQuickActionsParams
    * @property {string} cta - menu/quick actions
    * @property {string} name - name of quick action
    * @property {number} nesting_level - 0 (my-sites)/1/2/3… the number define the nested folder number.
    * @property {string} origin -
    * @property {string} platform - null
    * @property {string} view_mode - grid/list-view
    **/
    /**
     * Name: Folders > click on quick actions. Evid: 125.
     * Event description: click folder's quick actions.
    
     * cta - Type: string. Desc: menu/quick actions
     *
     * name - Type: string. Desc: name of quick action
     *
     * nesting_level - Type: numeric. Desc: 0 (my-sites)/1/2/3… the number define the nested folder number.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * view_mode - Type: string. Desc: grid/list-view
     * @param {foldersClickOnFolderSQuickActionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnFolderSQuickActions = function (params) {
        return this.bi.log(__assign({ evid: 125 }, params));
    };
    /**
    * @typedef {Object} quotesNewInvoiceClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {GUID} originalInvoiceId - in case of duplicate: original invoice guid
    * @property {string} platform - null
    * @property {string} type - invoice or invoice&order
    **/
    /**
     * Name: Quotes - New invoice click. Evid: 403.
     * Event description: site owner payment funnel - get payment click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * originalInvoiceId - Type: guid. Desc: in case of duplicate: original invoice guid
     *
     * platform - Type: string.
     *
     * type - Type: string. Desc: invoice or invoice&order
     * @param {quotesNewInvoiceClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNewInvoiceClick = function (params) {
        return this.bi.log(__assign({ evid: 403 }, params));
    };
    /**
    * @typedef {Object} ascendPpClickOnPackageInPpParams
    * @property {string} buttonType - regular/hover/swipe_reg/swipe_hover
    * @property {boolean} isChecked - is most popular
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - package id
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    * @property {number} timeInPage - in milisec
    **/
    /**
     * Name: Ascend PP - Click on Package in PP. Evid: 134.
     * Event description: User click on select in pp.
    
     * buttonType - Type: string. Desc: regular/hover/swipe_reg/swipe_hover
     *
     * isChecked - Type: bool. Desc: is most popular
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: package id
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     *
     * timeInPage - Type: numeric. Desc: in milisec
     * @param {ascendPpClickOnPackageInPpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpClickOnPackageInPp = function (params) {
        return this.bi.log(__assign({ evid: 134 }, params));
    };
    /**
    * @typedef {Object} bizManagerBusinessInfoMergeDialogShownParams
    * @property {string} hosting - MA/editor/ADI
    * @property {string} merged_apps - merged app def id, use delimiter "," between each app_id
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Business Info Merge Dialog - Shown. Evid: 585.
     * Event description: This dialog will alert the user about the change to his settings.
    It will be displayed only in case of a conflict (my account and other verticals) in the merge process.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * merged_apps - Type: string. Desc: merged app def id, use delimiter "," between each app_id
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerBusinessInfoMergeDialogShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBusinessInfoMergeDialogShown = function (params) {
        return this.bi.log(__assign({ evid: 585 }, params));
    };
    /**
    * @typedef {Object} accountManagerPageComponentStartLoadingAccountManagerParams
    * @property {string} platform - null
    * @property {string} prev_sub_view - prev_sub_view
    * @property {string} prev_view - prev_view
    * @property {string} referral_info - referral_info
    * @property {string} sub_view - sub_view
    * @property {string} view - view
    **/
    /**
     * Name: account manager - page component start loading account manager. Evid: 112.
     * Event description: page component start loading account manager module.
    
     * platform - Type: string.
     *
     * prev_sub_view - Type: string. Desc: prev_sub_view
     *
     * prev_view - Type: string. Desc: prev_view
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * sub_view - Type: string. Desc: sub_view
     *
     * view - Type: string. Desc: view
     * @param {accountManagerPageComponentStartLoadingAccountManagerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountManagerPageComponentStartLoadingAccountManager = function (params) {
        return this.bi.log(__assign({ evid: 112 }, params));
    };
    /**
    * @typedef {Object} dashboardStartLoadingParams
    * @property {string} app_id - application id
    * @property {string} app_ids - all application ids installed on Biz Mgr
    * @property {string} hosting - MA/editor
    * @property {boolean} initial_load - deprecated
    * @property {boolean} is_account_mgr - true / false
    * @property {boolean} is_biz_mgr - true if page is loaded when Biz mgr is active
    * @property {string} module_id - deprecated
    * @property {GUID} msid - null
    * @property {string} origin - specific button triggered the the view loading (== referral info from editor)
    * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
    * @property {string} platform - null
    * @property {string} prev_module_id - deprecated
    * @property {string} prev_sub_view - previous page in app/module
    * @property {string} prev_view - origin view / module / app
    * @property {string} referral_info - specific button triggered the the view loading
    * @property {number} screen_height - screen_height
    * @property {number} screen_width - screen_width
    * @property {number} src - null
    * @property {string} sub_view - page in app/module
    * @property {string} view - requested view/ module/ app
    * @property {number} window_height - window_height
    * @property {number} window_width - window_width
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: dashboard > start loading. Evid: 300.
    
    
     * app_id - Type: string. Desc: application id
     *
     * app_ids - Type: string. Desc: all application ids installed on Biz Mgr
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * initial_load - Type: bool. Desc: deprecated
     *
     * is_account_mgr - Type: bool. Desc: true / false
     *
     * is_biz_mgr - Type: bool. Desc: true if page is loaded when Biz mgr is active
     *
     * module_id - Type: string. Desc: deprecated
     *
     * msid - Type: guid.
     *
     * origin - Type: string. Desc: specific button triggered the the view loading (== referral info from editor)
     *
     * origin_app_id - Type: string. Desc: origin_app_id (what app opened the bizmgr)
     *
     * platform - Type: string.
     *
     * prev_module_id - Type: string. Desc: deprecated
     *
     * prev_sub_view - Type: string. Desc: previous page in app/module
     *
     * prev_view - Type: string. Desc: origin view / module / app
     *
     * referral_info - Type: string. Desc: specific button triggered the the view loading
     *
     * screen_height - Type: numeric. Desc: screen_height
     *
     * screen_width - Type: numeric. Desc: screen_width
     *
     * src - Type: numeric.
     *
     * sub_view - Type: string. Desc: page in app/module
     *
     * view - Type: string. Desc: requested view/ module/ app
     *
     * window_height - Type: numeric. Desc: window_height
     *
     * window_width - Type: numeric. Desc: window_width
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {dashboardStartLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardStartLoading = function (params) {
        return this.bi.log(__assign({ evid: 300 }, params));
    };
    /**
    * @typedef {Object} quotesEmailQuotePageCancelClickParams
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    * @property {boolean} resend - resend mode?
    **/
    /**
     * Name: Quotes - Email Quote page - Cancel click. Evid: 87.
     * Event description: email quote - clicked on cancel.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     *
     * resend - Type: bool. Desc: resend mode?
     * @param {quotesEmailQuotePageCancelClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEmailQuotePageCancelClick = function (params) {
        return this.bi.log(__assign({ evid: 87 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteTaxClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete tax click. Evid: 437.
     * Event description: Delete tax click.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDeleteTaxClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteTaxClick = function (params) {
        return this.bi.log(__assign({ evid: 437 }, params));
    };
    /**
    * @typedef {Object} automationsVideoBannerClickParams
    * @property {GUID} msid - msid
    * @property {string} origin - origin
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > video Banner Click. Evid: 346.
     * Event description: Automations > video Banner Click.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin
     *
     * platform - Type: string.
     * @param {automationsVideoBannerClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsVideoBannerClick = function (params) {
        return this.bi.log(__assign({ evid: 346 }, params));
    };
    /**
    * @typedef {Object} dashboardLessPopularShortcutsClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > 'less' popular shortcuts click. Evid: 29.
     * Event description: each time user clicks the 'less' link.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardLessPopularShortcutsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardLessPopularShortcutsClick = function (params) {
        return this.bi.log(__assign({ evid: 29 }, params));
    };
    /**
    * @typedef {Object} needsYourActionClickOnItemParams
    * @property {string} click_type - click/close/hide
    * @property {string} hosting - MA/editor/ADI
    * @property {string} item_id - item id
    * @property {number} item_location_on_page - item location num onpage
    * @property {string} item_name - item name appear
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} template_id - template id
    **/
    /**
     * Name: Needs Your Action > click on item. Evid: 333.
     * Event description: Click on 'Needs Your Action' item.
    
     * click_type - Type: string. Desc: click/close/hide
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * item_id - Type: string. Desc: item id
     *
     * item_location_on_page - Type: numeric. Desc: item location num onpage
     *
     * item_name - Type: string. Desc: item name appear
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * template_id - Type: string. Desc: template id
     * @param {needsYourActionClickOnItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.needsYourActionClickOnItem = function (params) {
        return this.bi.log(__assign({ evid: 333 }, params));
    };
    /**
    * @typedef {Object} transferSiteResendTransferEmailClickParams
    * @property {string} hosting - MA /Editor
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - resend transfer email - click. Evid: 58.
     * Event description: user clicked on resend transfer email.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {transferSiteResendTransferEmailClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteResendTransferEmailClick = function (params) {
        return this.bi.log(__assign({ evid: 58 }, params));
    };
    /**
    * @typedef {Object} uouUnsubscribeClickParams
    * @property {string} click_type - click/cancel
    * @property {string} device - mobile
    * @property {GUID} msid - msid
    * @property {GUID} notification_Id - notification id of unsubscribe sms
    * @property {string} platform - null
    * @property {GUID} visitor_id - visitor_id of uou
    **/
    /**
     * Name: UOU Unsubscribe > Click. Evid: 799.
     * Event description: when UOU click unsubscribe/cancel from unsubscribe page view.
    
     * click_type - Type: string. Desc: click/cancel
     *
     * device - Type: string. Desc: mobile
     *
     * msid - Type: guid. Desc: msid
     *
     * notification_Id - Type: guid. Desc: notification id of unsubscribe sms
     *
     * platform - Type: string.
     *
     * visitor_id - Type: guid. Desc: visitor_id of uou
     * @param {uouUnsubscribeClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.uouUnsubscribeClick = function (params) {
        return this.bi.log(__assign({ evid: 799 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersShoutOutDidnTSendTalkenParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - name of recipie
    * @property {GUID} rule_id - unique identifier of ID
    **/
    /**
     * Name: Automations > ShoutOut didn't send token. Evid: 223.
     * Event description: send this event each time user click next at ShouOut custom phase, and don't have any token ID..
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: name of recipie
     *
     * rule_id - Type: guid. Desc: unique identifier of ID
     * @param {dashboardTriggersShoutOutDidnTSendTalkenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersShoutOutDidnTSendTalken = function (params) {
        return this.bi.log(__assign({ evid: 223 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsPageLoadParams
    * @property {string} available_sections - all the components loaded to the user
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: customer notifications settings > page load. Evid: 1253.
     * Event description: When the page is loaded.
    
     * available_sections - Type: string. Desc: all the components loaded to the user
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {customerNotificationsSettingsPageLoadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsPageLoad = function (params) {
        return this.bi.log(__assign({ evid: 1253 }, params));
    };
    /**
    * @typedef {Object} rolesAcceptFailParams
    * @property {string} invite_email - invited email
    * @property {string} invite_id - invite id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - accept fail. Evid: 358.
     * Event description: post login signup accept response fail.
    
     * invite_email - Type: string. Desc: invited email
     *
     * invite_id - Type: string. Desc: invite id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesAcceptFailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAcceptFail = function (params) {
        return this.bi.log(__assign({ evid: 358 }, params));
    };
    /**
    * @typedef {Object} quotesNewProductSaveParams
    * @property {string} msid - msid
    * @property {string} origin - create,edit,select
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - New product - Save. Evid: 415.
     * Event description: new product -save successful.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create,edit,select
     *
     * platform - Type: string.
     * @param {quotesNewProductSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNewProductSave = function (params) {
        return this.bi.log(__assign({ evid: 415 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsClickInsidePageWithoutEmailsSectionsParams
    * @property {GUID} msid - msid
    * @property {string} name - button name - f.e. "go to events"
    * @property {string} page_id - page id of the next page - f.e. page_id of stores settings
    * @property {string} platform - null
    * @property {string} section_name - name of the component - f.e. "More notifications"
    **/
    /**
     * Name: customer notifications settings > click inside page (without emails sections). Evid: 1250.
     * Event description: Click on the main page
    without sections -
    Automated emails you created,
    Recommended automated emails,
    System Notifications.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: button name - f.e. "go to events"
     *
     * page_id - Type: string. Desc: page id of the next page - f.e. page_id of stores settings
     *
     * platform - Type: string.
     *
     * section_name - Type: string. Desc: name of the component - f.e. "More notifications"
     * @param {customerNotificationsSettingsClickInsidePageWithoutEmailsSectionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsClickInsidePageWithoutEmailsSections = function (params) {
        return this.bi.log(__assign({ evid: 1250 }, params));
    };
    /**
    * @typedef {Object} quotesPreviewFromInsideTheInvoiceCreationParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Preview from inside the invoice creation. Evid: 482.
     * Event description: Quotes - Preview from inside the invoice creation.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesPreviewFromInsideTheInvoiceCreationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPreviewFromInsideTheInvoiceCreation = function (params) {
        return this.bi.log(__assign({ evid: 482 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoNavigateAwayLeaveThisPageParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - navigate away - leave this page. Evid: 560.
     * Event description: user chooses to leave the page when the navigate away modal is shown.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoNavigateAwayLeaveThisPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoNavigateAwayLeaveThisPage = function (params) {
        return this.bi.log(__assign({ evid: 560 }, params));
    };
    /**
    * @typedef {Object} assetClickParams
    * @property {GUID} assetCampaignGuid - deprecated
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} bannerLocationOnPage - deprecated
    * @property {string} asset_location_on_page - (0,1,2,3)
    * @property {string} clickType - deprecated
    * @property {string} click_type - close/ click/activate/skip
    * @property {string} group_id - id of category in setup widget
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - assets guid
    * @property {GUID} msid - site guid
    * @property {string} offeringGuid - deprecated
    * @property {string} offering_guid - offer guid
    * @property {string} platform - null
    * @property {string} premium_badge - the item requires upgrade
    * @property {string} promotionAssetType - deprecated
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    * @property {string} visibility_trigger - normal/step_completed
    **/
    /**
     * Name: Biz Manager - dashboard asset click. Evid: 591.
     * Event description: what's next asset clicked.
    
     * assetCampaignGuid - Type: guid. Desc: deprecated
     *
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * bannerLocationOnPage - Type: string. Desc: deprecated
     *
     * asset_location_on_page - Type: string. Desc: (0,1,2,3)
     *
     * clickType - Type: string. Desc: deprecated
     *
     * click_type - Type: string. Desc: close/ click/activate/skip
     *
     * group_id - Type: string. Desc: id of category in setup widget
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: assets guid
     *
     * msid - Type: guid. Desc: site guid
     *
     * offeringGuid - Type: string. Desc: deprecated
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * platform - Type: string.
     *
     * premium_badge - Type: string. Desc: the item requires upgrade
     *
     * promotionAssetType - Type: string. Desc: deprecated
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     *
     * visibility_trigger - Type: string. Desc: normal/step_completed
     * @param {assetClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.assetClick = function (params) {
        return this.bi.log(__assign({ evid: 591 }, params));
    };
    /**
    * @typedef {Object} homeClickNotificationCtaParams
    * @property {string} activity_type - the notification / activity type
    * @property {GUID} app_id - app that sent the notification - not sent
    * @property {string} app_def_id - app that sent the notification
    * @property {GUID} msid - msid
    * @property {GUID} notification_id - notification id
    * @property {number} num_of_new - number of new notifications - number in badge
    * @property {string} platform - null
    **/
    /**
     * Name: Home > click notification cta- old event . now deprecated. Evid: 250.
     * Event description: user clicks on a notification and opens app (test).
    
     * activity_type - Type: string. Desc: the notification / activity type
     *
     * app_id - Type: guid. Desc: app that sent the notification - not sent
     *
     * app_def_id - Type: string. Desc: app that sent the notification
     *
     * msid - Type: guid. Desc: msid
     *
     * notification_id - Type: guid. Desc: notification id
     *
     * num_of_new - Type: numeric. Desc: number of new notifications - number in badge
     *
     * platform - Type: string.
     * @param {homeClickNotificationCtaParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeClickNotificationCta = function (params) {
        return this.bi.log(__assign({ evid: 250 }, params));
    };
    /**
    * @typedef {Object} analyticsTooltipParams
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} name - The tooltip name. Till July 2020 was not populated  (only "info" was reported).
    * @property {string} platform - null
    * @property {string} type - shown/click
    **/
    /**
     * Name: Analytics > Tooltip. Evid: 371.
     * Event description: Tooltip for Analytics.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: The tooltip name. Till July 2020 was not populated  (only "info" was reported).
     *
     * platform - Type: string.
     *
     * type - Type: string. Desc: shown/click
     * @param {analyticsTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsTooltip = function (params) {
        return this.bi.log(__assign({ evid: 371 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentRecommendationClick288Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Invoice Table - Manage Plan. Evid: 288.
     * Event description: Quotes - Invoice Table - Manage Plan.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsDaComponentRecommendationClick288Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentRecommendationClick288 = function (params) {
        return this.bi.log(__assign({ evid: 288 }, params));
    };
    /**
    * @typedef {Object} dashboardClickBuyDomainFirstParams
    * @property {GUID} msid - null
    * @property {string} platform - null
    * @property {string} referral_info - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > click buy domain first. Evid: 52.
    
    
     * msid - Type: guid.
     *
     * platform - Type: string.
     *
     * referral_info - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardClickBuyDomainFirstParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickBuyDomainFirst = function (params) {
        return this.bi.log(__assign({ evid: 52 }, params));
    };
    /**
    * @typedef {Object} searchSearchInDialogParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} query - the users's query search
    * @property {string} results - send all results who return on time in the following way -> section: number of results: time to load
    * @property {string} seen_results - send only results who were seen in search -> section: number of results: time to load
    * @property {string} sub_view - page in app
    * @property {string} triggred_from - search/show_all
    * @property {string} view - requested view
    **/
    /**
     * Name: Search > typed. Evid: 162.
     * Event description: when a user is searching in search dialog send event at the end of the results.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * query - Type: string. Desc: the users's query search
     *
     * results - Type: string. Desc: send all results who return on time in the following way -> section: number of results: time to load
     *
     * seen_results - Type: string. Desc: send only results who were seen in search -> section: number of results: time to load
     *
     * sub_view - Type: string. Desc: page in app
     *
     * triggred_from - Type: string. Desc: search/show_all
     *
     * view - Type: string. Desc: requested view
     * @param {searchSearchInDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.searchSearchInDialog = function (params) {
        return this.bi.log(__assign({ evid: 162 }, params));
    };
    /**
    * @typedef {Object} ascendPpPurchasePageSubmitPurchaseParams
    * @property {GUID} app_id - app_id
    * @property {number} cycleId - cycle id
    * @property {string} cycle_name - cycle name
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - package id
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    **/
    /**
     * Name: Ascend PP - Purchase Page Submit Purchase. Evid: 141.
     * Event description: User click on Submit Purchase.
    
     * app_id - Type: guid. Desc: app_id
     *
     * cycleId - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: cycle name
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: package id
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     * @param {ascendPpPurchasePageSubmitPurchaseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpPurchasePageSubmitPurchase = function (params) {
        return this.bi.log(__assign({ evid: 141 }, params));
    };
    /**
    * @typedef {Object} bizManagerClickOnHelpCenterInDashboardFooterParams
    * @property {string} app_id - app_id installed on biz mgr [deprecated]
    * @property {string} hosting - ADI/MA/editor
    * @property {string} name - the item that was clicked {Help/Send feedback}
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - click on help center in dashboard footer. Evid: 578.
     * Event description: user click on help center in dashboard footer.
    
     * app_id - Type: string. Desc: app_id installed on biz mgr [deprecated]
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * name - Type: string. Desc: the item that was clicked {Help/Send feedback}
     *
     * platform - Type: string.
     * @param {bizManagerClickOnHelpCenterInDashboardFooterParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickOnHelpCenterInDashboardFooter = function (params) {
        return this.bi.log(__assign({ evid: 578 }, params));
    };
    /**
    * @typedef {Object} quotesRemoveCustomerParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Remove Customer. Evid: 462.
     * Event description: User remove customer from the invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesRemoveCustomerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesRemoveCustomer = function (params) {
        return this.bi.log(__assign({ evid: 462 }, params));
    };
    /**
    * @typedef {Object} bizManagerHtmlLoadedParams
    * @property {string} app_ids - app_ids
    * @property {GUID} app_instance_id - --
    * @property {string} hosting - from where the user opened Biz manager {ADI/MA/Editor}
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager > HTML loaded. Evid: 580.
     * Event description: Biz Mgr Html loaded after user click to open an app.
    
     * app_ids - Type: string. Desc: app_ids
     *
     * app_instance_id - Type: guid. Desc: --
     *
     * hosting - Type: string. Desc: from where the user opened Biz manager {ADI/MA/Editor}
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {bizManagerHtmlLoadedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerHtmlLoaded = function (params) {
        return this.bi.log(__assign({ evid: 580 }, params));
    };
    /**
    * @typedef {Object} quotesManagePaymentsBannerDisplayedParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name {manage payments}
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - manage payments banner displayed. Evid: 455.
     * Event description: manage payments banner is displayed in invoices app.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name {manage payments}
     *
     * platform - Type: string.
     * @param {quotesManagePaymentsBannerDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesManagePaymentsBannerDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 455 }, params));
    };
    /**
    * @typedef {Object} automationsTryItOutMultistepAutomationParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > try it out multistep automation. Evid: 735.
     * Event description: Automations > try it out multistep automation.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsTryItOutMultistepAutomationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsTryItOutMultistepAutomation = function (params) {
        return this.bi.log(__assign({ evid: 735 }, params));
    };
    /**
    * @typedef {Object} automationsWebhookV2ViewStructureParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - webhook v2 - view structure. Evid: 1394.
     * Event description: Automations - webhook v2 - view structure.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsWebhookV2ViewStructureParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsWebhookV2ViewStructure = function (params) {
        return this.bi.log(__assign({ evid: 1394 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorErrorLoadingParams
    * @property {number} loading_time - from click to error
    * @property {GUID} msid - metasite id
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: Dashboard > Site Selector error Loading. Evid: 1379.
     * Event description: When the site selector list failed to load (error is presented).
    
     * loading_time - Type: numeric. Desc: from click to error
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     * @param {dashboardSiteSelectorErrorLoadingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorErrorLoading = function (params) {
        return this.bi.log(__assign({ evid: 1379 }, params));
    };
    /**
    * @typedef {Object} clickOnShowAllButtonParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} query - query
    * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
    * @property {string} section - result's section
    * @property {number} section_index - the index of the section in results
    * @property {string} sub_view - page in app
    * @property {string} title - result's title
    * @property {string} title_id - result's title id
    * @property {string} view - requested view
    **/
    /**
     * Name: Click on 'Go To ' relevant page button. Evid: 168.
     * Event description: When a user clicks on 'Go To ' relevant page button.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * query - Type: string. Desc: query
     *
     * result - Type: string. Desc: send all results who return on time in the following way -> section: number of results: time to load
     *
     * section - Type: string. Desc: result's section
     *
     * section_index - Type: numeric. Desc: the index of the section in results
     *
     * sub_view - Type: string. Desc: page in app
     *
     * title - Type: string. Desc: result's title
     *
     * title_id - Type: string. Desc: result's title id
     *
     * view - Type: string. Desc: requested view
     * @param {clickOnShowAllButtonParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickOnShowAllButton = function (params) {
        return this.bi.log(__assign({ evid: 168 }, params));
    };
    /**
    * @typedef {Object} quotesCreateAnAccountOfPaymentProviderParams
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow onboarding/payments
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Create an account (of payment provider). Evid: 442.
     * Event description: user clicks on 'create an account' from the payment popup page.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow onboarding/payments
     *
     * platform - Type: string.
     * @param {quotesCreateAnAccountOfPaymentProviderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateAnAccountOfPaymentProvider = function (params) {
        return this.bi.log(__assign({ evid: 442 }, params));
    };
    /**
    * @typedef {Object} dashboardNewsUserClickReadMoreParams
    * @property {GUID} feedId - unique identifier of the feed
    * @property {GUID} msid - unique identifier of the site
    * @property {string} origin - of read more
    * @property {string} platform - null
    * @property {string} source - the app that sent the feed
    * @property {number} src - null
    * @property {string} title - of the feed
    * @property {string} type - of activity
    **/
    /**
     * Name: dashboard > news -> user click read more. Evid: 37.
     * Event description: each time user clicks reed more send. in the Dashboard, the news link can lead only to the News Feed.
    
     * feedId - Type: guid. Desc: unique identifier of the feed
     *
     * msid - Type: guid. Desc: unique identifier of the site
     *
     * origin - Type: string. Desc: of read more
     *
     * platform - Type: string.
     *
     * source - Type: string. Desc: the app that sent the feed
     *
     * src - Type: numeric.
     *
     * title - Type: string. Desc: of the feed
     *
     * type - Type: string. Desc: of activity
     * @param {dashboardNewsUserClickReadMoreParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardNewsUserClickReadMore = function (params) {
        return this.bi.log(__assign({ evid: 37 }, params));
    };
    /**
    * @typedef {Object} bizManagerClickLinkFromTooltipParams
    * @property {string} click_type - click link / close
    * @property {string} hosting - Editor/MA
    * @property {GUID} msid - msid
    * @property {string} name - link name
    * @property {string} origin - The component that the tooltip appears on
    * @property {string} platform - null
    * @property {string} value - Link URL
    **/
    /**
     * Name: Biz Manager - click link from tooltip/ close tooltip. Evid: 584.
     * Event description: user clicked on a link from the tooltip.
    
     * click_type - Type: string. Desc: click link / close
     *
     * hosting - Type: string. Desc: Editor/MA
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: link name
     *
     * origin - Type: string. Desc: The component that the tooltip appears on
     *
     * platform - Type: string.
     *
     * value - Type: string. Desc: Link URL
     * @param {bizManagerClickLinkFromTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickLinkFromTooltip = function (params) {
        return this.bi.log(__assign({ evid: 584 }, params));
    };
    /**
    * @typedef {Object} crmHomeSendMessageViaContactsWidgetParams
    * @property {GUID} contactId - contactId
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - send message via contacts widget. Evid: 748.
     * Event description: CRM Home - send message via contacts widget.
    
     * contactId - Type: guid. Desc: contactId
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeSendMessageViaContactsWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeSendMessageViaContactsWidget = function (params) {
        return this.bi.log(__assign({ evid: 748 }, params));
    };
    /**
    * @typedef {Object} quotesPrintInvoice477Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - customer for UoU, my invoices for users
    * @property {string} paymentType - 'Recurring','One Time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Print Invoice. Evid: 477.
     * Event description: Quotes - Print Invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: customer for UoU, my invoices for users
     *
     * paymentType - Type: string. Desc: 'Recurring','One Time'
     *
     * platform - Type: string.
     * @param {quotesPrintInvoice477Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPrintInvoice477 = function (params) {
        return this.bi.log(__assign({ evid: 477 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesActionSelectionPageViewParams
    * @property {GUID} msid - msid
    * @property {number} no_of_html_sites - number of html sites
    * @property {number} no_of_sites - number of sites user have
    * @property {string} origin - origin of page
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > My Sites - action selection page view. Evid: 150.
     * Event description: my sites selection page.
    
     * msid - Type: guid. Desc: msid
     *
     * no_of_html_sites - Type: numeric. Desc: number of html sites
     *
     * no_of_sites - Type: numeric. Desc: number of sites user have
     *
     * origin - Type: string. Desc: origin of page
     *
     * platform - Type: string.
     * @param {dashboardMySitesActionSelectionPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesActionSelectionPageView = function (params) {
        return this.bi.log(__assign({ evid: 150 }, params));
    };
    /**
    * @typedef {Object} locationModalFloatingNotificationParams
    * @property {string} hosting - dashboard/editor/ADI
    * @property {GUID} msid - metasite id
    * @property {string} name - notification name
    * @property {string} origin - which app the modal is opened from
    * @property {string} page_view - locations-modal
    * @property {string} platform - null
    * @property {string} type - error
    **/
    /**
     * Name: Location Modal > Floating Notification. Evid: 1225.
     * Event description: If the server returns an error for adding a new location, we should show an error notification while keeping the modal with all the same input values before the add action..
    
     * hosting - Type: string. Desc: dashboard/editor/ADI
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: notification name
     *
     * origin - Type: string. Desc: which app the modal is opened from
     *
     * page_view - Type: string. Desc: locations-modal
     *
     * platform - Type: string.
     *
     * type - Type: string. Desc: error
     * @param {locationModalFloatingNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.locationModalFloatingNotification = function (params) {
        return this.bi.log(__assign({ evid: 1225 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsClickLinkParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - link name
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - Link URL
    **/
    /**
     * Name: dashboard > site settings > click link. Evid: 315.
     * Event description: user clicked on a link.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: link name
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: Link URL
     * @param {dashboardSiteSettingsClickLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsClickLink = function (params) {
        return this.bi.log(__assign({ evid: 315 }, params));
    };
    /**
    * @typedef {Object} engageEmailSettingsUpdateValueParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - add new tax. Evid: 541.
     * Event description: Quotes - Settings - add new tax.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {engageEmailSettingsUpdateValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.engageEmailSettingsUpdateValue = function (params) {
        return this.bi.log(__assign({ evid: 541 }, params));
    };
    /**
    * @typedef {Object} searchCloseSearchDialogParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} query - query
    * @property {string} reason - click on result/ click somewhere else/ click on x
    * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
    * @property {string} sub_view - page in app
    * @property {number} time_in_dialog - show in seconds the time spent in the dialog
    * @property {string} view - requested view
    **/
    /**
     * Name: Search > Close search dialog. Evid: 166.
     * Event description: send an event when a user's scroll in search's results.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * query - Type: string. Desc: query
     *
     * reason - Type: string. Desc: click on result/ click somewhere else/ click on x
     *
     * result - Type: string. Desc: send all results who return on time in the following way -> section: number of results: time to load
     *
     * sub_view - Type: string. Desc: page in app
     *
     * time_in_dialog - Type: numeric. Desc: show in seconds the time spent in the dialog
     *
     * view - Type: string. Desc: requested view
     * @param {searchCloseSearchDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.searchCloseSearchDialog = function (params) {
        return this.bi.log(__assign({ evid: 166 }, params));
    };
    /**
    * @typedef {Object} dummyEventForSiteMembersParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - msid
    * @property {string} panel_name - the panel that was opened
    * @property {string} platform - null
    * @property {string} source - X button / app / navigation
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Biz Manager > Close panel. Evid: 600.
     * Event description: user / app closed the panel.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: msid
     *
     * panel_name - Type: string. Desc: the panel that was opened
     *
     * platform - Type: string.
     *
     * source - Type: string. Desc: X button / app / navigation
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {dummyEventForSiteMembersParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dummyEventForSiteMembers = function (params) {
        return this.bi.log(__assign({ evid: 600 }, params));
    };
    /**
    * @typedef {Object} automationsScrollAutomationParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - the rule_id that the user started/edited
    **/
    /**
     * Name: Automations > Scroll Automation. Evid: 231.
     * Event description: user scroll in automation page.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: the rule_id that the user started/edited
     * @param {automationsScrollAutomationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsScrollAutomation = function (params) {
        return this.bi.log(__assign({ evid: 231 }, params));
    };
    /**
    * @typedef {Object} apesLoadSystemNotificationsModalStartParams
    * @property {boolean} isPreinstalled - if the automation is pre-installed
    * @property {GUID} msid - msid
    * @property {string} origin - app id
    * @property {string} platform - null
    **/
    /**
     * Name: APeS - load system notifications modal - start. Evid: 1276.
     * Event description: APeS - load system notifications modal - start.
    
     * isPreinstalled - Type: bool. Desc: if the automation is pre-installed
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: app id
     *
     * platform - Type: string.
     * @param {apesLoadSystemNotificationsModalStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesLoadSystemNotificationsModalStart = function (params) {
        return this.bi.log(__assign({ evid: 1276 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoNavigateAwayStayInPageParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - navigate away - stay in page. Evid: 558.
     * Event description: user chooses to stay in page when the navigate away modal is shown.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoNavigateAwayStayInPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoNavigateAwayStayInPage = function (params) {
        return this.bi.log(__assign({ evid: 558 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoClickOnButtonParams
    * @property {string} fold_name - name of fold: basic info, contact info, location language and region,
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} name - name of field (key): business name, description, main category, sub category, etc
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - click on button. Evid: 559.
     * Event description: user clicks a button, e.g "add logo", "add payment",  "edit shipping", etc..
    
     * fold_name - Type: string. Desc: name of fold: basic info, contact info, location language and region,
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: name of field (key): business name, description, main category, sub category, etc
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoClickOnButtonParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoClickOnButton = function (params) {
        return this.bi.log(__assign({ evid: 559 }, params));
    };
    /**
    * @typedef {Object} teamManagementResendInviteClickParams
    * @property {GUID} invite_id - the invite id
    * @property {string} invite_role - the role on the invite
    * @property {string} invite_status - pending/expired
    * @property {string} origin - where the user opened the dialog from
    * @property {string} platform - null
    **/
    /**
     * Name: Team Management - resend invite - click. Evid: 185.
     * Event description: When a user clicks on resend invite.
    
     * invite_id - Type: guid. Desc: the invite id
     *
     * invite_role - Type: string. Desc: the role on the invite
     *
     * invite_status - Type: string. Desc: pending/expired
     *
     * origin - Type: string. Desc: where the user opened the dialog from
     *
     * platform - Type: string.
     * @param {teamManagementResendInviteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementResendInviteClick = function (params) {
        return this.bi.log(__assign({ evid: 185 }, params));
    };
    /**
    * @typedef {Object} analyticsChooseKpiFromCustomizationListParams
    * @property {string} added_kpi - the kpi the user tried to add when they got the error
    * @property {string} added_kpi_location - the location of the kpi the user tried to add when they got the error
    * @property {string} error_desc - the error the user received
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} selected_kpis - the chosen kpis in the following way -> kpi: location: (json)
    **/
    /**
     * Name: Analytics > choose KPI from customization list. Evid: 374.
     * Event description: When a user gets an error in the dialog (e.g. picks a 4th item).
    
     * added_kpi - Type: string. Desc: the kpi the user tried to add when they got the error
     *
     * added_kpi_location - Type: string. Desc: the location of the kpi the user tried to add when they got the error
     *
     * error_desc - Type: string. Desc: the error the user received
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * selected_kpis - Type: string. Desc: the chosen kpis in the following way -> kpi: location: (json)
     * @param {analyticsChooseKpiFromCustomizationListParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsChooseKpiFromCustomizationList = function (params) {
        return this.bi.log(__assign({ evid: 374 }, params));
    };
    /**
    * @typedef {Object} myAccountClickOnExpertDashboardParams
    * @property {string} origin - header
    * @property {string} page_view - my-sites / dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: My Account --> Click on Expert Dashboard. Evid: 308.
     * Event description: User clicks on Expert Dashboard.
    
     * origin - Type: string. Desc: header
     *
     * page_view - Type: string. Desc: my-sites / dashboard / account settings
     *
     * platform - Type: string.
     * @param {myAccountClickOnExpertDashboardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.myAccountClickOnExpertDashboard = function (params) {
        return this.bi.log(__assign({ evid: 308 }, params));
    };
    /**
    * @typedef {Object} automationsRenameTriggerClick378Params
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > Rename trigger click. Evid: 378.
     * Event description: Automations > Rename Automation click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {automationsRenameTriggerClick378Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsRenameTriggerClick378 = function (params) {
        return this.bi.log(__assign({ evid: 378 }, params));
    };
    /**
    * @typedef {Object} automationsWebhookV2CustomizeStructureAddKeyValueParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - webhook v2 - customize structure - add key-value. Evid: 1396.
     * Event description: Copy of Automations - webhook v2 - customize structure - add key-value.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsWebhookV2CustomizeStructureAddKeyValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsWebhookV2CustomizeStructureAddKeyValue = function (params) {
        return this.bi.log(__assign({ evid: 1396 }, params));
    };
    /**
    * @typedef {Object} dashboardFetchDealerLayoutFailedParams
    * @property {string} dashboard_type - old/new
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} type - fallback/cached
    **/
    /**
     * Name: dashboard > fetch dealer layout failed. Evid: 1999.
     * Event description: when fetching from dealer layout is failed.
    
     * dashboard_type - Type: string. Desc: old/new
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * type - Type: string. Desc: fallback/cached
     * @param {dashboardFetchDealerLayoutFailedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardFetchDealerLayoutFailed = function (params) {
        return this.bi.log(__assign({ evid: 1999 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesDefaultsNotesEditNotesParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - defaults notes - edit notes. Evid: 1307.
     * Event description: Financial Services Settings - invoices - defaults notes - edit notes.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesDefaultsNotesEditNotesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesDefaultsNotesEditNotes = function (params) {
        return this.bi.log(__assign({ evid: 1307 }, params));
    };
    /**
    * @typedef {Object} cardCtaParams
    * @property {GUID} announcement_id - announcement_id
    * @property {string} button_name - cta name
    * @property {string} button_type - main/secondary
    * @property {number} card_position - position of the announcement
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - Card CTA. Evid: 342.
     * Event description: CTA button.
    
     * announcement_id - Type: guid. Desc: announcement_id
     *
     * button_name - Type: string. Desc: cta name
     *
     * button_type - Type: string. Desc: main/secondary
     *
     * card_position - Type: numeric. Desc: position of the announcement
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {cardCtaParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.cardCta = function (params) {
        return this.bi.log(__assign({ evid: 342 }, params));
    };
    /**
    * @typedef {Object} quotesNonValidPaypalAccountPopupCloseParams
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Non valid Paypal account popup - Close. Evid: 444.
     * Event description: when a user closes the popup.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow
     *
     * platform - Type: string.
     * @param {quotesNonValidPaypalAccountPopupCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNonValidPaypalAccountPopupClose = function (params) {
        return this.bi.log(__assign({ evid: 444 }, params));
    };
    /**
    * @typedef {Object} mobilePhoneNumberConfirmationOpenPopUpParams
    * @property {string} platform - null
    **/
    /**
     * Name: Mobile Phone Number Confirmation - Click on "Add your phone number". Evid: 667.
     * Event description: the first trigger to open the confirmation pop up. can come from "save changes" or by "confirm your phone".
    
     * platform - Type: string.
     * @param {mobilePhoneNumberConfirmationOpenPopUpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobilePhoneNumberConfirmationOpenPopUp = function (params) {
        return this.bi.log(__assign({ evid: 667 }, params));
    };
    /**
    * @typedef {Object} bizManagerMinimizeExpandSetupWidgetParams
    * @property {string} app_id - app def id
    * @property {number} done_steps - number of done steps in setup
    * @property {string} hosting - MA/editor
    * @property {string} module_id - module name
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {number} skipped_steps - skipped_steps
    * @property {number} steps - number of steps in setup
    * @property {string} widget_state - minimized/expanded
    **/
    /**
     * Name: Biz Manager - minimize/expand setup widget. Evid: 574.
     * Event description: user minimizes/expands TPA setup widget in biz mgr.
    
     * app_id - Type: string. Desc: app def id
     *
     * done_steps - Type: numeric. Desc: number of done steps in setup
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * module_id - Type: string. Desc: module name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * skipped_steps - Type: numeric. Desc: skipped_steps
     *
     * steps - Type: numeric. Desc: number of steps in setup
     *
     * widget_state - Type: string. Desc: minimized/expanded
     * @param {bizManagerMinimizeExpandSetupWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerMinimizeExpandSetupWidget = function (params) {
        return this.bi.log(__assign({ evid: 574 }, params));
    };
    /**
    * @typedef {Object} mySitesHoverSiteParams
    * @property {string} ds_origin - editor/ adi
    * @property {boolean} is_premium - is_premium
    * @property {boolean} is_published - is_published
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: My Sites - hover site. Evid: 161.
     * Event description: send when a users hover site.
    
     * ds_origin - Type: string. Desc: editor/ adi
     *
     * is_premium - Type: bool. Desc: is_premium
     *
     * is_published - Type: bool. Desc: is_published
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {mySitesHoverSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mySitesHoverSite = function (params) {
        return this.bi.log(__assign({ evid: 161 }, params));
    };
    /**
    * @typedef {Object} automationsClickOnExistingAutomationParams
    * @property {GUID} msid - msid
    * @property {string} origin - 'home' / 'my automations page'
    * @property {string} platform - null
    * @property {GUID} rule_id - rule_id
    * @property {string} rule_name - rule_name
    **/
    /**
     * Name: Automations > click on existing automation. Evid: 144.
     * Event description: user click on existing automation.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: 'home' / 'my automations page'
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule_id
     *
     * rule_name - Type: string. Desc: rule_name
     * @param {automationsClickOnExistingAutomationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClickOnExistingAutomation = function (params) {
        return this.bi.log(__assign({ evid: 144 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesBusinessInfoEditFieldParams
    * @property {string} field - field
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - business info - edit field. Evid: 1306.
     * Event description: Financial Services Settings - invoices - business info - edit field.
    
     * field - Type: string. Desc: field
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesBusinessInfoEditFieldParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesBusinessInfoEditField = function (params) {
        return this.bi.log(__assign({ evid: 1306 }, params));
    };
    /**
    * @typedef {Object} quotesClickCtaInManagePaymentsBannerParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name {manage payments}
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click CTA in manage payments banner. Evid: 457.
     * Event description: User clicks on CTA (Payments) in manage payments banner.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name {manage payments}
     *
     * platform - Type: string.
     * @param {quotesClickCtaInManagePaymentsBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickCtaInManagePaymentsBanner = function (params) {
        return this.bi.log(__assign({ evid: 457 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceCancelClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - button, navigation
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Create invoice - Cancel click. Evid: 411.
     * Event description: Create invoice - cancel click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: button, navigation
     *
     * platform - Type: string.
     * @param {quotesCreateInvoiceCancelClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceCancelClick = function (params) {
        return this.bi.log(__assign({ evid: 411 }, params));
    };
    /**
    * @typedef {Object} phoneVerificationPhoneValidationParams
    * @property {string} platform - null
    **/
    /**
     * Name: Add Phone Number - Wizard Opened. Evid: 665.
     * Event description: after inserting the password, the wizard opens..
    
     * platform - Type: string.
     * @param {phoneVerificationPhoneValidationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.phoneVerificationPhoneValidation = function (params) {
        return this.bi.log(__assign({ evid: 665 }, params));
    };
    /**
    * @typedef {Object} quotesErrorGenerateLinkFromMoreActionsParams
    * @property {GUID} invoiceId - invoiceId
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - error generate link from more actions. Evid: 728.
     * Event description: Quotes - error generate link from more actions.
    
     * invoiceId - Type: guid. Desc: invoiceId
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesErrorGenerateLinkFromMoreActionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesErrorGenerateLinkFromMoreActions = function (params) {
        return this.bi.log(__assign({ evid: 728 }, params));
    };
    /**
    * @typedef {Object} quotesSettingsSuccessToastParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - success toast. Evid: 498.
     * Event description: Quotes - Settings - success toast.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesSettingsSuccessToastParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSettingsSuccessToast = function (params) {
        return this.bi.log(__assign({ evid: 498 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersFailedOnLoadShouOutParams
    * @property {GUID} msid - msid
    * @property {string} name - name of error
    * @property {string} platform - null
    * @property {string} recipe_name - recipe_name
    * @property {GUID} rule_id - rule
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Failed On-Load ShouOut. Evid: 219.
     * Event description: after customize the action user might get this event, because the shoutout customization was failed.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of error
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe_name
     *
     * rule_id - Type: guid. Desc: rule
     *
     * src - Type: numeric.
     * @param {dashboardTriggersFailedOnLoadShouOutParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersFailedOnLoadShouOut = function (params) {
        return this.bi.log(__assign({ evid: 219 }, params));
    };
    /**
    * @typedef {Object} homeBizMgrEligibleParams
    * @property {boolean} is_eligible - deprecated
    * @property {GUID} msid - metasite id
    * @property {number} phase_number - phase number
    * @property {string} platform - null
    **/
    /**
     * Name: Home > biz mgr eligible. Evid: 306.
     * Event description: checked if a user is eligible for biz mgr, phase=4 is for main funnel sites.
    
     * is_eligible - Type: bool. Desc: deprecated
     *
     * msid - Type: guid. Desc: metasite id
     *
     * phase_number - Type: numeric. Desc: phase number
     *
     * platform - Type: string.
     * @param {homeBizMgrEligibleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeBizMgrEligible = function (params) {
        return this.bi.log(__assign({ evid: 306 }, params));
    };
    /**
    * @typedef {Object} crmHomeTopCarouselLoadStartParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - Top carousel load start. Evid: 1386.
     * Event description: CRM Home - Top carousel main CTA click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeTopCarouselLoadStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeTopCarouselLoadStart = function (params) {
        return this.bi.log(__assign({ evid: 1386 }, params));
    };
    /**
    * @typedef {Object} crmHomeViewContactViaContactsWidgetParams
    * @property {GUID} contactId - contactId
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - view contact via contacts widget. Evid: 819.
     * Event description: CRM Home - view contact via contacts widget.
    
     * contactId - Type: guid. Desc: contactId
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeViewContactViaContactsWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeViewContactViaContactsWidget = function (params) {
        return this.bi.log(__assign({ evid: 819 }, params));
    };
    /**
    * @typedef {Object} ascendPpCyclePageViewParams
    * @property {GUID} app_id - app_id
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - package id
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    **/
    /**
     * Name: Ascend PP - Cycle Page view. Evid: 135.
     * Event description: User view Ascend cycle page.
    
     * app_id - Type: guid. Desc: app_id
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: package id
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     * @param {ascendPpCyclePageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpCyclePageView = function (params) {
        return this.bi.log(__assign({ evid: 135 }, params));
    };
    /**
    * @typedef {Object} foldersTooltipShownParams
    * @property {string} hosting - MA
    * @property {string} name - trash_tooltip
    * @property {string} platform - null
    * @property {string} sub_view - grid/list
    * @property {string} view - my-sites
    **/
    /**
     * Name: Folders > Tooltip Shown. Evid: 118.
     * Event description: When a user moves a site to Trash for the first time show a tooltip..
    
     * hosting - Type: string. Desc: MA
     *
     * name - Type: string. Desc: trash_tooltip
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: grid/list
     *
     * view - Type: string. Desc: my-sites
     * @param {foldersTooltipShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersTooltipShown = function (params) {
        return this.bi.log(__assign({ evid: 118 }, params));
    };
    /**
    * @typedef {Object} ascendPpPurchasePageChangeCardParams
    * @property {GUID} app_id - app_id
    * @property {number} cycleId - cycle id
    * @property {string} cycle_name - cycle name
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - package id
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    * @property {string} selection - saved card / another card
    **/
    /**
     * Name: Ascend PP - Purchase Page Change Card. Evid: 139.
     * Event description: User click on credit card option.
    
     * app_id - Type: guid. Desc: app_id
     *
     * cycleId - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: cycle name
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: package id
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     *
     * selection - Type: string. Desc: saved card / another card
     * @param {ascendPpPurchasePageChangeCardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpPurchasePageChangeCard = function (params) {
        return this.bi.log(__assign({ evid: 139 }, params));
    };
    /**
    * @typedef {Object} quotesAddingBusinessNameParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Adding Business Name. Evid: 471.
     * Event description: User added business logo (mobile).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesAddingBusinessNameParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddingBusinessName = function (params) {
        return this.bi.log(__assign({ evid: 471 }, params));
    };
    /**
    * @typedef {Object} automationsWebhookV2CustomizeStructureInsertVariableParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - webhook v2 - customize structure - insert variable. Evid: 1397.
     * Event description: Automations - webhook v2 - customize structure - insert variable.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsWebhookV2CustomizeStructureInsertVariableParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsWebhookV2CustomizeStructureInsertVariable = function (params) {
        return this.bi.log(__assign({ evid: 1397 }, params));
    };
    /**
    * @typedef {Object} crmHomeSecondaryCtaClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} tabName - which tab the user choosed
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: CRM Home - secondary CTA click. Evid: 491.
    
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * tabName - Type: string. Desc: which tab the user choosed
     *
     * uuid - Type: guid. Desc: uuid
     * @param {crmHomeSecondaryCtaClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeSecondaryCtaClick = function (params) {
        return this.bi.log(__assign({ evid: 491 }, params));
    };
    /**
    * @typedef {Object} dashboardAccountSettingsRenderedWithShowProBoxValueParams
    * @property {string} platform - null
    * @property {boolean} show_pro_box - true if box is shown
    **/
    /**
     * Name: dashboard > Account settings rendered - with show_pro_box value. Evid: 156.
     * Event description: Account settings rendered with indicator if pro-account box is shown.
    
     * platform - Type: string.
     *
     * show_pro_box - Type: bool. Desc: true if box is shown
     * @param {dashboardAccountSettingsRenderedWithShowProBoxValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardAccountSettingsRenderedWithShowProBoxValue = function (params) {
        return this.bi.log(__assign({ evid: 156 }, params));
    };
    /**
    * @typedef {Object} foldersApproveActionFromFolderSQuickActionPopupParams
    * @property {string} cta - folder’s quick action / quick actions button
    * @property {string} folder_name - the name of the folder
    * @property {number} nesting_level - 0 (my-sites)/1 (folder) /2/3...
    * @property {string} platform - null
    * @property {string} popup_name - delete_folder/rename_folder
    **/
    /**
     * Name: Folders > approve action from quick action popup. Evid: 126.
     * Event description: approve action from folder's quick action popup.
    
     * cta - Type: string. Desc: folder’s quick action / quick actions button
     *
     * folder_name - Type: string. Desc: the name of the folder
     *
     * nesting_level - Type: numeric. Desc: 0 (my-sites)/1 (folder) /2/3...
     *
     * platform - Type: string.
     *
     * popup_name - Type: string. Desc: delete_folder/rename_folder
     * @param {foldersApproveActionFromFolderSQuickActionPopupParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersApproveActionFromFolderSQuickActionPopup = function (params) {
        return this.bi.log(__assign({ evid: 126 }, params));
    };
    /**
    * @typedef {Object} apesEditNotificationSelectAudienceParams
    * @property {string} audience - which audience was chosen
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - rule id
    **/
    /**
     * Name: APeS - edit notification - select audience. Evid: 1238.
     * Event description: APeS - Save edited notification.
    
     * audience - Type: string. Desc: which audience was chosen
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule id
     * @param {apesEditNotificationSelectAudienceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesEditNotificationSelectAudience = function (params) {
        return this.bi.log(__assign({ evid: 1238 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnMoveToFolderFromDialogParams
    * @property {number} destination_nesting_level - 0 (my-sites), 1 (folder), 2(folder in 1 folder) etc
    * @property {string} folder - the name of the chosen folder
    * @property {number} origin_nesting_level - 0 (my-sites), 1 (folder), 2(folder in 1 folder)
    * @property {number} num_sites_moved - number of sites move to the folder
    * @property {string} platform - null
    **/
    /**
     * Name: Folders > click on 'Move to Folder' from dialog. Evid: 124.
     * Event description: When a user clicks on ‘Move to Folder’ from the dialog shown.
    
     * destination_nesting_level - Type: numeric. Desc: 0 (my-sites), 1 (folder), 2(folder in 1 folder) etc
     *
     * folder - Type: string. Desc: the name of the chosen folder
     *
     * origin_nesting_level - Type: numeric. Desc: 0 (my-sites), 1 (folder), 2(folder in 1 folder)
     *
     * num_sites_moved - Type: numeric. Desc: number of sites move to the folder
     *
     * platform - Type: string.
     * @param {foldersClickOnMoveToFolderFromDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnMoveToFolderFromDialog = function (params) {
        return this.bi.log(__assign({ evid: 124 }, params));
    };
    /**
    * @typedef {Object} notificationsClickOnDesktopNotificationsBannerParams
    * @property {string} feed_name - All Sites/This Site /Float
    * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > close desktop notifications banner. Evid: 281.
     * Event description: display desktop notifications banner.
    
     * feed_name - Type: string. Desc: All Sites/This Site /Float
     *
     * origin - Type: string. Desc: (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {notificationsClickOnDesktopNotificationsBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsClickOnDesktopNotificationsBanner = function (params) {
        return this.bi.log(__assign({ evid: 281 }, params));
    };
    /**
    * @typedef {Object} myAccountSelectSiteFromSiteListPopupParams
    * @property {string} hosting - MA
    * @property {number} src - null
    * @property {GUID} msid - null
    * @property {number} num_selected_sites - number of sites selected
    * @property {string} origin - null
    * @property {string} place - null
    * @property {string} platform - null
    * @property {GUID} site_id - null
    * @property {number} artificial_src - null
    * @property {string} sub_view - grid/list-view
    * @property {string} view - my-sites
    **/
    /**
     * Name: my account -> select site from site-list popup. Evid: 129.
     * Event description: multi selection 'Move to Folder' button (mapped to 2/129).
    
     * hosting - Type: string. Desc: MA
     *
     * src - Type: numeric.
     *
     * msid - Type: guid.
     *
     * num_selected_sites - Type: numeric. Desc: number of sites selected
     *
     * origin - Type: string.
     *
     * place - Type: string.
     *
     * platform - Type: string.
     *
     * site_id - Type: guid.
     *
     * artificial_src - Type: numeric.
     *
     * sub_view - Type: string. Desc: grid/list-view
     *
     * view - Type: string. Desc: my-sites
     * @param {myAccountSelectSiteFromSiteListPopupParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.myAccountSelectSiteFromSiteListPopup = function (params) {
        return this.bi.log(__assign({ evid: 129 }, params));
    };
    /**
    * @typedef {Object} needsYourActionClickOnUndoHidingAnItemParams
    * @property {string} hosting - MA/editor/ADI
    * @property {string} item_id - item id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} template_id - template id of the action
    **/
    /**
     * Name: Needs Your Action > click on undo hiding an item. Evid: 334.
     * Event description: Click on hide after hiding an item.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * item_id - Type: string. Desc: item id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * template_id - Type: string. Desc: template id of the action
     * @param {needsYourActionClickOnUndoHidingAnItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.needsYourActionClickOnUndoHidingAnItem = function (params) {
        return this.bi.log(__assign({ evid: 334 }, params));
    };
    /**
    * @typedef {Object} quotesSettingsChangeNumberingParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - settings - change numbering. Evid: 730.
     * Event description: Quotes - settings - change numbering.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesSettingsChangeNumberingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSettingsChangeNumbering = function (params) {
        return this.bi.log(__assign({ evid: 730 }, params));
    };
    /**
    * @typedef {Object} contactEnrichmentTemporaryEventParams
    * @property {string} contact_id - contact id
    * @property {boolean} hasContacts - ignore this field
    * @property {GUID} msid - msid
    * @property {string} origin - app that requested the enrichment
    * @property {string} pageView - ignore this field
    * @property {string} platform - null
    **/
    /**
     * Name: Contact Enrichment - temporary event. Evid: 499.
     * Event description: contact enrichment requset.
    
     * contact_id - Type: string. Desc: contact id
     *
     * hasContacts - Type: bool. Desc: ignore this field
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: app that requested the enrichment
     *
     * pageView - Type: string. Desc: ignore this field
     *
     * platform - Type: string.
     * @param {contactEnrichmentTemporaryEventParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.contactEnrichmentTemporaryEvent = function (params) {
        return this.bi.log(__assign({ evid: 499 }, params));
    };
    /**
    * @typedef {Object} quotesSearchQuotesParams
    * @property {string} msid - msid
    * @property {number} num_of_quotes - number of quotes the user has
    * @property {number} num_of_results - number of returned results
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {string} text - text searched
    **/
    /**
     * Name: Quotes - search Quotes. Evid: 74.
     * Event description: user searches  in the Quotes view.
    
     * msid - Type: string. Desc: msid
     *
     * num_of_quotes - Type: numeric. Desc: number of quotes the user has
     *
     * num_of_results - Type: numeric. Desc: number of returned results
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * text - Type: string. Desc: text searched
     * @param {quotesSearchQuotesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSearchQuotes = function (params) {
        return this.bi.log(__assign({ evid: 74 }, params));
    };
    /**
    * @typedef {Object} removePhoneNumberRemoveNumberClickedParams
    * @property {string} platform - null
    **/
    /**
     * Name: Remove Phone Number - Remove Phone Clicked. Evid: 98.
     * Event description: First button for remove phone number (in account settings page).
    
     * platform - Type: string.
     * @param {removePhoneNumberRemoveNumberClickedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.removePhoneNumberRemoveNumberClicked = function (params) {
        return this.bi.log(__assign({ evid: 98 }, params));
    };
    /**
    * @typedef {Object} homeMarkNotificationUnreadParams
    * @property {string} app_id - app that sent the notification
    * @property {GUID} msid - msid
    * @property {GUID} notification_id - notification id
    * @property {string} platform - null
    **/
    /**
     * Name: Home > mark notification unread old event . now deprecated. Evid: 251.
     * Event description: user clicks on mark as unread.
    
     * app_id - Type: string. Desc: app that sent the notification
     *
     * msid - Type: guid. Desc: msid
     *
     * notification_id - Type: guid. Desc: notification id
     *
     * platform - Type: string.
     * @param {homeMarkNotificationUnreadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeMarkNotificationUnread = function (params) {
        return this.bi.log(__assign({ evid: 251 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersBrowseTriggersParams
    * @property {GUID} msid - msid
    * @property {string} origin - button, link, header, success creation dialog
    * @property {string} page - FT/ browse triggers
    * @property {string} platform - null
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Start to create Automation from Scratch. Evid: 200.
     * Event description: start now click.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: button, link, header, success creation dialog
     *
     * page - Type: string. Desc: FT/ browse triggers
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     *
     * src - Type: numeric.
     * @param {dashboardTriggersBrowseTriggersParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersBrowseTriggers = function (params) {
        return this.bi.log(__assign({ evid: 200 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersDeleteParams
    * @property {GUID} msid - msid
    * @property {string} origin - all triggers / create trigger
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - rule_id
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Delete. Evid: 216.
     * Event description: Delete.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: all triggers / create trigger
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: rule_id
     *
     * src - Type: numeric.
     * @param {dashboardTriggersDeleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersDelete = function (params) {
        return this.bi.log(__assign({ evid: 216 }, params));
    };
    /**
    * @typedef {Object} automationsStoresChooseSpecificProductDropdownParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - stores choose specific product dropdown. Evid: 1318.
     * Event description: Automations - stores choose specific product dropdown.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsStoresChooseSpecificProductDropdownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsStoresChooseSpecificProductDropdown = function (params) {
        return this.bi.log(__assign({ evid: 1318 }, params));
    };
    /**
    * @typedef {Object} quotesChooseACustomerParams
    * @property {GUID} invoice_id - invoice guid
    * @property {boolean} is_new_contact - is_new_contact
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Choose a Customer. Evid: 461.
     * Event description: User Choose a Customer.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * is_new_contact - Type: bool. Desc: is_new_contact
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesChooseACustomerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesChooseACustomer = function (params) {
        return this.bi.log(__assign({ evid: 461 }, params));
    };
    /**
    * @typedef {Object} dashboardBannerLoadingCompleteParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name for identification
    * @property {string} origin - origin
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > banner loading complete. Evid: 55.
     * Event description: Please add event for banners loading completion (as we have for seeing, clicking and closing banners events src= 5 evid=14,34,36).
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name for identification
     *
     * origin - Type: string. Desc: origin
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardBannerLoadingCompleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardBannerLoadingComplete = function (params) {
        return this.bi.log(__assign({ evid: 55 }, params));
    };
    /**
    * @typedef {Object} quotesDropdownOptionParams
    * @property {string} msid - msid
    * @property {string} option - which option was choosen
    * @property {string} platform - null
    * @property {string} text - if custom was picked which test added, in other options put null
    **/
    /**
     * Name: Quotes - dropdown option. Evid: 734.
     * Event description: Quotes - dropdown option.
    
     * msid - Type: string. Desc: msid
     *
     * option - Type: string. Desc: which option was choosen
     *
     * platform - Type: string.
     *
     * text - Type: string. Desc: if custom was picked which test added, in other options put null
     * @param {quotesDropdownOptionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDropdownOption = function (params) {
        return this.bi.log(__assign({ evid: 734 }, params));
    };
    /**
    * @typedef {Object} searchClickOnSearchResultParams
    * @property {number} item_index - item's index in all results
    * @property {number} item_index_in_section - the item's index in it's section
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} query - query
    * @property {string} section - result's section
    * @property {number} section_index - the index of the section in results
    * @property {string} sub_view - page in app
    * @property {string} title - result's title
    * @property {string} title_id - result's title id
    * @property {string} view - requested view
    **/
    /**
     * Name: Search > Click on search result. Evid: 165.
     * Event description: when a user is focused on a result.
    
     * item_index - Type: numeric. Desc: item's index in all results
     *
     * item_index_in_section - Type: numeric. Desc: the item's index in it's section
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * query - Type: string. Desc: query
     *
     * section - Type: string. Desc: result's section
     *
     * section_index - Type: numeric. Desc: the index of the section in results
     *
     * sub_view - Type: string. Desc: page in app
     *
     * title - Type: string. Desc: result's title
     *
     * title_id - Type: string. Desc: result's title id
     *
     * view - Type: string. Desc: requested view
     * @param {searchClickOnSearchResultParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.searchClickOnSearchResult = function (params) {
        return this.bi.log(__assign({ evid: 165 }, params));
    };
    /**
    * @typedef {Object} quotesGetPaymentClickParams
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow
    * @property {string} platform - null
    * @property {string} type - connect/disconnect
    **/
    /**
     * Name: Quotes - Get payment click. Evid: 402.
     * Event description: site owner payment funnel - get payment click.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow
     *
     * platform - Type: string.
     *
     * type - Type: string. Desc: connect/disconnect
     * @param {quotesGetPaymentClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesGetPaymentClick = function (params) {
        return this.bi.log(__assign({ evid: 402 }, params));
    };
    /**
    * @typedef {Object} quotesRunReportClickGenerateReportClickParams
    * @property {string} basis - accural, cash
    * @property {string} msid - msid
    * @property {string} name - tax, revenue
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Run report click (generate report click). Evid: 451.
     * Event description: user clicks on run report in tax/revenue summary, this initiates the creation of a report. use 'name'  to choose tax or revenue..
    
     * basis - Type: string. Desc: accural, cash
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: tax, revenue
     *
     * platform - Type: string.
     * @param {quotesRunReportClickGenerateReportClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesRunReportClickGenerateReportClick = function (params) {
        return this.bi.log(__assign({ evid: 451 }, params));
    };
    /**
    * @typedef {Object} dashboardNewSiteParams
    * @property {number} src - null
    * @property {string} platform - null
    * @property {number} artificial_src - null
    **/
    /**
     * Name: dashboard > new site. Evid: 70.
    
    
     * src - Type: numeric.
     *
     * platform - Type: string.
     *
     * artificial_src - Type: numeric.
     * @param {dashboardNewSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardNewSite = function (params) {
        return this.bi.log(__assign({ evid: 70 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteProductPageOkParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete product page - Ok. Evid: 419.
     * Event description: OK click in delete product page.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDeleteProductPageOkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteProductPageOk = function (params) {
        return this.bi.log(__assign({ evid: 419 }, params));
    };
    /**
    * @typedef {Object} invoicesEditModesEditCustomerInfoModalChooseParams
    * @property {string} invoiceStatus - which status was the invoice
    * @property {GUID} msid - msid
    * @property {string} option - option chosen - cancel or proceed
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - edit modes - edit customer info modal - choose. Evid: 1330.
     * Event description: Invoices - edit modes - edit customer info modal.
    
     * invoiceStatus - Type: string. Desc: which status was the invoice
     *
     * msid - Type: guid. Desc: msid
     *
     * option - Type: string. Desc: option chosen - cancel or proceed
     *
     * platform - Type: string.
     * @param {invoicesEditModesEditCustomerInfoModalChooseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesEditModesEditCustomerInfoModalChoose = function (params) {
        return this.bi.log(__assign({ evid: 1330 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetChangeTabParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} tabFrom - tab from
    * @property {string} tabTo - tab to
    **/
    /**
     * Name: Invoices - widget - Change tab. Evid: 1323.
     * Event description: Invoices - widget - Change tab.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * tabFrom - Type: string. Desc: tab from
     *
     * tabTo - Type: string. Desc: tab to
     * @param {invoicesWidgetChangeTabParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetChangeTab = function (params) {
        return this.bi.log(__assign({ evid: 1323 }, params));
    };
    /**
    * @typedef {Object} transferSiteCancelTransferClickApproveParams
    * @property {string} hosting - MA /Editor
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - cancel transfer - click approve. Evid: 61.
     * Event description: user clicks approve cancel transfer.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {transferSiteCancelTransferClickApproveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteCancelTransferClickApprove = function (params) {
        return this.bi.log(__assign({ evid: 61 }, params));
    };
    /**
    * @typedef {Object} renameSiteOpenRenameDialogParams
    * @property {GUID} msid - msid
    * @property {string} origin - quick-actions...
    * @property {string} platform - null
    **/
    /**
     * Name: Rename site  - open rename dialog. Evid: 328.
     * Event description: rename dialog is opened.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: quick-actions...
     *
     * platform - Type: string.
     * @param {renameSiteOpenRenameDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.renameSiteOpenRenameDialog = function (params) {
        return this.bi.log(__assign({ evid: 328 }, params));
    };
    /**
    * @typedef {Object} automationsBanner2PresentedMembersMailParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations -> Banner 2 presented - members=>mail. Evid: 238.
     * Event description: Automations -> Banner presented - members=>mail.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsBanner2PresentedMembersMailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBanner2PresentedMembersMail = function (params) {
        return this.bi.log(__assign({ evid: 238 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnChangeViewModeParams
    * @property {string} click_name - list-view/grid
    * @property {string} hosting - MA/editor
    * @property {string} platform - null
    * @property {string} view - my-sites
    * @property {string} view_mode - list-view/grid - shows the previous mode
    **/
    /**
     * Name: Folders > click on change view mode. Evid: 117.
     * Event description: sort list view.
    
     * click_name - Type: string. Desc: list-view/grid
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * platform - Type: string.
     *
     * view - Type: string. Desc: my-sites
     *
     * view_mode - Type: string. Desc: list-view/grid - shows the previous mode
     * @param {foldersClickOnChangeViewModeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnChangeViewMode = function (params) {
        return this.bi.log(__assign({ evid: 117 }, params));
    };
    /**
    * @typedef {Object} crmHomeCustomerManagementToolsChooseParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} tabName - null
    * @property {GUID} uuid - null
    **/
    /**
     * Name: CRM Home - customer management tools - choose. Evid: 494.
    
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * tabName - Type: string.
     *
     * uuid - Type: guid.
     * @param {crmHomeCustomerManagementToolsChooseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeCustomerManagementToolsChoose = function (params) {
        return this.bi.log(__assign({ evid: 494 }, params));
    };
    /**
    * @typedef {Object} mySitesTooltipCloseParams
    * @property {string} name - tooltip name
    * @property {string} num_of_sites - num of sites on screen
    * @property {string} platform - null
    **/
    /**
     * Name: My Sites - tooltip close. Evid: 160.
     * Event description: close the tooltip.
    
     * name - Type: string. Desc: tooltip name
     *
     * num_of_sites - Type: string. Desc: num of sites on screen
     *
     * platform - Type: string.
     * @param {mySitesTooltipCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mySitesTooltipClose = function (params) {
        return this.bi.log(__assign({ evid: 160 }, params));
    };
    /**
    * @typedef {Object} clickInDashboardParams
    * @property {string} hosting - ma
    * @property {string} item_status_desc - deprecated
    * @property {GUID} msid - --
    * @property {string} name - the site details' item: Connect Domain, Manage Plan...
    * @property {string} platform - null
    * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
    **/
    /**
     * Name: dashboard > click in dashboard. Evid: 195.
     * Event description: Click on the action in dashboard widgets. (in the beginning this event was only for site details and in the new dashboard we added other clicks in different widgets.).
    
     * hosting - Type: string. Desc: ma
     *
     * item_status_desc - Type: string. Desc: deprecated
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: the site details' item: Connect Domain, Manage Plan...
     *
     * platform - Type: string.
     *
     * widget_name - Type: string. Desc: the widget name in dashboard (this field added only in new dashboard)
     * @param {clickInDashboardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 195 }, params));
    };
    /**
    * @typedef {Object} automationsBanner1PresentedFormsMailParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations -> Banner 1 presented - forms=>mail. Evid: 237.
     * Event description: Automations -> Banner presented - forms=>mail.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsBanner1PresentedFormsMailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBanner1PresentedFormsMail = function (params) {
        return this.bi.log(__assign({ evid: 237 }, params));
    };
    /**
    * @typedef {Object} twoFactorAuthenticationSetupSendCodeParams
    * @property {string} action - send/resend
    * @property {string} mode - enable/edit
    * @property {string} phone_type - new phone/account phone
    * @property {string} platform - null
    **/
    /**
     * Name: Two Factor Authentication Setup - Send Code Click. Evid: 683.
     * Event description: The user clicks on 'send code' or 'resend verification code' in the verify phone dialog box, after entering a phone number.
    
     * action - Type: string. Desc: send/resend
     *
     * mode - Type: string. Desc: enable/edit
     *
     * phone_type - Type: string. Desc: new phone/account phone
     *
     * platform - Type: string.
     * @param {twoFactorAuthenticationSetupSendCodeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.twoFactorAuthenticationSetupSendCode = function (params) {
        return this.bi.log(__assign({ evid: 683 }, params));
    };
    /**
    * @typedef {Object} notificationCloseAHighPriorityNotificationsParams
    * @property {string} channel - Web / browser / mobile / SMS / email
    * @property {string} feed_name - All Sites/This Site /Float
    * @property {GUID} msid - msid of the notification
    * @property {string} notification_ids - deprecated
    * @property {string} notificationid - notificationid
    * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Notification - Close a High priority Notifications. Evid: 279.
     * Event description: Close a High priority Notifications- not in the dialog.
    
     * channel - Type: string. Desc: Web / browser / mobile / SMS / email
     *
     * feed_name - Type: string. Desc: All Sites/This Site /Float
     *
     * msid - Type: guid. Desc: msid of the notification
     *
     * notification_ids - Type: string. Desc: deprecated
     *
     * notificationid - Type: string. Desc: notificationid
     *
     * origin - Type: string. Desc: MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {notificationCloseAHighPriorityNotificationsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationCloseAHighPriorityNotifications = function (params) {
        return this.bi.log(__assign({ evid: 279 }, params));
    };
    /**
    * @typedef {Object} teamManagementAddMembersOpenDialogParams
    * @property {string} origin - where the dialog is opened from
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    **/
    /**
     * Name: Team management - add members - open dialog. Evid: 174.
     * Event description: When a user clicks to Invite/add People on account level - Team Management page.
    
     * origin - Type: string. Desc: where the dialog is opened from
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     * @param {teamManagementAddMembersOpenDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementAddMembersOpenDialog = function (params) {
        return this.bi.log(__assign({ evid: 174 }, params));
    };
    /**
    * @typedef {Object} quotesCloseManagePlanBillingTooltipParams
    * @property {string} choose - 'Got it','Close'
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Close manage plan billing tooltip. Evid: 479.
     * Event description: Quotes - Close manage plan billing tooltip.
    
     * choose - Type: string. Desc: 'Got it','Close'
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesCloseManagePlanBillingTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCloseManagePlanBillingTooltip = function (params) {
        return this.bi.log(__assign({ evid: 479 }, params));
    };
    /**
    * @typedef {Object} engageEmailSettingsUnsavedChangesDialogParams
    * @property {GUID} invoiceId - invoiceId
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click on share link from more actions. Evid: 546.
     * Event description: Quotes - click on share link.
    
     * invoiceId - Type: guid. Desc: invoiceId
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {engageEmailSettingsUnsavedChangesDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.engageEmailSettingsUnsavedChangesDialog = function (params) {
        return this.bi.log(__assign({ evid: 546 }, params));
    };
    /**
    * @typedef {Object} mobilePhoneNumberConfirmationClickOnEditParams
    * @property {string} platform - null
    **/
    /**
     * Name: Recovery Phone Number - Edit Number. Evid: 678.
     * Event description: Update recovery phone number (account settings redesign) - click on edit number.
    
     * platform - Type: string.
     * @param {mobilePhoneNumberConfirmationClickOnEditParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobilePhoneNumberConfirmationClickOnEdit = function (params) {
        return this.bi.log(__assign({ evid: 678 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceSaveDraftCompleteParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} invoiceSource - by app_def_id
    * @property {string} msid - msid
    * @property {string} origin - create invoice, edit invoice
    * @property {string} paymentType - 'one time','recurring'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Create invoice - Save draft complete. Evid: 409.
     * Event description: Create invoice - Save draft completed.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * invoiceSource - Type: string. Desc: by app_def_id
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create invoice, edit invoice
     *
     * paymentType - Type: string. Desc: 'one time','recurring'
     *
     * platform - Type: string.
     * @param {quotesCreateInvoiceSaveDraftCompleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceSaveDraftComplete = function (params) {
        return this.bi.log(__assign({ evid: 409 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsPreviewEditChooseAudienceParams
    * @property {GUID} msid - msid
    * @property {string} name - the audience selection in english. f.e "site members"
    * @property {string} platform - null
    * @property {GUID} rule_id - automations rule id
    * @property {string} template_id - ping template id
    **/
    /**
     * Name: customer notifications settings > preview&edit > choose audience. Evid: 1375.
     * Event description: When the user chooses an audience for blog.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: the audience selection in english. f.e "site members"
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: automations rule id
     *
     * template_id - Type: string. Desc: ping template id
     * @param {customerNotificationsSettingsPreviewEditChooseAudienceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsPreviewEditChooseAudience = function (params) {
        return this.bi.log(__assign({ evid: 1375 }, params));
    };
    /**
    * @typedef {Object} notificationDeleteNotificationParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > Collapse Created by You. Evid: 485.
     * Event description: Automations > Collapse Created by You.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {notificationDeleteNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationDeleteNotification = function (params) {
        return this.bi.log(__assign({ evid: 485 }, params));
    };
    /**
    * @typedef {Object} bizManagerOpenPanelFinishParams
    * @property {string} hosting - MA/editor
    * @property {number} loading_time - time from start opening the panel till end
    * @property {number} loading_time_from_interactive - loading_time_from_interactive (from 657)
    * @property {GUID} msid - msid
    * @property {string} panel_name - the panel that was opened
    * @property {string} platform - null
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Biz Manager > Open panel finish. Evid: 599.
     * Event description: panel is starting to load.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * loading_time - Type: numeric. Desc: time from start opening the panel till end
     *
     * loading_time_from_interactive - Type: numeric. Desc: loading_time_from_interactive (from 657)
     *
     * msid - Type: guid. Desc: msid
     *
     * panel_name - Type: string. Desc: the panel that was opened
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {bizManagerOpenPanelFinishParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerOpenPanelFinish = function (params) {
        return this.bi.log(__assign({ evid: 599 }, params));
    };
    /**
    * @typedef {Object} accountSettingsTwoFactorAuthenticationSetupSendCodeSuccessParams
    * @property {string} action - send/resend
    * @property {string} mode - enable/edit
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Two Factor Authentication Setup - Send Code Success. Evid: 696.
     * Event description: The code was successfully sent to the user's phone after he clicked on send code.
    
     * action - Type: string. Desc: send/resend
     *
     * mode - Type: string. Desc: enable/edit
     *
     * platform - Type: string.
     * @param {accountSettingsTwoFactorAuthenticationSetupSendCodeSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsTwoFactorAuthenticationSetupSendCodeSuccess = function (params) {
        return this.bi.log(__assign({ evid: 696 }, params));
    };
    /**
    * @typedef {Object} homeMarkAllUnreadNotificationsParams
    * @property {string} channel - Web / browser / mobile / SMS / email
    * @property {string} msid - deprecated
    * @property {number} num_of_unread - number of unread messages
    * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Home > mark all as read notifications. Evid: 253.
     * Event description: user clicks mark all unread.
    
     * channel - Type: string. Desc: Web / browser / mobile / SMS / email
     *
     * msid - Type: string. Desc: deprecated
     *
     * num_of_unread - Type: numeric. Desc: number of unread messages
     *
     * origin - Type: string. Desc: MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {homeMarkAllUnreadNotificationsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeMarkAllUnreadNotifications = function (params) {
        return this.bi.log(__assign({ evid: 253 }, params));
    };
    /**
    * @typedef {Object} accountSettingsUpdatesConfirmPasswordModalLoadParams
    * @property {string} action - 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings Updates - Confirm Password Modal Load. Evid: 690.
     * Event description: Confirm password modal loads successfully after the user tries to make changes in account settings.
    
     * action - Type: string. Desc: 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
     *
     * platform - Type: string.
     * @param {accountSettingsUpdatesConfirmPasswordModalLoadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsUpdatesConfirmPasswordModalLoad = function (params) {
        return this.bi.log(__assign({ evid: 690 }, params));
    };
    /**
    * @typedef {Object} dashboardUpgradeLinkParams
    * @property {string} name - null
    * @property {string} origin - upgrade button
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > upgrade link. Evid: 12.
     * Event description: click on upgrade from my account.
    
     * name - Type: string.
     *
     * origin - Type: string. Desc: upgrade button
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardUpgradeLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardUpgradeLink = function (params) {
        return this.bi.log(__assign({ evid: 12 }, params));
    };
    /**
    * @typedef {Object} bizManagerDisplayAnalyticsWidgetParams
    * @property {string} app_id - app id of the vertical that displays the widget.
    * @property {string} hosting - ADI/MA/editor
    * @property {string} module_id - module name
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Display Analytics Widget. Evid: 577.
     * Event description: Display the Widget only after Setup is complete or doesn't exist..
    
     * app_id - Type: string. Desc: app id of the vertical that displays the widget.
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * module_id - Type: string. Desc: module name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerDisplayAnalyticsWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerDisplayAnalyticsWidget = function (params) {
        return this.bi.log(__assign({ evid: 577 }, params));
    };
    /**
    * @typedef {Object} automationsEditAutomationSTitleParams
    * @property {string} flowType - flow in which the dialog is shown: {create, edit}
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - the rule_id that the user started/edited
    **/
    /**
     * Name: Automations > Edit Automation's title. Evid: 228.
     * Event description: editing the title of the automation.
    
     * flowType - Type: string. Desc: flow in which the dialog is shown: {create, edit}
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: the rule_id that the user started/edited
     * @param {automationsEditAutomationSTitleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsEditAutomationSTitle = function (params) {
        return this.bi.log(__assign({ evid: 228 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsSeoClickOnGetStartedParams
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site settings > SEO > click on Get started. Evid: 325.
     * Event description: user clicked on get started button.
    
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     * @param {dashboardSiteSettingsSeoClickOnGetStartedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsSeoClickOnGetStarted = function (params) {
        return this.bi.log(__assign({ evid: 325 }, params));
    };
    /**
    * @typedef {Object} invoicesItemsListAddNewProductParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - Items List - add new product. Evid: 1316.
     * Event description: Invoices - Items List - add new product.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesItemsListAddNewProductParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesItemsListAddNewProduct = function (params) {
        return this.bi.log(__assign({ evid: 1316 }, params));
    };
    /**
    * @typedef {Object} dashboardTourUserSeesTourBannerParams
    * @property {string} experiment_name - null
    * @property {GUID} msid - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard tour > user sees tour banner. Evid: 30.
    
    
     * experiment_name - Type: string.
     *
     * msid - Type: guid.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTourUserSeesTourBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTourUserSeesTourBanner = function (params) {
        return this.bi.log(__assign({ evid: 30 }, params));
    };
    /**
    * @typedef {Object} quotesViewPaymentsParams
    * @property {string} msid - null
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - view payments. Evid: 388.
     * Event description: Quotes - view payments.
    
     * msid - Type: string.
     *
     * platform - Type: string.
     * @param {quotesViewPaymentsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesViewPayments = function (params) {
        return this.bi.log(__assign({ evid: 388 }, params));
    };
    /**
    * @typedef {Object} crmHomeIntegrationsMarketingConnectParams
    * @property {string} connectTab - which connection the user choose
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - integrations - marketing connect. Evid: 1114.
     * Event description: CRM Home - integrations - marketing view all.
    
     * connectTab - Type: string. Desc: which connection the user choose
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeIntegrationsMarketingConnectParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeIntegrationsMarketingConnect = function (params) {
        return this.bi.log(__assign({ evid: 1114 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUpParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {string} value - Link URL
    **/
    /**
     * Name: dashboard > site settings > seo > close enter address Manually pop up. Evid: 324.
     * Event description: user closed  pop up 'Enter address manually' in SEO section.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * value - Type: string. Desc: Link URL
     * @param {dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsSeoCloseEnterAddressManuallyPopUp = function (params) {
        return this.bi.log(__assign({ evid: 324 }, params));
    };
    /**
    * @typedef {Object} quotesMarkAsAcceptedParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Mark as accepted. Evid: 95.
     * Event description: User click on Mark as accepted.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesMarkAsAcceptedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesMarkAsAccepted = function (params) {
        return this.bi.log(__assign({ evid: 95 }, params));
    };
    /**
    * @typedef {Object} quotesHeaderPreviewParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Header Preview. Evid: 732.
    
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesHeaderPreviewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesHeaderPreview = function (params) {
        return this.bi.log(__assign({ evid: 732 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoCancelDiscardParams
    * @property {string} hosting - MA/editor
    * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
    * @property {GUID} msid - metasite id
    * @property {string} page_view - The page where the changes were made (website settings/business info/language and region)
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - cancel discard. Evid: 556.
     * Event description: user clicks on X or Cancel in the discard modal.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * location_details - Type: string. Desc: 0- first location (create), 1-second location (add), 2- third location (add),...
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: The page where the changes were made (website settings/business info/language and region)
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoCancelDiscardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoCancelDiscard = function (params) {
        return this.bi.log(__assign({ evid: 556 }, params));
    };
    /**
    * @typedef {Object} quotesEmailQuotesPageParams
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    * @property {boolean} resend - resend mode?
    **/
    /**
     * Name: Quotes - Email quotes page. Evid: 84.
     * Event description: email invoice pop up.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     *
     * resend - Type: bool. Desc: resend mode?
     * @param {quotesEmailQuotesPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEmailQuotesPage = function (params) {
        return this.bi.log(__assign({ evid: 84 }, params));
    };
    /**
    * @typedef {Object} rolesResendInviteClickParams
    * @property {string} hosting - MA /Editor
    * @property {string} invite_email - invited email
    * @property {string} invite_role - invited role
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - resend invite - click. Evid: 359.
     * Event description: user clicked on resend invite.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * invite_email - Type: string. Desc: invited email
     *
     * invite_role - Type: string. Desc: invited role
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesResendInviteClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesResendInviteClick = function (params) {
        return this.bi.log(__assign({ evid: 359 }, params));
    };
    /**
    * @typedef {Object} rolesLoginPageLoadCompleteParams
    * @property {string} invite_email - invited email
    * @property {string} invite_id - invite_id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - login page load complete. Evid: 357.
     * Event description: before login component is loaded - page load complete.
    
     * invite_email - Type: string. Desc: invited email
     *
     * invite_id - Type: string. Desc: invite_id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesLoginPageLoadCompleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesLoginPageLoadComplete = function (params) {
        return this.bi.log(__assign({ evid: 357 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnUpgradeParams
    * @property {string} hosting - (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} origin - where it was clicked from
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard - click on upgrade. Evid: 73.
     * Event description: click on upgrade button in biz mgr.
    
     * hosting - Type: string. Desc: (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: where it was clicked from
     *
     * platform - Type: string.
     * @param {dashboardClickOnUpgradeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnUpgrade = function (params) {
        return this.bi.log(__assign({ evid: 73 }, params));
    };
    /**
    * @typedef {Object} quotesNewProductCancelParams
    * @property {string} msid - msid
    * @property {string} origin - create,edit
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - New product - Cancel. Evid: 416.
     * Event description: new product -cancel (for every close (cancel, x, background click)).
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create,edit
     *
     * platform - Type: string.
     * @param {quotesNewProductCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNewProductCancel = function (params) {
        return this.bi.log(__assign({ evid: 416 }, params));
    };
    /**
    * @typedef {Object} quotesChooseDueDateParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - choose due date. Evid: 384.
     * Event description: Quotes - choose due date.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesChooseDueDateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesChooseDueDate = function (params) {
        return this.bi.log(__assign({ evid: 384 }, params));
    };
    /**
    * @typedef {Object} foldersMarkASiteParams
    * @property {string} hosting - MA
    * @property {GUID} msid - msid
    * @property {string} name - mark/unmark
    * @property {string} platform - null
    * @property {string} sub_view - grid/ list-view
    * @property {string} view - my-sites
    **/
    /**
     * Name: Folders > Mark/Unmark a site. Evid: 128.
     * Event description: marking a site.
    
     * hosting - Type: string. Desc: MA
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: mark/unmark
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: grid/ list-view
     *
     * view - Type: string. Desc: my-sites
     * @param {foldersMarkASiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersMarkASite = function (params) {
        return this.bi.log(__assign({ evid: 128 }, params));
    };
    /**
    * @typedef {Object} dashboardViewSiteParams
    * @property {number} src - null
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {GUID} site_id - null
    * @property {number} artificial_src - null
    **/
    /**
     * Name: dashboard > view site. Evid: 72.
    
    
     * src - Type: numeric.
     *
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * site_id - Type: guid.
     *
     * artificial_src - Type: numeric.
     * @param {dashboardViewSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardViewSite = function (params) {
        return this.bi.log(__assign({ evid: 72 }, params));
    };
    /**
    * @typedef {Object} automationsClientErrorParams
    * @property {string} action_name - in case the step is "action", in which action the error is: {email to visitors, email to owner, chat message}
    * @property {string} desc - more details about the error (e.g. which fields are causing the error)
    * @property {string} flowType - flow in which the dialog is shown: {create, edit}
    * @property {number} index - index for drip campaign
    * @property {GUID} msid - msid
    * @property {string} name - name of error: {missingInfo}
    * @property {string} phase_name - which step in the automation flow: {trigger type, action, timing}
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - the rule_id that the user started/edited
    * @property {boolean} withTriggersCatalog - withTriggersCatalog
    **/
    /**
     * Name: Automations > Client error. Evid: 227.
     * Event description: error in automations in creation flow (and created by the user).
    
     * action_name - Type: string. Desc: in case the step is "action", in which action the error is: {email to visitors, email to owner, chat message}
     *
     * desc - Type: string. Desc: more details about the error (e.g. which fields are causing the error)
     *
     * flowType - Type: string. Desc: flow in which the dialog is shown: {create, edit}
     *
     * index - Type: numeric. Desc: index for drip campaign
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of error: {missingInfo}
     *
     * phase_name - Type: string. Desc: which step in the automation flow: {trigger type, action, timing}
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: the rule_id that the user started/edited
     *
     * withTriggersCatalog - Type: bool. Desc: withTriggersCatalog
     * @param {automationsClientErrorParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClientError = function (params) {
        return this.bi.log(__assign({ evid: 227 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsPreviewEditLoadingTimeParams
    * @property {number} loadingTime - The time between page was loaded and the modal was loaded
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: customer notifications settings > preview&edit > loading time. Evid: 1455.
     * Event description: When the user come back from shoutout composer the event is send when the modal is fully loaded..
    
     * loadingTime - Type: numeric. Desc: The time between page was loaded and the modal was loaded
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {customerNotificationsSettingsPreviewEditLoadingTimeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsPreviewEditLoadingTime = function (params) {
        return this.bi.log(__assign({ evid: 1455 }, params));
    };
    /**
    * @typedef {Object} quotesChooseAProductParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {number} product_id - product_id
    * @property {string} productName - product_name
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Choose a Product. Evid: 466.
     * Event description: Quotes - Choose a Product.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * product_id - Type: numeric. Desc: product_id
     *
     * productName - Type: string. Desc: product_name
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesChooseAProductParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesChooseAProduct = function (params) {
        return this.bi.log(__assign({ evid: 466 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteQuickActionClickParams
    * @property {string} hosting - editor/ma
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {string} referral - --
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > quick action click. Evid: 16.
    
    
     * hosting - Type: string. Desc: editor/ma
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * referral - Type: string. Desc: --
     *
     * src - Type: numeric.
     * @param {dashboardSiteQuickActionClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteQuickActionClick = function (params) {
        return this.bi.log(__assign({ evid: 16 }, params));
    };
    /**
    * @typedef {Object} ascendPpClickOnMoveToWixPremiumPpParams
    * @property {string} origin - product name open PP
    * @property {string} platform - web/mobile
    * @property {string} referralInfo - button name open PP
    * @property {number} timeInPage - in milisec
    **/
    /**
     * Name: Ascend PP - Click on Move To Wix Premium PP. Evid: 190.
     * Event description: User clicks on moving to Wix PP.
    
     * origin - Type: string. Desc: product name open PP
     *
     * platform - Type: string. Desc: web/mobile
     *
     * referralInfo - Type: string. Desc: button name open PP
     *
     * timeInPage - Type: numeric. Desc: in milisec
     * @param {ascendPpClickOnMoveToWixPremiumPpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpClickOnMoveToWixPremiumPp = function (params) {
        return this.bi.log(__assign({ evid: 190 }, params));
    };
    /**
    * @typedef {Object} bizManagerClickOnSetupSkipUndoParams
    * @property {string} app_id - app_id
    * @property {string} click_type - skip/undo
    * @property {number} done_steps - number of done steps in setup
    * @property {string} hosting - MA/editor
    * @property {string} module_id - module name
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {number} skipped_steps - skipped_steps
    * @property {string} step - step id
    * @property {GUID} step_guid - deprecated
    * @property {number} step_id - deprecated
    * @property {number} steps - number of steps in setup
    **/
    /**
     * Name: Biz Manager - click on setup skip/undo. Evid: 656.
     * Event description: user clicked on a CTA in TPA setup widget in biz mgr.
    
     * app_id - Type: string. Desc: app_id
     *
     * click_type - Type: string. Desc: skip/undo
     *
     * done_steps - Type: numeric. Desc: number of done steps in setup
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * module_id - Type: string. Desc: module name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * skipped_steps - Type: numeric. Desc: skipped_steps
     *
     * step - Type: string. Desc: step id
     *
     * step_guid - Type: guid. Desc: deprecated
     *
     * step_id - Type: numeric. Desc: deprecated
     *
     * steps - Type: numeric. Desc: number of steps in setup
     * @param {bizManagerClickOnSetupSkipUndoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickOnSetupSkipUndo = function (params) {
        return this.bi.log(__assign({ evid: 656 }, params));
    };
    /**
    * @typedef {Object} bizManagerWhatSNextCloseVideoAssetParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - the priority of the asset (from 30)
    * @property {string} asset_location_on_page - (0,1,2,3)
    * @property {GUID} group_id - the dealers group from which the asset is being chosen
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - assets guid
    * @property {GUID} msid - meta site guid
    * @property {string} offering_guid - ids to be consistent with premium events
    * @property {number} percentage - percentage watched 0-100
    * @property {string} platform - null
    * @property {string} promotion_asset_type - video
    **/
    /**
     * Name: Biz Manager - what's next close video asset. Evid: 592.
     * Event description: what's next video asset closed, with percentage watched.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: the priority of the asset (from 30)
     *
     * asset_location_on_page - Type: string. Desc: (0,1,2,3)
     *
     * group_id - Type: guid. Desc: the dealers group from which the asset is being chosen
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: assets guid
     *
     * msid - Type: guid. Desc: meta site guid
     *
     * offering_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * percentage - Type: numeric. Desc: percentage watched 0-100
     *
     * platform - Type: string.
     *
     * promotion_asset_type - Type: string. Desc: video
     * @param {bizManagerWhatSNextCloseVideoAssetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerWhatSNextCloseVideoAsset = function (params) {
        return this.bi.log(__assign({ evid: 592 }, params));
    };
    /**
    * @typedef {Object} quotesDismissManagePaymentsBannerParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name {manage payments}
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - dismiss manage payments banner. Evid: 456.
     * Event description: dismiss manage payments banner.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name {manage payments}
     *
     * platform - Type: string.
     * @param {quotesDismissManagePaymentsBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDismissManagePaymentsBanner = function (params) {
        return this.bi.log(__assign({ evid: 456 }, params));
    };
    /**
    * @typedef {Object} teamManagementDeleteTeamMemberDeleteClickSuccessParams
    * @property {string} invite_status - pending/expired/leave team
    * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
    * @property {string} origin - where the dialog was opened from
    * @property {string} platform - null
    * @property {string} role - the deleted user’s role
    **/
    /**
     * Name: Team Management - delete team member - delete click success. Evid: 180.
     * Event description: When a user clicks on 'delete' in the delete team member window - success response.
    
     * invite_status - Type: string. Desc: pending/expired/leave team
     *
     * member_id - Type: guid. Desc: the uuid of the deleted member (if status is pending then invite_id)
     *
     * origin - Type: string. Desc: where the dialog was opened from
     *
     * platform - Type: string.
     *
     * role - Type: string. Desc: the deleted user’s role
     * @param {teamManagementDeleteTeamMemberDeleteClickSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementDeleteTeamMemberDeleteClickSuccess = function (params) {
        return this.bi.log(__assign({ evid: 180 }, params));
    };
    /**
    * @typedef {Object} notificationNotificationAutomationCreatedParams
    * @property {string} channel - deprecated
    * @property {string} channels - Web / browser / mobile / SMS / email- multiple channels
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipients_type - all contributors / owner
    **/
    /**
     * Name: Notification -  Notification Automation Created. Evid: 269.
     * Event description: Notification that was created by Automations.
    
     * channel - Type: string. Desc: deprecated
     *
     * channels - Type: string. Desc: Web / browser / mobile / SMS / email- multiple channels
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipients_type - Type: string. Desc: all contributors / owner
     * @param {notificationNotificationAutomationCreatedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationNotificationAutomationCreated = function (params) {
        return this.bi.log(__assign({ evid: 269 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnMySitesParams
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > click on my sites. Evid: 40.
    
    
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardClickOnMySitesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnMySites = function (params) {
        return this.bi.log(__assign({ evid: 40 }, params));
    };
    /**
    * @typedef {Object} bizManagerClickOnSidebarItemParams
    * @property {string} app_id - app_id of the item
    * @property {number} counter - The value inside the counter clicked (is counter exists)
    * @property {string} hosting - MA/editor
    * @property {boolean} is_from_main_sidebar - true if the click is from main sidebar and false if it's from sidebar dropdown tooltip
    * @property {string} legacy_name - deprecated
    * @property {GUID} msid - metasite id
    * @property {string} name - unique name that doesn't change when changing the name on the side bar
    * @property {string} platform - null
    * @property {string} section_name - the name of the source section (where the click occurred)
    * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
    **/
    /**
     * Name: Biz Manager - click on sidebar item. Evid: 550.
     * Event description: user clicks on an item from the sidebar in the business manager.
    
     * app_id - Type: string. Desc: app_id of the item
     *
     * counter - Type: numeric. Desc: The value inside the counter clicked (is counter exists)
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * is_from_main_sidebar - Type: bool. Desc: true if the click is from main sidebar and false if it's from sidebar dropdown tooltip
     *
     * legacy_name - Type: string. Desc: deprecated
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: unique name that doesn't change when changing the name on the side bar
     *
     * platform - Type: string.
     *
     * section_name - Type: string. Desc: the name of the source section (where the click occurred)
     *
     * sidebar_name - Type: string. Desc: the name that appears in the sidebar - can be changed
     * @param {bizManagerClickOnSidebarItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickOnSidebarItem = function (params) {
        return this.bi.log(__assign({ evid: 550 }, params));
    };
    /**
    * @typedef {Object} accountManagerClickOnSidebarItemParams
    * @property {string} name - unique name that doesn't change when changing the name on the side bar
    * @property {string} platform - null
    * @property {string} referral_info - referral_info
    * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
    **/
    /**
     * Name: Account Manager - click on sidebar item. Evid: 114.
     * Event description: user clicks on an item from the sidebar in the account manager.
    
     * name - Type: string. Desc: unique name that doesn't change when changing the name on the side bar
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * sidebar_name - Type: string. Desc: the name that appears in the sidebar - can be changed
     * @param {accountManagerClickOnSidebarItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountManagerClickOnSidebarItem = function (params) {
        return this.bi.log(__assign({ evid: 114 }, params));
    };
    /**
    * @typedef {Object} quotesChangeValueParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} name - field name key (customer, email, subject, message, ..)
    * @property {string} origin - name of page: create invoice, email invoice, settings
    * @property {string} platform - null
    * @property {string} value - value of field
    **/
    /**
     * Name: Quotes - Change value. Evid: 407.
     * Event description: change value.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: field name key (customer, email, subject, message, ..)
     *
     * origin - Type: string. Desc: name of page: create invoice, email invoice, settings
     *
     * platform - Type: string.
     *
     * value - Type: string. Desc: value of field
     * @param {quotesChangeValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesChangeValue = function (params) {
        return this.bi.log(__assign({ evid: 407 }, params));
    };
    /**
    * @typedef {Object} dashboardTourNextStepParams
    * @property {string} experiment_name - null
    * @property {GUID} msid - null
    * @property {string} stage_process - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard tour > next step. Evid: 32.
    
    
     * experiment_name - Type: string.
     *
     * msid - Type: guid.
     *
     * stage_process - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTourNextStepParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTourNextStep = function (params) {
        return this.bi.log(__assign({ evid: 32 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsPreviewEditClickOnToggleParams
    * @property {string} channel - email/mobile/sms
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - automations rule_id
    * @property {boolean} status - on=true, off=false
    * @property {string} template_id - ping template_id
    **/
    /**
     * Name: customer notifications settings > preview&edit > click on toggle. Evid: 1252.
     * Event description: When the user clicks on the toggle to mute/unmute each channel.
    
     * channel - Type: string. Desc: email/mobile/sms
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: automations rule_id
     *
     * status - Type: bool. Desc: on=true, off=false
     *
     * template_id - Type: string. Desc: ping template_id
     * @param {customerNotificationsSettingsPreviewEditClickOnToggleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsPreviewEditClickOnToggle = function (params) {
        return this.bi.log(__assign({ evid: 1252 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsPreviewEditShowTooltipParams
    * @property {string} error_name - turn_off_all_channels
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - automation rule_id
    * @property {string} template_id - ping template_id
    **/
    /**
     * Name: customer notifications settings > preview&edit > show tooltip. Evid: 1259.
     * Event description: when the user tries to mute all channels the last button is disabled and if he hovers over it a tooltip is shown.
    
     * error_name - Type: string. Desc: turn_off_all_channels
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: automation rule_id
     *
     * template_id - Type: string. Desc: ping template_id
     * @param {customerNotificationsSettingsPreviewEditShowTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsPreviewEditShowTooltip = function (params) {
        return this.bi.log(__assign({ evid: 1259 }, params));
    };
    /**
    * @typedef {Object} verticalsEmailNotificationSent1271Params
    * @property {string} channel - email
    * @property {string} contact_id - If the email has been sent to member/contact
    * @property {GUID} msid - msid
    * @property {string} notificationid - Notification ID
    * @property {string} platform - null
    * @property {string} template_id - Descriptive name for the type of email. e.g. Identity.Member_Approved
    **/
    /**
     * Name: Verticals -> email notification -> Sent. Evid: 1271.
     * Event description: When a user opens vertical's email  notification which doesn't go via Ping!.
    
     * channel - Type: string. Desc: email
     *
     * contact_id - Type: string. Desc: If the email has been sent to member/contact
     *
     * msid - Type: guid. Desc: msid
     *
     * notificationid - Type: string. Desc: Notification ID
     *
     * platform - Type: string.
     *
     * template_id - Type: string. Desc: Descriptive name for the type of email. e.g. Identity.Member_Approved
     * @param {verticalsEmailNotificationSent1271Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.verticalsEmailNotificationSent1271 = function (params) {
        return this.bi.log(__assign({ evid: 1271 }, params));
    };
    /**
    * @typedef {Object} invoicesAddAProductVariantAddToInvoiceParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - Add a product Variant - add to invoice. Evid: 1210.
     * Event description: Invoices - Add a product Variant - add to invoice.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesAddAProductVariantAddToInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesAddAProductVariantAddToInvoice = function (params) {
        return this.bi.log(__assign({ evid: 1210 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteProductClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete product click. Evid: 418.
     * Event description: Delete product click.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDeleteProductClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteProductClick = function (params) {
        return this.bi.log(__assign({ evid: 418 }, params));
    };
    /**
    * @typedef {Object} quotesClickSaveOnAddBusinessDetailsPageParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Click Save On Add Business Details Page. Evid: 472.
     * Event description: Click Save On Add Business Details Page (mobile).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesClickSaveOnAddBusinessDetailsPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickSaveOnAddBusinessDetailsPage = function (params) {
        return this.bi.log(__assign({ evid: 472 }, params));
    };
    /**
    * @typedef {Object} apesSaveEditedNotification1235Params
    * @property {string} componentChanged - which component was changed
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - rule id
    **/
    /**
     * Name: APeS - Save edited notification. Evid: 1235.
     * Event description: APeS - Save edited notification.
    
     * componentChanged - Type: string. Desc: which component was changed
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule id
     * @param {apesSaveEditedNotification1235Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesSaveEditedNotification1235 = function (params) {
        return this.bi.log(__assign({ evid: 1235 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsDeleteValueFailureParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - delete/clear value
    **/
    /**
     * Name: dashboard > site settings > delete value failure. Evid: 318.
     * Event description: user deleted/cleared a value from field - failure.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: delete/clear value
     * @param {dashboardSiteSettingsDeleteValueFailureParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsDeleteValueFailure = function (params) {
        return this.bi.log(__assign({ evid: 318 }, params));
    };
    /**
    * @typedef {Object} quotesCreateQuoteSaveDraftFailedParams
    * @property {string} msid - msid
    * @property {string} origin - create quote, edit quote
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    * @property {string} reason - failure reason
    **/
    /**
     * Name: Quotes - Create quote - Save draft failed. Evid: 79.
     * Event description: Create quote - Save draft failed.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create quote, edit quote
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     *
     * reason - Type: string. Desc: failure reason
     * @param {quotesCreateQuoteSaveDraftFailedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateQuoteSaveDraftFailed = function (params) {
        return this.bi.log(__assign({ evid: 79 }, params));
    };
    /**
    * @typedef {Object} transferSiteOpenTransferDialogClickParams
    * @property {string} hosting - MA /Editor
    * @property {string} block_from_transfer_reason - Block from transferring a site
    * @property {GUID} msid - msid
    * @property {string} origin - quick-actions/roles-contributor/roles-owner
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - open transfer dialog - click. Evid: 63.
     * Event description: user clicks on transfer site and dialog is opened.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * block_from_transfer_reason - Type: string. Desc: Block from transferring a site
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: quick-actions/roles-contributor/roles-owner
     *
     * platform - Type: string.
     * @param {transferSiteOpenTransferDialogClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteOpenTransferDialogClick = function (params) {
        return this.bi.log(__assign({ evid: 63 }, params));
    };
    /**
    * @typedef {Object} transferSiteCancelTransferClickParams
    * @property {string} hosting - MA /Editor
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - cancel transfer - click. Evid: 60.
     * Event description: user clicked on cancel transfer and cancel dialog is opened.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {transferSiteCancelTransferClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteCancelTransferClick = function (params) {
        return this.bi.log(__assign({ evid: 60 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteActivityCenterClickUndoDeletedItemParams
    * @property {string} action_desc - null
    * @property {string} action_url - null
    * @property {number} expire - null
    * @property {GUID} feed_id - null
    * @property {boolean} is_archived - null
    * @property {boolean} is_deleted - null
    * @property {GUID} item_id - null
    * @property {number} items_count - null
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {string} referral - null
    * @property {string} source - null
    * @property {number} src - null
    * @property {string} type - null
    **/
    /**
     * Name: dashboard > site -> activity center -> click undo deleted item. Evid: 103.
    
    
     * action_desc - Type: string.
     *
     * action_url - Type: string.
     *
     * expire - Type: numeric.
     *
     * feed_id - Type: guid.
     *
     * is_archived - Type: bool.
     *
     * is_deleted - Type: bool.
     *
     * item_id - Type: guid.
     *
     * items_count - Type: numeric.
     *
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * referral - Type: string.
     *
     * source - Type: string.
     *
     * src - Type: numeric.
     *
     * type - Type: string.
     * @param {dashboardSiteActivityCenterClickUndoDeletedItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteActivityCenterClickUndoDeletedItem = function (params) {
        return this.bi.log(__assign({ evid: 103 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentCreateYourOwn292Params
    * @property {number} countAutomations - count how many automations was presented in the widget
    * @property {GUID} msid - msid
    * @property {string} origin - button, link, header, success creation dialog
    * @property {string} platform - null
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    **/
    /**
     * Name: Automations > DaComponent > Create Your Own. Evid: 292.
     * Event description: Automations > DaComponent > Create Your Own.
    
     * countAutomations - Type: numeric. Desc: count how many automations was presented in the widget
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: button, link, header, success creation dialog
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     * @param {automationsDaComponentCreateYourOwn292Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentCreateYourOwn292 = function (params) {
        return this.bi.log(__assign({ evid: 292 }, params));
    };
    /**
    * @typedef {Object} sidebarStateParams
    * @property {string} active_item - the active sidebar item the user is navigated to
    * @property {string} category_items_list - list of category items in the sidebar menu (might be under the fold)
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - --
    * @property {string} platform - null
    * @property {string} referral_info - referral of previous page
    * @property {string} section_name - the name of the section
    * @property {string} view - the page loaded with the sidebar (not internal page - module)
    **/
    /**
     * Name: Sidebar State. Evid: 107.
     * Event description: on each Bizmgr page, the event sends the current state of the sidebar.
    this event will be sent also when the user arrives to Bizgmr from an external link.
    e.g. main menu/setting menu/marketing tools menu etc..
    
     * active_item - Type: string. Desc: the active sidebar item the user is navigated to
     *
     * category_items_list - Type: string. Desc: list of category items in the sidebar menu (might be under the fold)
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: referral of previous page
     *
     * section_name - Type: string. Desc: the name of the section
     *
     * view - Type: string. Desc: the page loaded with the sidebar (not internal page - module)
     * @param {sidebarStateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.sidebarState = function (params) {
        return this.bi.log(__assign({ evid: 107 }, params));
    };
    /**
    * @typedef {Object} automationsStoresChooseSpecificProductClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} productName - which product was chosen
    **/
    /**
     * Name: Automations - stores choose specific product click. Evid: 1319.
     * Event description: Automations - stores choose specific product click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * productName - Type: string. Desc: which product was chosen
     * @param {automationsStoresChooseSpecificProductClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsStoresChooseSpecificProductClick = function (params) {
        return this.bi.log(__assign({ evid: 1319 }, params));
    };
    /**
    * @typedef {Object} quotesCreateQuoteSaveDraftCompleteParams
    * @property {string} msid - msid
    * @property {string} origin - create quote, edit quote
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Create quote - Save draft complete. Evid: 78.
     * Event description: Create quote - Save draft completed.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create quote, edit quote
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesCreateQuoteSaveDraftCompleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateQuoteSaveDraftComplete = function (params) {
        return this.bi.log(__assign({ evid: 78 }, params));
    };
    /**
    * @typedef {Object} quotesFilterInvoicesParams
    * @property {string} filter_type - period, currency, display
    * @property {string} msid - msid
    * @property {string} name - name of filter
    * @property {number} num_of_invoices - number of invoices the user has
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Filter invoices. Evid: 447.
     * Event description: user filters the invoices view.
    
     * filter_type - Type: string. Desc: period, currency, display
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of filter
     *
     * num_of_invoices - Type: numeric. Desc: number of invoices the user has
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesFilterInvoicesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesFilterInvoices = function (params) {
        return this.bi.log(__assign({ evid: 447 }, params));
    };
    /**
    * @typedef {Object} automationsWebhookV2CustomizeStructureParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - webhook v2 - customize structure. Evid: 1395.
     * Event description: Automations - webhook v2 - customize structure.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsWebhookV2CustomizeStructureParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsWebhookV2CustomizeStructure = function (params) {
        return this.bi.log(__assign({ evid: 1395 }, params));
    };
    /**
    * @typedef {Object} notificationsPushNotificationToggleIsDisplayedParams
    * @property {string} feed_name - All Sites/This Site/ Settings
    * @property {string} msid - deprecated
    * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} permission_type - permission
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > Push notification toggle is displayed. Evid: 274.
     * Event description: user clicks the "Allow/ Block " and toggle is displayed.
    
     * feed_name - Type: string. Desc: All Sites/This Site/ Settings
     *
     * msid - Type: string. Desc: deprecated
     *
     * origin - Type: string. Desc: (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * permission_type - Type: string. Desc: permission
     *
     * platform - Type: string.
     * @param {notificationsPushNotificationToggleIsDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsPushNotificationToggleIsDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 274 }, params));
    };
    /**
    * @typedef {Object} automationsPriceQuotesInvoicesSendFeedbackFormParams
    * @property {GUID} msid - msid
    * @property {string} origin - {automations, price quotes, invoices}
    * @property {string} platform - null
    **/
    /**
     * Name: Automations/ Price Quotes/ Invoices > Send Feedback Form. Evid: 232.
     * Event description: user click on Send Feedback.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {automations, price quotes, invoices}
     *
     * platform - Type: string.
     * @param {automationsPriceQuotesInvoicesSendFeedbackFormParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsPriceQuotesInvoicesSendFeedbackForm = function (params) {
        return this.bi.log(__assign({ evid: 232 }, params));
    };
    /**
    * @typedef {Object} dashboardShowMorePopularShortcutsClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > 'show more' popular shortcuts click. Evid: 28.
     * Event description: each time user clicks the 'show more' link.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardShowMorePopularShortcutsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardShowMorePopularShortcutsClick = function (params) {
        return this.bi.log(__assign({ evid: 28 }, params));
    };
    /**
    * @typedef {Object} invoicesItemsListLinkInTooltipProductsParams
    * @property {GUID} appDefId - appDefId
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - Items List - link in tooltip products. Evid: 1317.
     * Event description: Invoices - Items List - link in tooltip products.
    
     * appDefId - Type: guid. Desc: appDefId
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesItemsListLinkInTooltipProductsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesItemsListLinkInTooltipProducts = function (params) {
        return this.bi.log(__assign({ evid: 1317 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteClickNextOnTransferSiteActionFirstWindowParams
    * @property {boolean} addAdmin - true if marked
    * @property {string} hosting - ma/editor
    * @property {boolean} isContributor - true if email is contact
    * @property {boolean} keepCopy - true if marked
    * @property {GUID} msid - --
    * @property {string} name - name of quick action (transfer,etc.)
    * @property {string} origin - --
    * @property {string} stage_process - deprecated
    * @property {string} platform - null
    * @property {boolean} transferDomain - true if marked
    * @property {boolean} transferPremium - true if marked
    **/
    /**
     * Name: dashboard > site -> click next on transfer site action first window. Evid: 48.
     * Event description: when user click on quick action, and then click next after chooses relevant transfer options.
    
     * addAdmin - Type: bool. Desc: true if marked
     *
     * hosting - Type: string. Desc: ma/editor
     *
     * isContributor - Type: bool. Desc: true if email is contact
     *
     * keepCopy - Type: bool. Desc: true if marked
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: name of quick action (transfer,etc.)
     *
     * origin - Type: string. Desc: --
     *
     * stage_process - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * transferDomain - Type: bool. Desc: true if marked
     *
     * transferPremium - Type: bool. Desc: true if marked
     * @param {dashboardSiteClickNextOnTransferSiteActionFirstWindowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteClickNextOnTransferSiteActionFirstWindow = function (params) {
        return this.bi.log(__assign({ evid: 48 }, params));
    };
    /**
    * @typedef {Object} rolesDeleteRoleClickParams
    * @property {string} accept_email - accepted email
    * @property {string} hosting - MA / Editor
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - delete role - click. Evid: 360.
     * Event description: user clicked on delete role.
    
     * accept_email - Type: string. Desc: accepted email
     *
     * hosting - Type: string. Desc: MA / Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesDeleteRoleClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesDeleteRoleClick = function (params) {
        return this.bi.log(__assign({ evid: 360 }, params));
    };
    /**
    * @typedef {Object} ascendPpClickOnShowMoreLessParams
    * @property {string} action - more/less
    * @property {string} origin - product name open PP
    * @property {string} platform - null
    * @property {string} productName - product name of show more/less
    * @property {string} referralInfo - button name open PP
    **/
    /**
     * Name: Ascend PP - Click on show more/less. Evid: 132.
     * Event description: User click on show more/less in Ascend PP.
    
     * action - Type: string. Desc: more/less
     *
     * origin - Type: string. Desc: product name open PP
     *
     * platform - Type: string.
     *
     * productName - Type: string. Desc: product name of show more/less
     *
     * referralInfo - Type: string. Desc: button name open PP
     * @param {ascendPpClickOnShowMoreLessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpClickOnShowMoreLess = function (params) {
        return this.bi.log(__assign({ evid: 132 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteNewsFilterParams
    * @property {string} filter_type - null
    * @property {string} location - null
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} type - null
    **/
    /**
     * Name: dashboard > site -> news -> filter. Evid: 21.
    
    
     * filter_type - Type: string.
     *
     * location - Type: string.
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * type - Type: string.
     * @param {dashboardSiteNewsFilterParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteNewsFilter = function (params) {
        return this.bi.log(__assign({ evid: 21 }, params));
    };
    /**
    * @typedef {Object} quotesTabPageViewParams
    * @property {string} experience - deprecated
    * @property {string} msid - msid
    * @property {string} name - tab name
    * @property {string} origin - web,native
    * @property {string} place - how the user arrived to the tab
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes/Invoices - tab page view. Evid: 400.
     * Event description: wix invoices/ quotes tab page view.
    
     * experience - Type: string. Desc: deprecated
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: tab name
     *
     * origin - Type: string. Desc: web,native
     *
     * place - Type: string. Desc: how the user arrived to the tab
     *
     * platform - Type: string.
     * @param {quotesTabPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesTabPageView = function (params) {
        return this.bi.log(__assign({ evid: 400 }, params));
    };
    /**
    * @typedef {Object} quotesSettingsNewTaxPageCancelParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - create,edit
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - New tax page - Cancel. Evid: 435.
     * Event description: Settings - New tax page - Cancel (for every close (cancel, x, background click)).
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create,edit
     *
     * platform - Type: string.
     * @param {quotesSettingsNewTaxPageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSettingsNewTaxPageCancel = function (params) {
        return this.bi.log(__assign({ evid: 435 }, params));
    };
    /**
    * @typedef {Object} crmHomeButtonClickedParams
    * @property {string} button_name - button name
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} section - i.e create automation , manage finance , all crm tabs
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: CRM Home - Button Clicked. Evid: 354.
     * Event description: CRM Home - Button Clicked.
    
     * button_name - Type: string. Desc: button name
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * section - Type: string. Desc: i.e create automation , manage finance , all crm tabs
     *
     * uuid - Type: guid. Desc: uuid
     * @param {crmHomeButtonClickedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeButtonClicked = function (params) {
        return this.bi.log(__assign({ evid: 354 }, params));
    };
    /**
    * @typedef {Object} bizManagerNavigateToViewStartParams
    * @property {GUID} app_id - last  application loaded
    * @property {string} hosting - MA/editor
    * @property {string} module_id - *not in use*
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {string} prev_module_id - *not in use*
    * @property {string} prev_sub_view - prev page in app
    * @property {string} prev_view - last view loaded
    * @property {string} referral_info - specific button that triggers the navigation
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: Biz Manager - Navigate To View - start. Evid: 566.
     * Event description: user's click triggers the Router to start a navigation.
    
     * app_id - Type: guid. Desc: last  application loaded
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * module_id - Type: string. Desc: *not in use*
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * prev_module_id - Type: string. Desc: *not in use*
     *
     * prev_sub_view - Type: string. Desc: prev page in app
     *
     * prev_view - Type: string. Desc: last view loaded
     *
     * referral_info - Type: string. Desc: specific button that triggers the navigation
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {bizManagerNavigateToViewStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerNavigateToViewStart = function (params) {
        return this.bi.log(__assign({ evid: 566 }, params));
    };
    /**
    * @typedef {Object} automationsNewHomeBannerLoadingStartParams
    * @property {string} jsonData - json
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > New Home - Banner Loading Start. Evid: 241.
     * Event description: All data when opening automation before banner.
    
     * jsonData - Type: string. Desc: json
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsNewHomeBannerLoadingStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsNewHomeBannerLoadingStart = function (params) {
        return this.bi.log(__assign({ evid: 241 }, params));
    };
    /**
    * @typedef {Object} transferSiteGetTransferLinkClickParams
    * @property {string} hosting - MA /Editor
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - get transfer link - click. Evid: 59.
     * Event description: user clicked on get transfer link.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {transferSiteGetTransferLinkClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteGetTransferLinkClick = function (params) {
        return this.bi.log(__assign({ evid: 59 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteInvoicePageOkParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete invoice page - Ok. Evid: 431.
     * Event description: OK clicked in delete page.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesDeleteInvoicePageOkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteInvoicePageOk = function (params) {
        return this.bi.log(__assign({ evid: 431 }, params));
    };
    /**
    * @typedef {Object} accountSettingsSetPasswordModalLoadParams
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings - Set Password Modal Load. Evid: 688.
     * Event description: When a user tries to access account settings after social signup (which means he didn't choose a wix password when signing up), the set password modal pops up and asks him to choose an account password..
    
     * platform - Type: string.
     * @param {accountSettingsSetPasswordModalLoadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsSetPasswordModalLoad = function (params) {
        return this.bi.log(__assign({ evid: 688 }, params));
    };
    /**
    * @typedef {Object} rolesAddNewRoleClickParams
    * @property {string} hosting - MA/Editor
    * @property {boolean} is_blog_shown - true if shown (blog manager appears only for sites with blog)
    * @property {boolean} is_events_shown - true if shown (event manager appears only for sites with events )
    * @property {GUID} msid - msid
    * @property {string} origin - name of tab dashboard/authorization/my sites
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    * @property {number} src - null
    **/
    /**
     * Name: Roles - add new role - open dialog. Evid: 350.
     * Event description: click on add new from authorization tab in site settings.
    
     * hosting - Type: string. Desc: MA/Editor
     *
     * is_blog_shown - Type: bool. Desc: true if shown (blog manager appears only for sites with blog)
     *
     * is_events_shown - Type: bool. Desc: true if shown (event manager appears only for sites with events )
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of tab dashboard/authorization/my sites
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     *
     * src - Type: numeric.
     * @param {rolesAddNewRoleClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesAddNewRoleClick = function (params) {
        return this.bi.log(__assign({ evid: 350 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersCancelDeleteParams
    * @property {GUID} msid - msid
    * @property {string} origin - origin page
    * @property {string} platform - null
    * @property {string} recipe_name - recipie
    * @property {GUID} rule_id - id of rule
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Cancel delete. Evid: 210.
     * Event description: Save or update trigger.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipie
     *
     * rule_id - Type: guid. Desc: id of rule
     *
     * src - Type: numeric.
     * @param {dashboardTriggersCancelDeleteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersCancelDelete = function (params) {
        return this.bi.log(__assign({ evid: 210 }, params));
    };
    /**
    * @typedef {Object} deleteLocationModalIsOpenedParams
    * @property {string} hosting - dashboard/editor/ADI
    * @property {boolean} is_default - true if trying to delete default location
    * @property {boolean} is_draft - true if the location is a draft or not
    * @property {boolean} is_multiple_choice - true/ false if the modal present a few options to choose from
    * @property {GUID} msid - msid
    * @property {string} page_view - business info
    * @property {string} platform - null
    **/
    /**
     * Name: Delete Location Modal is opened. Evid: 1217.
     * Event description: When the delete modal is opened (after clicking delete location).
    
     * hosting - Type: string. Desc: dashboard/editor/ADI
     *
     * is_default - Type: bool. Desc: true if trying to delete default location
     *
     * is_draft - Type: bool. Desc: true if the location is a draft or not
     *
     * is_multiple_choice - Type: bool. Desc: true/ false if the modal present a few options to choose from
     *
     * msid - Type: guid. Desc: msid
     *
     * page_view - Type: string. Desc: business info
     *
     * platform - Type: string.
     * @param {deleteLocationModalIsOpenedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.deleteLocationModalIsOpened = function (params) {
        return this.bi.log(__assign({ evid: 1217 }, params));
    };
    /**
    * @typedef {Object} twoFactorAuthenticationSetupDisableClickParams
    * @property {string} platform - null
    **/
    /**
     * Name: Two Factor Authentication Setup - Disable Click. Evid: 687.
     * Event description: The user clicks on "disable" in the disable modal for 2-factor authentication (confirms disable).
    
     * platform - Type: string.
     * @param {twoFactorAuthenticationSetupDisableClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.twoFactorAuthenticationSetupDisableClick = function (params) {
        return this.bi.log(__assign({ evid: 687 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteQuickActionDialogApproveParams
    * @property {GUID} msid - -
    * @property {string} name - quick action name
    * @property {string} origin - site-settings, my-sites
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site -> quick action dialog  - approve. Evid: 42.
     * Event description: user clicks approve in dialog of a quick action (e.g approve rename).
    
     * msid - Type: guid. Desc: -
     *
     * name - Type: string. Desc: quick action name
     *
     * origin - Type: string. Desc: site-settings, my-sites
     *
     * platform - Type: string.
     * @param {dashboardSiteQuickActionDialogApproveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteQuickActionDialogApprove = function (params) {
        return this.bi.log(__assign({ evid: 42 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoNavigateAwayDialogIsShownParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - navigate away dialog is shown. Evid: 557.
     * Event description: user navigates away and gets the navigate away modal.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoNavigateAwayDialogIsShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoNavigateAwayDialogIsShown = function (params) {
        return this.bi.log(__assign({ evid: 557 }, params));
    };
    /**
    * @typedef {Object} mySitesShowTooltipParams
    * @property {string} name - tooltip name
    * @property {string} num_of_sites - num of sites on screen
    * @property {string} platform - null
    **/
    /**
     * Name: My Sites - show tooltip. Evid: 159.
     * Event description: select a site tooltip.
    
     * name - Type: string. Desc: tooltip name
     *
     * num_of_sites - Type: string. Desc: num of sites on screen
     *
     * platform - Type: string.
     * @param {mySitesShowTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mySitesShowTooltip = function (params) {
        return this.bi.log(__assign({ evid: 159 }, params));
    };
    /**
    * @typedef {Object} dashboardFinishLoadingLoadingTimeFromStartModuleParams
    * @property {string} hosting - dashboard/editor/onboarding
    * @property {number} loading_time - loading from start loading the page
    * @property {GUID} msid - --
    * @property {string} platform - --
    * @property {string} refferal_info - refferal
    * @property {string} sub_view - sub_view
    * @property {string} view - requested view
    **/
    /**
     * Name: dashboard > finish loading > loading time from start module. Evid: 1215.
     * Event description: event to check the loading time from start loading.
    
     * hosting - Type: string. Desc: dashboard/editor/onboarding
     *
     * loading_time - Type: numeric. Desc: loading from start loading the page
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string. Desc: --
     *
     * refferal_info - Type: string. Desc: refferal
     *
     * sub_view - Type: string. Desc: sub_view
     *
     * view - Type: string. Desc: requested view
     * @param {dashboardFinishLoadingLoadingTimeFromStartModuleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardFinishLoadingLoadingTimeFromStartModule = function (params) {
        return this.bi.log(__assign({ evid: 1215 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoFieldValueChangedNotSavedParams
    * @property {string} category - category of of the selected sub-category
    * @property {string} field_type - text, drop down, image, ..
    * @property {string} fold_name - name of fold: basic info, contact info, location language and region,
    * @property {string} hosting - MA/editor
    * @property {string} industry_id - industry_id of of the selected sub-category
    * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
    * @property {GUID} msid - metasite id
    * @property {string} name - name of field (key): business name, description, main category, sub category, etc
    * @property {string} page_view - The page where the changes were made. before the new settings the page was only general info
    * @property {string} platform - null
    * @property {string} structure_id - structure_id of the selected sub-category
    * @property {string} sub_category - ADI business type of the selection in business info category
    * @property {string} value - value of field: only for drop down fields
    **/
    /**
     * Name: Biz Manager - Biz Info - field value changed (not saved). Evid: 551.
     * Event description: user updates a field in the business info. reported only when field is out of focus.
    
     * category - Type: string. Desc: category of of the selected sub-category
     *
     * field_type - Type: string. Desc: text, drop down, image, ..
     *
     * fold_name - Type: string. Desc: name of fold: basic info, contact info, location language and region,
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * industry_id - Type: string. Desc: industry_id of of the selected sub-category
     *
     * location_details - Type: string. Desc: 0- first location (create), 1-second location (add), 2- third location (add),...
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: name of field (key): business name, description, main category, sub category, etc
     *
     * page_view - Type: string. Desc: The page where the changes were made. before the new settings the page was only general info
     *
     * platform - Type: string.
     *
     * structure_id - Type: string. Desc: structure_id of the selected sub-category
     *
     * sub_category - Type: string. Desc: ADI business type of the selection in business info category
     *
     * value - Type: string. Desc: value of field: only for drop down fields
     * @param {bizManagerBizInfoFieldValueChangedNotSavedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoFieldValueChangedNotSaved = function (params) {
        return this.bi.log(__assign({ evid: 551 }, params));
    };
    /**
    * @typedef {Object} bizManagerClickOnWidgetCtaParams
    * @property {string} app_id - app def id
    * @property {number} done_steps - number of done steps in setup
    * @property {string} hosting - MA/editor
    * @property {string} module_id - module name
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {number} skipped_steps - skipped_steps
    * @property {string} step - step id
    * @property {GUID} step_guid - deprecated
    * @property {number} step_id - deprecated
    * @property {number} steps - number of steps in setup
    **/
    /**
     * Name: Biz Manager - click on setup widget CTA. Evid: 579.
     * Event description: user clicked on a CTA in TPA setup widget in biz mgr.
    
     * app_id - Type: string. Desc: app def id
     *
     * done_steps - Type: numeric. Desc: number of done steps in setup
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * module_id - Type: string. Desc: module name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * skipped_steps - Type: numeric. Desc: skipped_steps
     *
     * step - Type: string. Desc: step id
     *
     * step_guid - Type: guid. Desc: deprecated
     *
     * step_id - Type: numeric. Desc: deprecated
     *
     * steps - Type: numeric. Desc: number of steps in setup
     * @param {bizManagerClickOnWidgetCtaParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickOnWidgetCta = function (params) {
        return this.bi.log(__assign({ evid: 579 }, params));
    };
    /**
    * @typedef {Object} quotesInvoicesOnboardingPageViewParams
    * @property {string} msid - msid
    * @property {string} name - phase name
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Invoices onboarding page view. Evid: 401.
     * Event description: wix invoices onboarding flow - page view.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: phase name
     *
     * platform - Type: string.
     * @param {quotesInvoicesOnboardingPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesInvoicesOnboardingPageView = function (params) {
        return this.bi.log(__assign({ evid: 401 }, params));
    };
    /**
    * @typedef {Object} bizManagerSetupWidgetOmniPhaseCompletedInDashboardParams
    * @property {string} asset_campaign_guid - omni setup phase id, sent the event for each "done" phase
    * @property {string} hosting - ADI/Editor/MA
    * @property {GUID} msid - msid
    * @property {number} number_of_resolved_items - deprecate
    * @property {number} number_of_skipped_items - deprecate
    * @property {string} platform - null
    * @property {string} resolved_items - a list of asset campaign IDs that were resolved in the phase
    * @property {string} skipped_items - a list of asset campaign IDs that were skipped in the phase
    **/
    /**
     * Name: Biz Manager - setup widget - OMNI Phase Completed in Dashboard. Evid: 284.
     * Event description: When a user doesn't see an open phase in the dashboard (since they completed all tasks in the OMNI widget or the phase is collapsed - since they skipped all items in the phase), sent each time the user enters the dashboard - home.
    
     * asset_campaign_guid - Type: string. Desc: omni setup phase id, sent the event for each "done" phase
     *
     * hosting - Type: string. Desc: ADI/Editor/MA
     *
     * msid - Type: guid. Desc: msid
     *
     * number_of_resolved_items - Type: numeric. Desc: deprecate
     *
     * number_of_skipped_items - Type: numeric. Desc: deprecate
     *
     * platform - Type: string.
     *
     * resolved_items - Type: string. Desc: a list of asset campaign IDs that were resolved in the phase
     *
     * skipped_items - Type: string. Desc: a list of asset campaign IDs that were skipped in the phase
     * @param {bizManagerSetupWidgetOmniPhaseCompletedInDashboardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerSetupWidgetOmniPhaseCompletedInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 284 }, params));
    };
    /**
    * @typedef {Object} searchScrollingInResultViewParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Search > scrolling in result view. Evid: 163.
     * Event description: send an event when a user's scroll in search's results.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {searchScrollingInResultViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.searchScrollingInResultView = function (params) {
        return this.bi.log(__assign({ evid: 163 }, params));
    };
    /**
    * @typedef {Object} ascendPpClickOnCycleInPpParams
    * @property {number} cycleId - cycle id
    * @property {string} cycle_name - cycle name
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - packageid
    * @property {string} package_name - packagename
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    **/
    /**
     * Name: Ascend PP - Click on Cycle in PP. Evid: 136.
     * Event description: User click on a cycle.
    
     * cycleId - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: cycle name
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: packageid
     *
     * package_name - Type: string. Desc: packagename
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     * @param {ascendPpClickOnCycleInPpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpClickOnCycleInPp = function (params) {
        return this.bi.log(__assign({ evid: 136 }, params));
    };
    /**
    * @typedef {Object} bizManagerClickOnToastParams
    * @property {string} click_type - CTA/dismiss
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} name - toast name, supplied by toast initiator
    * @property {string} platform - null
    * @property {string} scope - toast scope {app/ dashboard}
    * @property {string} severity - high, normal, low
    * @property {number} timeout - seconds to auto hide toast, 0 is sticky toast
    * @property {string} type - info, error, warning, success, premium
    **/
    /**
     * Name: Biz Manager - click on toast. Evid: 86.
     * Event description: user clicks on toast CTA or dismisses toast.
    
     * click_type - Type: string. Desc: CTA/dismiss
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: toast name, supplied by toast initiator
     *
     * platform - Type: string.
     *
     * scope - Type: string. Desc: toast scope {app/ dashboard}
     *
     * severity - Type: string. Desc: high, normal, low
     *
     * timeout - Type: numeric. Desc: seconds to auto hide toast, 0 is sticky toast
     *
     * type - Type: string. Desc: info, error, warning, success, premium
     * @param {bizManagerClickOnToastParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerClickOnToast = function (params) {
        return this.bi.log(__assign({ evid: 86 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersReachStepCustomizeTheActionParams
    * @property {string} flowType - flow in which the save happens: {create, edit}
    * @property {number} index - index for drip campaign
    * @property {boolean} is_auto - window opens automatically/manually
    * @property {GUID} msid - msid
    * @property {string} origin - deprecated
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger already customized, null if it first time customization
    * @property {number} src - deprecated
    **/
    /**
     * Name: Automations > Reach step customize the action. Evid: 207.
     * Event description: open/close choose an action.
    
     * flowType - Type: string. Desc: flow in which the save happens: {create, edit}
     *
     * index - Type: numeric. Desc: index for drip campaign
     *
     * is_auto - Type: bool. Desc: window opens automatically/manually
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger already customized, null if it first time customization
     *
     * src - Type: numeric. Desc: deprecated
     * @param {dashboardTriggersReachStepCustomizeTheActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersReachStepCustomizeTheAction = function (params) {
        return this.bi.log(__assign({ evid: 207 }, params));
    };
    /**
    * @typedef {Object} rolesGetInviteLinkParams
    * @property {string} action - not in use
    * @property {string} hosting - MA /Editor
    * @property {string} invite_role - invited role
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Roles - get invite link. Evid: 368.
     * Event description: user clicked on get invite link.
    
     * action - Type: string. Desc: not in use
     *
     * hosting - Type: string. Desc: MA /Editor
     *
     * invite_role - Type: string. Desc: invited role
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {rolesGetInviteLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesGetInviteLink = function (params) {
        return this.bi.log(__assign({ evid: 368 }, params));
    };
    /**
    * @typedef {Object} ascendPpScrollToEndParams
    * @property {string} origin - product name open PP
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    * @property {number} timeInPage - in milisec
    **/
    /**
     * Name: Ascend PP - Scroll to end. Evid: 133.
     * Event description: User scroll to end of table.
    
     * origin - Type: string. Desc: product name open PP
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     *
     * timeInPage - Type: numeric. Desc: in milisec
     * @param {ascendPpScrollToEndParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpScrollToEnd = function (params) {
        return this.bi.log(__assign({ evid: 133 }, params));
    };
    /**
    * @typedef {Object} quotesClickOnCopyLinkFromMoreActionsParams
    * @property {GUID} invoiceId - invoiceId
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click on copy-link from more actions. Evid: 727.
     * Event description: Quotes - click on copy-link from more actions.
    
     * invoiceId - Type: guid. Desc: invoiceId
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesClickOnCopyLinkFromMoreActionsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickOnCopyLinkFromMoreActions = function (params) {
        return this.bi.log(__assign({ evid: 727 }, params));
    };
    /**
    * @typedef {Object} automationsAskMoreLinkParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > ask more link. Evid: 744.
     * Event description: Automations > ask more link.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsAskMoreLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsAskMoreLink = function (params) {
        return this.bi.log(__assign({ evid: 744 }, params));
    };
    /**
    * @typedef {Object} crmHomeTopCarouselLoadEndParams
    * @property {number} loadingTime - loading time in ms
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - Top carousel load end. Evid: 1387.
     * Event description: CRM Home - Top carousel main CTA click.
    
     * loadingTime - Type: numeric. Desc: loading time in ms
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeTopCarouselLoadEndParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeTopCarouselLoadEnd = function (params) {
        return this.bi.log(__assign({ evid: 1387 }, params));
    };
    /**
    * @typedef {Object} myAccountClickOnHelpParams
    * @property {string} app_id - null
    * @property {string} origin - null
    * @property {string} origin_app - if dashboard then 'MAD'
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: My Account --> Click on Help. Evid: 44.
     * Event description: User click on help center (Can be either from '?' button or account -->help center).
    
     * app_id - Type: string.
     *
     * origin - Type: string.
     *
     * origin_app - Type: string. Desc: if dashboard then 'MAD'
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     * @param {myAccountClickOnHelpParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.myAccountClickOnHelp = function (params) {
        return this.bi.log(__assign({ evid: 44 }, params));
    };
    /**
    * @typedef {Object} ascendHoverOnUpgradeAscendParams
    * @property {string} appName - BM App
    * @property {string} button_name - upgrade button / ascend title
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Ascend - Hover on Upgrade Ascend. Evid: 188.
     * Event description: Hover on Upgrade Ascend.
    
     * appName - Type: string. Desc: BM App
     *
     * button_name - Type: string. Desc: upgrade button / ascend title
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {ascendHoverOnUpgradeAscendParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendHoverOnUpgradeAscend = function (params) {
        return this.bi.log(__assign({ evid: 188 }, params));
    };
    /**
    * @typedef {Object} accountSettingsDeactivateAccountClickOnLearnMoreParams
    * @property {string} platform - null
    * @property {string} section - deactivate account/recovery phone/two factor authentication/2FA disable/username/email address
    **/
    /**
     * Name: Account Settings - Learn More. Evid: 680.
     * Event description: The user clicks on 'Learn more' after clicking the "i" icon, in account settings (redesign), in a few possible locations on the page.
    
     * platform - Type: string.
     *
     * section - Type: string. Desc: deactivate account/recovery phone/two factor authentication/2FA disable/username/email address
     * @param {accountSettingsDeactivateAccountClickOnLearnMoreParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsDeactivateAccountClickOnLearnMore = function (params) {
        return this.bi.log(__assign({ evid: 680 }, params));
    };
    /**
    * @typedef {Object} successfullyDeletedLocationParams
    * @property {string} hosting - dashboard/editor/ADI
    * @property {boolean} is_default - true if trying to delete default location
    * @property {boolean} is_multiple_choice - true/ false if the modal present a few options to choose from
    * @property {GUID} msid - msid
    * @property {string} page_view - business info
    * @property {string} platform - null
    **/
    /**
     * Name: Successfully deleted location. Evid: 1218.
     * Event description: When the user clicks on delete location and the location successfully deleted and removed from the db.
    
     * hosting - Type: string. Desc: dashboard/editor/ADI
     *
     * is_default - Type: bool. Desc: true if trying to delete default location
     *
     * is_multiple_choice - Type: bool. Desc: true/ false if the modal present a few options to choose from
     *
     * msid - Type: guid. Desc: msid
     *
     * page_view - Type: string. Desc: business info
     *
     * platform - Type: string.
     * @param {successfullyDeletedLocationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.successfullyDeletedLocation = function (params) {
        return this.bi.log(__assign({ evid: 1218 }, params));
    };
    /**
    * @typedef {Object} dashboardAccountSettingsHoverOverSendConfirmationIParams
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > account settings -> hover over 'send confirmation' i. Evid: 66.
     * Event description: user hovers the i of 'send confirmation email'.
    
     * platform - Type: string.
     * @param {dashboardAccountSettingsHoverOverSendConfirmationIParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardAccountSettingsHoverOverSendConfirmationI = function (params) {
        return this.bi.log(__assign({ evid: 66 }, params));
    };
    /**
    * @typedef {Object} automationsEditAutomationOpenParams
    * @property {boolean} isPreinsalled - if the automation was pre installed
    * @property {GUID} msid - msid
    * @property {string} origin - where did the automation were edited from
    * @property {string} platform - null
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > Edit automation open. Evid: 390.
     * Event description: Automations > Edit automation open.
    
     * isPreinsalled - Type: bool. Desc: if the automation was pre installed
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: where did the automation were edited from
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {automationsEditAutomationOpenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsEditAutomationOpen = function (params) {
        return this.bi.log(__assign({ evid: 390 }, params));
    };
    /**
    * @typedef {Object} automationsRenameAutomationClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > Rename Automation Click. Evid: 248.
     * Event description: Automations > Rename Automation Click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {automationsRenameAutomationClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsRenameAutomationClick = function (params) {
        return this.bi.log(__assign({ evid: 248 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteQuotePageCancelParams
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Delete quote page - Cancel. Evid: 92.
     * Event description: cancel in delete page (for every close (cancel, x, background click)).
    
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesDeleteQuotePageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteQuotePageCancel = function (params) {
        return this.bi.log(__assign({ evid: 92 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsClosingComponentParams
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was selected
    * @property {string} origin - name of current tab
    * @property {string} place - close type (x/cancel...)
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site settings > closing component. Evid: 320.
     * Event description: user closed site settings' component.
    
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was selected
     *
     * origin - Type: string. Desc: name of current tab
     *
     * place - Type: string. Desc: close type (x/cancel...)
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardSiteSettingsClosingComponentParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsClosingComponent = function (params) {
        return this.bi.log(__assign({ evid: 320 }, params));
    };
    /**
    * @typedef {Object} twoFactorAuthenticationSetupDisableActionParams
    * @property {string} platform - null
    **/
    /**
     * Name: Two Factor Authentication Setup - Disable Modal. Evid: 686.
     * Event description: The user clicks on 'disable' to disable 2-factor authentication.
    
     * platform - Type: string.
     * @param {twoFactorAuthenticationSetupDisableActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.twoFactorAuthenticationSetupDisableAction = function (params) {
        return this.bi.log(__assign({ evid: 686 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteProductPageCancelParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete product page - Cancel. Evid: 420.
     * Event description: cancel in delete product page (for every close (cancel, x, background click)).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDeleteProductPageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteProductPageCancel = function (params) {
        return this.bi.log(__assign({ evid: 420 }, params));
    };
    /**
    * @typedef {Object} mySitesEditSiteParams
    * @property {string} ds_origin - destination
    * @property {string} hosting - hosting
    * @property {GUID} msid - msid
    * @property {string} origin - {site_list_top, site_list_bottom, top_bar, account_templates,...}
    * @property {string} place - origin inside page
    * @property {string} platform - platform
    **/
    /**
     * Name: My Sites - edit site. Evid: 486.
     * Event description: clicking on edit site in My Sites.
    
     * ds_origin - Type: string. Desc: destination
     *
     * hosting - Type: string. Desc: hosting
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {site_list_top, site_list_bottom, top_bar, account_templates,...}
     *
     * place - Type: string. Desc: origin inside page
     *
     * platform - Type: string. Desc: platform
     * @param {mySitesEditSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mySitesEditSite = function (params) {
        return this.bi.log(__assign({ evid: 486 }, params));
    };
    /**
    * @typedef {Object} quotesDismissGetWixAppBannerParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name {get wix app}
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - dismiss get wix app banner. Evid: 475.
     * Event description: dismiss get wix app banner.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name {get wix app}
     *
     * platform - Type: string.
     * @param {quotesDismissGetWixAppBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDismissGetWixAppBanner = function (params) {
        return this.bi.log(__assign({ evid: 475 }, params));
    };
    /**
    * @typedef {Object} quotesPrintInvoice423Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - my invoices, preview
    * @property {string} paymentType - 'recurring','one time'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Print invoice. Evid: 423.
     * Event description: print invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices, preview
     *
     * paymentType - Type: string. Desc: 'recurring','one time'
     *
     * platform - Type: string.
     * @param {quotesPrintInvoice423Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPrintInvoice423 = function (params) {
        return this.bi.log(__assign({ evid: 423 }, params));
    };
    /**
    * @typedef {Object} teamManagementGetInviteLinkParams
    * @property {string} invite_status - pending/expired/leave team
    * @property {string} origin - where the dialog was opened from
    * @property {string} platform - null
    * @property {string} role - the deleted user’s role
    **/
    /**
     * Name: Team Management – get invite link. Evid: 182.
     * Event description: When a user clicks on get invitation link.
    
     * invite_status - Type: string. Desc: pending/expired/leave team
     *
     * origin - Type: string. Desc: where the dialog was opened from
     *
     * platform - Type: string.
     *
     * role - Type: string. Desc: the deleted user’s role
     * @param {teamManagementGetInviteLinkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementGetInviteLink = function (params) {
        return this.bi.log(__assign({ evid: 182 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnConnectDomainParams
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > click on connect domain. Evid: 50.
    
    
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardClickOnConnectDomainParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnConnectDomain = function (params) {
        return this.bi.log(__assign({ evid: 50 }, params));
    };
    /**
    * @typedef {Object} ascendPpPageViewParams
    * @property {GUID} app_id - app_id
    * @property {number} num_of_packages - num_of_packages presented in the PP
    * @property {string} origin - product name open PP
    * @property {string} platform - native or web
    * @property {string} referralInfo - button name open PP
    **/
    /**
     * Name: Ascend PP - Page view. Evid: 131.
     * Event description: User view Ascend PP.
    
     * app_id - Type: guid. Desc: app_id
     *
     * num_of_packages - Type: numeric. Desc: num_of_packages presented in the PP
     *
     * origin - Type: string. Desc: product name open PP
     *
     * platform - Type: string. Desc: native or web
     *
     * referralInfo - Type: string. Desc: button name open PP
     * @param {ascendPpPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpPageView = function (params) {
        return this.bi.log(__assign({ evid: 131 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsDomainSslPopupCancelParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {string} mode - {Turn on SSL,Remove SSL}
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site settings > Domain > SSL popup cancel. Evid: 322.
     * Event description: close Pop-up window either with 'cancel' option or 'X' ..
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * mode - Type: string. Desc: {Turn on SSL,Remove SSL}
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     * @param {dashboardSiteSettingsDomainSslPopupCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsDomainSslPopupCancel = function (params) {
        return this.bi.log(__assign({ evid: 322 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesWelcomeMessageForProsClickParams
    * @property {string} action - check it out, close, disable
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > My Sites - welcome message for pros click. Evid: 155.
     * Event description: user clicked in welcome message of pro account, clicks":  close, disable, "check it out".
    
     * action - Type: string. Desc: check it out, close, disable
     *
     * platform - Type: string.
     * @param {dashboardMySitesWelcomeMessageForProsClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesWelcomeMessageForProsClick = function (params) {
        return this.bi.log(__assign({ evid: 155 }, params));
    };
    /**
    * @typedef {Object} viewedAllUpdatesParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - View all updates. Evid: 343.
     * Event description: Users gets to the bottom of the feed.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {viewedAllUpdatesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.viewedAllUpdates = function (params) {
        return this.bi.log(__assign({ evid: 343 }, params));
    };
    /**
    * @typedef {Object} quotesAddingBusinessLogoParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Adding Business Logo. Evid: 470.
     * Event description: User added business logo (mobile).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesAddingBusinessLogoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddingBusinessLogo = function (params) {
        return this.bi.log(__assign({ evid: 470 }, params));
    };
    /**
    * @typedef {Object} quotesClickCtaInGetWixAppBannerParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name {get wix app}
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click CTA in get wix app banner. Evid: 476.
     * Event description: User clicks on CTA (get the wix app) in get wix app banner.
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name {get wix app}
     *
     * platform - Type: string.
     * @param {quotesClickCtaInGetWixAppBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickCtaInGetWixAppBanner = function (params) {
        return this.bi.log(__assign({ evid: 476 }, params));
    };
    /**
    * @typedef {Object} accountManagerClickOnBackInSidebarItemParams
    * @property {string} name - unique name that doesn't change when changing the name on the side bar
    * @property {string} platform - null
    * @property {string} referral_info - referral_info
    * @property {string} sidebar_name - the name that appears in the sidebar - can be changed
    **/
    /**
     * Name: Account Manager - click on back in sidebar item. Evid: 115.
     * Event description: user clicks on back from the sidebar in the account manager.
    
     * name - Type: string. Desc: unique name that doesn't change when changing the name on the side bar
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * sidebar_name - Type: string. Desc: the name that appears in the sidebar - can be changed
     * @param {accountManagerClickOnBackInSidebarItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountManagerClickOnBackInSidebarItem = function (params) {
        return this.bi.log(__assign({ evid: 115 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentExploreMoreClick294Params
    * @property {number} countAutomations - count how many automations was presented in the widget
    * @property {GUID} msid - msid
    * @property {string} origin - button, link, header, success creation dialog
    * @property {string} platform - null
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    **/
    /**
     * Name: Automations > DaComponent > Explore More Click. Evid: 294.
     * Event description: Automations > DaComponent > Explore More Click.
    
     * countAutomations - Type: numeric. Desc: count how many automations was presented in the widget
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: button, link, header, success creation dialog
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     * @param {automationsDaComponentExploreMoreClick294Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentExploreMoreClick294 = function (params) {
        return this.bi.log(__assign({ evid: 294 }, params));
    };
    /**
    * @typedef {Object} quotesBoardingPageClickCloseParams
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Boarding Page - click close. Evid: 473.
     * Event description: Quotes - Boarding Page - click close  (mobile).
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesBoardingPageClickCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesBoardingPageClickClose = function (params) {
        return this.bi.log(__assign({ evid: 473 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorPopupSelectActionParams
    * @property {string} action - go to editor/ stay in ADI
    * @property {GUID} msid - site guid
    * @property {string} name - popup name
    * @property {string} platform - null
    * @property {string} siteTypeName - ADI/Editor
    **/
    /**
     * Name: dashboard > site selector popup> select action. Evid: 83.
     * Event description: users selection in the popup- go to editor/ stay in ADI.
    
     * action - Type: string. Desc: go to editor/ stay in ADI
     *
     * msid - Type: guid. Desc: site guid
     *
     * name - Type: string. Desc: popup name
     *
     * platform - Type: string.
     *
     * siteTypeName - Type: string. Desc: ADI/Editor
     * @param {dashboardSiteSelectorPopupSelectActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorPopupSelectAction = function (params) {
        return this.bi.log(__assign({ evid: 83 }, params));
    };
    /**
    * @typedef {Object} automationsNewHomeBannerLoadingEndParams
    * @property {string} jsonData - json
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > New Home - Banner Loading End. Evid: 242.
     * Event description: All data when opening automation after banner.
    
     * jsonData - Type: string. Desc: json
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsNewHomeBannerLoadingEndParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsNewHomeBannerLoadingEnd = function (params) {
        return this.bi.log(__assign({ evid: 242 }, params));
    };
    /**
    * @typedef {Object} quotesVoidPageOkParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Void page - Ok. Evid: 428.
     * Event description: OK clicked in Void page.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesVoidPageOkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesVoidPageOk = function (params) {
        return this.bi.log(__assign({ evid: 428 }, params));
    };
    /**
    * @typedef {Object} bizManagerBizInfoClickOnDiscardButtonParams
    * @property {string} hosting - MA/editor
    * @property {string} location_details - 0- first location (create), 1-second location (add), 2- third location (add),...
    * @property {GUID} msid - metasite id
    * @property {string} page_view - The page where the changes were made (website settings/business info/language and region)
    * @property {string} place - place of discard button: header, footer
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Biz Info - click on discard button. Evid: 554.
     * Event description: user click on discard button.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * location_details - Type: string. Desc: 0- first location (create), 1-second location (add), 2- third location (add),...
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: The page where the changes were made (website settings/business info/language and region)
     *
     * place - Type: string. Desc: place of discard button: header, footer
     *
     * platform - Type: string.
     * @param {bizManagerBizInfoClickOnDiscardButtonParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBizInfoClickOnDiscardButton = function (params) {
        return this.bi.log(__assign({ evid: 554 }, params));
    };
    /**
    * @typedef {Object} settingsLobbyClickOnItemParams
    * @property {string} status - If the red badge is shown when the user clicks then "true", if not "false"
    * @property {string} hosting - MA/editor/onboarding
    * @property {number} item_location_on_page - the location of item in page (order from 0,1,..
    * @property {string} item_name - upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
    * @property {GUID} msid - --
    * @property {string} page_id - page component id of lined page
    * @property {string} platform - null
    * @property {string} section_name - site-details/general/ecommerce/..
    **/
    /**
     * Name: Settings Lobby > Click on Item. Evid: 1158.
     * Event description: when a user clicks on an item in one of the settings' sections,.
    
     * status - Type: string. Desc: If the red badge is shown when the user clicks then "true", if not "false"
     *
     * hosting - Type: string. Desc: MA/editor/onboarding
     *
     * item_location_on_page - Type: numeric. Desc: the location of item in page (order from 0,1,..
     *
     * item_name - Type: string. Desc: upgrade/connect_domain/.../website settings/business info/ roles and permissions/.../accept payments…
     *
     * msid - Type: guid. Desc: --
     *
     * page_id - Type: string. Desc: page component id of lined page
     *
     * platform - Type: string.
     *
     * section_name - Type: string. Desc: site-details/general/ecommerce/..
     * @param {settingsLobbyClickOnItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.settingsLobbyClickOnItem = function (params) {
        return this.bi.log(__assign({ evid: 1158 }, params));
    };
    /**
    * @typedef {Object} accountManagerFinishLoadingAccountManagerParams
    * @property {boolean} initial_load - initial_load
    * @property {number} loading_time - loading_time from 110
    * @property {string} platform - null
    * @property {string} referral_info - referral_info
    **/
    /**
     * Name: account manager - Finish loading account manager. Evid: 111.
     * Event description: start loading account manager.
    
     * initial_load - Type: bool. Desc: initial_load
     *
     * loading_time - Type: numeric. Desc: loading_time from 110
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: referral_info
     * @param {accountManagerFinishLoadingAccountManagerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountManagerFinishLoadingAccountManager = function (params) {
        return this.bi.log(__assign({ evid: 111 }, params));
    };
    /**
    * @typedef {Object} automationsClickOnViewMyAutomationsParams
    * @property {GUID} msid - msid
    * @property {string} origin - statistics banner / view my automations button
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > click on view my automations. Evid: 143.
     * Event description: click on view my automations from:
    statistics banner / view my automations button.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: statistics banner / view my automations button
     *
     * platform - Type: string.
     * @param {automationsClickOnViewMyAutomationsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClickOnViewMyAutomations = function (params) {
        return this.bi.log(__assign({ evid: 143 }, params));
    };
    /**
    * @typedef {Object} accountSettingsUpdatesConfirmEnterPasswordParams
    * @property {string} action - 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
    * @property {boolean} is_valid - true/false
    * @property {string} platform - null
    **/
    /**
     * Name: Account Settings Updates - Confirm Password Click. Evid: 682.
     * Event description: The user clicks on 'ok' after entering the password, in the 'enter password' modal that pops up when updating account settings..
    
     * action - Type: string. Desc: 2FA enable/2FA disable/2FA edit/add recovery phone/remove recovery phone/edit recovery phone/username/email address
     *
     * is_valid - Type: bool. Desc: true/false
     *
     * platform - Type: string.
     * @param {accountSettingsUpdatesConfirmEnterPasswordParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsUpdatesConfirmEnterPassword = function (params) {
        return this.bi.log(__assign({ evid: 682 }, params));
    };
    /**
    * @typedef {Object} hooverNewReleasesIconParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - Hover new releases icon. Evid: 336.
     * Event description: The user hoovers the new releases icon in the top bar of the BM.
    The event tracks the first time per load page..
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {hooverNewReleasesIconParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.hooverNewReleasesIcon = function (params) {
        return this.bi.log(__assign({ evid: 336 }, params));
    };
    /**
    * @typedef {Object} bizManagerDismissTooltipParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} name - tooltip name
    * @property {string} place - where tooltip was shown (sidebar, rename dialog)
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - dismiss tooltip. Evid: 589.
     * Event description: tooltip is dismissed manually.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: tooltip name
     *
     * place - Type: string. Desc: where tooltip was shown (sidebar, rename dialog)
     *
     * platform - Type: string.
     * @param {bizManagerDismissTooltipParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerDismissTooltip = function (params) {
        return this.bi.log(__assign({ evid: 589 }, params));
    };
    /**
    * @typedef {Object} quotesFilterQuotesParams
    * @property {string} filter_type - period, currency, display
    * @property {string} msid - msid
    * @property {string} name - name of filter
    * @property {number} num_of_quotes - number of quotes the user has
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Filter Quotes. Evid: 69.
     * Event description: user filters the Quotes view.
    
     * filter_type - Type: string. Desc: period, currency, display
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of filter
     *
     * num_of_quotes - Type: numeric. Desc: number of quotes the user has
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesFilterQuotesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesFilterQuotes = function (params) {
        return this.bi.log(__assign({ evid: 69 }, params));
    };
    /**
    * @typedef {Object} bizManagerDashboardAssetClickOnArrowParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} click_type - left / right/ link
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} msid - site guid
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - dashboard asset click on arrow. Evid: 597.
     * Event description: asset click on arrow.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * click_type - Type: string. Desc: left / right/ link
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * msid - Type: guid. Desc: site guid
     *
     * platform - Type: string.
     * @param {bizManagerDashboardAssetClickOnArrowParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerDashboardAssetClickOnArrow = function (params) {
        return this.bi.log(__assign({ evid: 597 }, params));
    };
    /**
    * @typedef {Object} quotesClickViewOrderBookingParams
    * @property {string} app_name - app name (stores/booking)
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click view order/booking. Evid: 458.
     * Event description: click on view order/booking, when invoice was created from a stores order/booking.
    
     * app_name - Type: string. Desc: app name (stores/booking)
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesClickViewOrderBookingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickViewOrderBooking = function (params) {
        return this.bi.log(__assign({ evid: 458 }, params));
    };
    /**
    * @typedef {Object} quotesAddPaymentClickParams
    * @property {boolean} fully_paid - true for fully paid selected, false for partial payment selected
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - my invoices,preview
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Add payment click. Evid: 424.
     * Event description: add payment for an invoice click.
    
     * fully_paid - Type: bool. Desc: true for fully paid selected, false for partial payment selected
     *
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices,preview
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesAddPaymentClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddPaymentClick = function (params) {
        return this.bi.log(__assign({ evid: 424 }, params));
    };
    /**
    * @typedef {Object} automationsBannerPresentedStatisticsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations -> Banner presented - Statistics. Evid: 236.
     * Event description: Automations -> Banner presented - Statistics.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsBannerPresentedStatisticsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBannerPresentedStatistics = function (params) {
        return this.bi.log(__assign({ evid: 236 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersAlertDeleteOpenParams
    * @property {GUID} msid - msid
    * @property {string} origin - (e.g: 'Forms') from where this action was called
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Alert delete open. Evid: 214.
     * Event description:  Alert delete open.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: (e.g: 'Forms') from where this action was called
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric.
     * @param {dashboardTriggersAlertDeleteOpenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersAlertDeleteOpen = function (params) {
        return this.bi.log(__assign({ evid: 214 }, params));
    };
    /**
    * @typedef {Object} quotesPrintQuoteParams
    * @property {string} msid - msid
    * @property {string} origin - my invoices, preview
    * @property {string} platform - null
    * @property {GUID} quoteId - quote guid
    **/
    /**
     * Name: Quotes - Print quote. Evid: 88.
     * Event description: print quote.
    
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: my invoices, preview
     *
     * platform - Type: string.
     *
     * quoteId - Type: guid. Desc: quote guid
     * @param {quotesPrintQuoteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPrintQuote = function (params) {
        return this.bi.log(__assign({ evid: 88 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorButtonParams
    * @property {GUID} esi - null
    * @property {GUID} msid - null
    * @property {string} platform - null
    * @property {number} position - The position of the selected site in the page. 1 is the highest site.
    * @property {GUID} site_id - null
    * @property {number} site_type_enriched - null
    * @property {string} siteTypeName - ADI/Editor
    * @property {undefined} site_type - null
    * @property {undefined} siteType - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site selector button. Evid: 25.
    
    
     * esi - Type: guid.
     *
     * msid - Type: guid.
     *
     * platform - Type: string.
     *
     * position - Type: numeric. Desc: The position of the selected site in the page. 1 is the highest site.
     *
     * site_id - Type: guid.
     *
     * site_type_enriched - Type: numeric.
     *
     * siteTypeName - Type: string. Desc: ADI/Editor
     *
     * site_type - Type: map.
     *
     * siteType - Type: map.
     *
     * src - Type: numeric.
     * @param {dashboardSiteSelectorButtonParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorButton = function (params) {
        return this.bi.log(__assign({ evid: 25 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteTaxPageOkParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete tax page - Ok. Evid: 438.
     * Event description: OK click in delete tax page.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDeleteTaxPageOkParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteTaxPageOk = function (params) {
        return this.bi.log(__assign({ evid: 438 }, params));
    };
    /**
    * @typedef {Object} twoFactorAuthenticationSetupEditNumberParams
    * @property {string} platform - null
    **/
    /**
     * Name: Two Factor Authentication Setup - Edit Number. Evid: 685.
     * Event description: The user clicks on 'edit number' to update the phone number chosen for 2-factor authentication.
    
     * platform - Type: string.
     * @param {twoFactorAuthenticationSetupEditNumberParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.twoFactorAuthenticationSetupEditNumber = function (params) {
        return this.bi.log(__assign({ evid: 685 }, params));
    };
    /**
    * @typedef {Object} clickOnSidebarSHeaderParams
    * @property {string} app_id - app_id of the item
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} name - unique name that doesn't change when changing the name on the side bar
    * @property {string} platform - null
    **/
    /**
     * Name: Click on Sidebar's Header. Evid: 106.
     * Event description: user clicks on sidebar's header and returns to the dashboard.
    
     * app_id - Type: string. Desc: app_id of the item
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: unique name that doesn't change when changing the name on the side bar
     *
     * platform - Type: string.
     * @param {clickOnSidebarSHeaderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickOnSidebarSHeader = function (params) {
        return this.bi.log(__assign({ evid: 106 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentManageAutomations291Params
    * @property {GUID} msid - msid
    * @property {string} origin - button, link, header, success creation dialog
    * @property {string} platform - null
    * @property {string} referral_info - indicate which vertical is the dacomponent triggered from
    **/
    /**
     * Name: Automations > DaComponent > Manage Automations. Evid: 291.
     * Event description: Automations > DaComponent > Manage Automations.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: button, link, header, success creation dialog
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: indicate which vertical is the dacomponent triggered from
     * @param {automationsDaComponentManageAutomations291Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentManageAutomations291 = function (params) {
        return this.bi.log(__assign({ evid: 291 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsChangeTabParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} tabFrom - tabFrom
    * @property {string} tabTo - tabTo
    **/
    /**
     * Name: Financial Services Settings - Change Tab. Evid: 1301.
     * Event description: Financial Services Settings - Change Tab.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * tabFrom - Type: string. Desc: tabFrom
     *
     * tabTo - Type: string. Desc: tabTo
     * @param {financialServicesSettingsChangeTabParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsChangeTab = function (params) {
        return this.bi.log(__assign({ evid: 1301 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsLocationsModalPageViewParams
    * @property {string} fields - names of default fields with their default values
    * @property {string} hosting - from where user arrived to locations modal (Editor/MA/bookings...)
    * @property {string} location_details - 0- first location (create), 1-second location, 2- third location,...
    * @property {GUID} msid - msid
    * @property {string} origin - name of previous tab
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site settings > Locations Modal page view. Evid: 1189.
     * Event description: Locations Modal page view.
    
     * fields - Type: string. Desc: names of default fields with their default values
     *
     * hosting - Type: string. Desc: from where user arrived to locations modal (Editor/MA/bookings...)
     *
     * location_details - Type: string. Desc: 0- first location (create), 1-second location, 2- third location,...
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: name of previous tab
     *
     * platform - Type: string.
     * @param {dashboardSiteSettingsLocationsModalPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsLocationsModalPageView = function (params) {
        return this.bi.log(__assign({ evid: 1189 }, params));
    };
    /**
    * @typedef {Object} automationsClickOnAutomationsTabsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} previous_tab - {my_automations,recommended}
    * @property {string} tab_name - {my_automations,recommended}
    **/
    /**
     * Name: Automations > click on Automations tabs. Evid: 230.
     * Event description: User click on Automations tabs.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * previous_tab - Type: string. Desc: {my_automations,recommended}
     *
     * tab_name - Type: string. Desc: {my_automations,recommended}
     * @param {automationsClickOnAutomationsTabsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClickOnAutomationsTabs = function (params) {
        return this.bi.log(__assign({ evid: 230 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnFolderParams
    * @property {string} folder_name - the name of the folder
    * @property {string} hosting - MA
    * @property {GUID} msid - --
    * @property {string} platform - null
    * @property {string} sub_view - list-view/grid
    * @property {string} view - my-sites
    **/
    /**
     * Name: Folders > click on folder. Evid: 130.
     * Event description: click on the folder from my-sites and see it's content.
    
     * folder_name - Type: string. Desc: the name of the folder
     *
     * hosting - Type: string. Desc: MA
     *
     * msid - Type: guid. Desc: --
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: list-view/grid
     *
     * view - Type: string. Desc: my-sites
     * @param {foldersClickOnFolderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnFolder = function (params) {
        return this.bi.log(__assign({ evid: 130 }, params));
    };
    /**
    * @typedef {Object} quotesEmailInvoicePageParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} invoiceSource - by app_def_id
    * @property {string} msid - msid
    * @property {string} origin - origin page
    * @property {string} origin_device - web,native
    * @property {string} paymentType - 'one time', 'recurring'
    * @property {string} platform - null
    * @property {boolean} resend - resend mode?
    **/
    /**
     * Name: Quotes - Email invoice page. Evid: 404.
     * Event description: email invoice pop up.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * invoiceSource - Type: string. Desc: by app_def_id
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * origin_device - Type: string. Desc: web,native
     *
     * paymentType - Type: string. Desc: 'one time', 'recurring'
     *
     * platform - Type: string.
     *
     * resend - Type: bool. Desc: resend mode?
     * @param {quotesEmailInvoicePageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesEmailInvoicePage = function (params) {
        return this.bi.log(__assign({ evid: 404 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersReachStepCustomizeTheTriggerParams
    * @property {string} flowType - edit or create
    * @property {number} index - index for drip campaign
    * @property {boolean} is_auto - window opens automatically/manually
    * @property {GUID} msid - msid
    * @property {string} origin - deprecated
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - deprecated
    **/
    /**
     * Name: Automations > Reach step customize the trigger. Evid: 206.
     * Event description: open/close choose a trigger.
    
     * flowType - Type: string. Desc: edit or create
     *
     * index - Type: numeric. Desc: index for drip campaign
     *
     * is_auto - Type: bool. Desc: window opens automatically/manually
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: deprecated
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric. Desc: deprecated
     * @param {dashboardTriggersReachStepCustomizeTheTriggerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersReachStepCustomizeTheTrigger = function (params) {
        return this.bi.log(__assign({ evid: 206 }, params));
    };
    /**
    * @typedef {Object} dashboardSettingsUpdateParams
    * @property {GUID} msid - null
    * @property {string} name - settings section name
    * @property {string} origin - button/description (only for 'edit password' - where did the user click)
    * @property {string} platform - null
    * @property {string} providerId - social provider for enable/disable social actions (facebook/google)
    * @property {number} src - null
    * @property {string} value - deprecated
    **/
    /**
     * Name: dashboard > settings -> update. Evid: 22.
    
    
     * msid - Type: guid.
     *
     * name - Type: string. Desc: settings section name
     *
     * origin - Type: string. Desc: button/description (only for 'edit password' - where did the user click)
     *
     * platform - Type: string.
     *
     * providerId - Type: string. Desc: social provider for enable/disable social actions (facebook/google)
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: deprecated
     * @param {dashboardSettingsUpdateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSettingsUpdate = function (params) {
        return this.bi.log(__assign({ evid: 22 }, params));
    };
    /**
    * @typedef {Object} quotesBulkActionsExportCsvParams
    * @property {string} filter - type of filter
    * @property {string} msid - msid
    * @property {string} number - number of invoices choose or all
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - bulk actions - Export CSV. Evid: 398.
     * Event description: Quotes - Create invoice - Toggle Recurring.
    
     * filter - Type: string. Desc: type of filter
     *
     * msid - Type: string. Desc: msid
     *
     * number - Type: string. Desc: number of invoices choose or all
     *
     * platform - Type: string.
     * @param {quotesBulkActionsExportCsvParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesBulkActionsExportCsv = function (params) {
        return this.bi.log(__assign({ evid: 398 }, params));
    };
    /**
    * @typedef {Object} dashboardProsSiteActionsOpenedParams
    * @property {GUID} msid - -
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > pros -> site actions opened. Evid: 39.
     * Event description: user opens site actions  dialog in pro-my-sites.
    
     * msid - Type: guid. Desc: -
     *
     * platform - Type: string.
     * @param {dashboardProsSiteActionsOpenedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardProsSiteActionsOpened = function (params) {
        return this.bi.log(__assign({ evid: 39 }, params));
    };
    /**
    * @typedef {Object} automationsEndOfStepsQuotaUpgradeAscendParams
    * @property {string} ascend_package - ascend_package
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} steps - number of steps when event shot
    **/
    /**
     * Name: Automations > end of steps quota upgrade ascend. Evid: 742.
     * Event description: Automations > end of steps quota upgrade ascend.
    
     * ascend_package - Type: string. Desc: ascend_package
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * steps - Type: numeric. Desc: number of steps when event shot
     * @param {automationsEndOfStepsQuotaUpgradeAscendParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsEndOfStepsQuotaUpgradeAscend = function (params) {
        return this.bi.log(__assign({ evid: 742 }, params));
    };
    /**
    * @typedef {Object} crmHomeScrollDownParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - scroll down. Evid: 1300.
     * Event description: CRM Home - scroll down.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeScrollDownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeScrollDown = function (params) {
        return this.bi.log(__assign({ evid: 1300 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceSaveDraftClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - create invoice, edit invoice
    * @property {string} paymentType - 'one time','recurring'
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Create invoice - Save draft click. Evid: 408.
     * Event description: Create invoice - Save draft button click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create invoice, edit invoice
     *
     * paymentType - Type: string. Desc: 'one time','recurring'
     *
     * platform - Type: string.
     * @param {quotesCreateInvoiceSaveDraftClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceSaveDraftClick = function (params) {
        return this.bi.log(__assign({ evid: 408 }, params));
    };
    /**
    * @typedef {Object} quotesShowPaymentPopupPageParams
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow onboarding/payments
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Show Payment popup page. Evid: 440.
     * Event description: Stripe popup is shown.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow onboarding/payments
     *
     * platform - Type: string.
     * @param {quotesShowPaymentPopupPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesShowPaymentPopupPage = function (params) {
        return this.bi.log(__assign({ evid: 440 }, params));
    };
    /**
    * @typedef {Object} teamManagementDeleteTeamMemberDeleteClickFailParams
    * @property {string} invite_status - pending/expired/leave team
    * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
    * @property {string} origin - where the dialog was opened from
    * @property {string} platform - null
    * @property {string} role - the deleted user’s role
    **/
    /**
     * Name: Team Management - delete team member - delete click fail. Evid: 181.
     * Event description: When a user clicks on 'delete' in the delete team member window - fail response.
    
     * invite_status - Type: string. Desc: pending/expired/leave team
     *
     * member_id - Type: guid. Desc: the uuid of the deleted member (if status is pending then invite_id)
     *
     * origin - Type: string. Desc: where the dialog was opened from
     *
     * platform - Type: string.
     *
     * role - Type: string. Desc: the deleted user’s role
     * @param {teamManagementDeleteTeamMemberDeleteClickFailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementDeleteTeamMemberDeleteClickFail = function (params) {
        return this.bi.log(__assign({ evid: 181 }, params));
    };
    /**
    * @typedef {Object} homeOpenDialogClickParams
    * @property {GUID} app_id - -
    * @property {GUID} msid - -
    * @property {string} origin - place of clicking my sites ( Header, top left bar). Relevant only for site list
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    * @property {string} prev_view - -
    * @property {string} referral_info - -
    * @property {string} view - my-apps, site-list, account,notifications,priority support
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: Home > open dialog click. Evid: 303.
     * Event description: opening a dialog from home: my apps, my sites, account menu,notifications,priority support.
    
     * app_id - Type: guid. Desc: -
     *
     * msid - Type: guid. Desc: -
     *
     * origin - Type: string. Desc: place of clicking my sites ( Header, top left bar). Relevant only for site list
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     *
     * prev_view - Type: string. Desc: -
     *
     * referral_info - Type: string. Desc: -
     *
     * view - Type: string. Desc: my-apps, site-list, account,notifications,priority support
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {homeOpenDialogClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeOpenDialogClick = function (params) {
        return this.bi.log(__assign({ evid: 303 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnShowMoreShoeLessParams
    * @property {string} hosting - MA
    * @property {string} name - the name of the button
    * @property {string} platform - null
    * @property {string} view - my-sites
    * @property {string} view_mode - grid
    **/
    /**
     * Name: Folders > Click on 'Show More'/'Shoe Less'. Evid: 119.
     * Event description: Click on 'show more' or 'show less' button from my-sites to see more/less folders.
    
     * hosting - Type: string. Desc: MA
     *
     * name - Type: string. Desc: the name of the button
     *
     * platform - Type: string.
     *
     * view - Type: string. Desc: my-sites
     *
     * view_mode - Type: string. Desc: grid
     * @param {foldersClickOnShowMoreShoeLessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnShowMoreShoeLess = function (params) {
        return this.bi.log(__assign({ evid: 119 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteNewsViewAllParams
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site -> news -> view all. Evid: 18.
    
    
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardSiteNewsViewAllParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteNewsViewAll = function (params) {
        return this.bi.log(__assign({ evid: 18 }, params));
    };
    /**
    * @typedef {Object} quotesSearchInvoicesParams
    * @property {string} msid - msid
    * @property {number} num_of_invoices - number of invoices the user has
    * @property {number} num_of_results - number of returned results
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    * @property {string} text - text searched
    **/
    /**
     * Name: Quotes - search invoices. Evid: 448.
     * Event description: user searches  in the invoices view.
    
     * msid - Type: string. Desc: msid
     *
     * num_of_invoices - Type: numeric. Desc: number of invoices the user has
     *
     * num_of_results - Type: numeric. Desc: number of returned results
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     *
     * text - Type: string. Desc: text searched
     * @param {quotesSearchInvoicesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSearchInvoices = function (params) {
        return this.bi.log(__assign({ evid: 448 }, params));
    };
    /**
    * @typedef {Object} dashboardBannerLoadingInitParams
    * @property {GUID} msid - msid
    * @property {string} name - banner name for identification
    * @property {string} origin - origin
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > banner loading init. Evid: 54.
     * Event description: Please add event for banners loading initiation (as we have for seeing, clicking and closing banners events src= 5 evid=14,34,36).
    
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: banner name for identification
     *
     * origin - Type: string. Desc: origin
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardBannerLoadingInitParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardBannerLoadingInit = function (params) {
        return this.bi.log(__assign({ evid: 54 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnCreatePriorityTicketExpertsParams
    * @property {string} origin - location of the click
    * @property {string} origin_app - if dashboard then 'MAD'
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > Click on Create Priority Ticket (Experts). Evid: 57.
     * Event description: User click on 'Create Priority Ticket' - available for Experts.
    
     * origin - Type: string. Desc: location of the click
     *
     * origin_app - Type: string. Desc: if dashboard then 'MAD'
     *
     * platform - Type: string.
     * @param {dashboardClickOnCreatePriorityTicketExpertsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnCreatePriorityTicketExperts = function (params) {
        return this.bi.log(__assign({ evid: 57 }, params));
    };
    /**
    * @typedef {Object} homeNotificationBadgeShownParams
    * @property {string} msid - deprecated
    * @property {number} num_of_new - number of new notifications - number in badge
    * @property {boolean} on_page_load - true if sent on page load
    * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Home > notification badge shown. Evid: 254.
     * Event description: a badge with new notifications/ urgent notifications is shown to the user.
    
     * msid - Type: string. Desc: deprecated
     *
     * num_of_new - Type: numeric. Desc: number of new notifications - number in badge
     *
     * on_page_load - Type: bool. Desc: true if sent on page load
     *
     * origin - Type: string. Desc: MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {homeNotificationBadgeShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeNotificationBadgeShown = function (params) {
        return this.bi.log(__assign({ evid: 254 }, params));
    };
    /**
    * @typedef {Object} automationsBackToAutomationFromShoutOutUpdatingParams
    * @property {string} event_name - 'triggered-emails'
    * @property {GUID} msid - msid
    * @property {string} origin - shoutout
    * @property {string} platform - null
    * @property {GUID} rule_id - rule_id
    **/
    /**
     * Name: Automations - Back to Automation from ShoutOut Updating. Evid: 234.
     * Event description: user click on 'Back to Automations' from ShoutOut Updating page
    (when using action 'Send email to visitors' in Automations).
    
     * event_name - Type: string. Desc: 'triggered-emails'
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: shoutout
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule_id
     * @param {automationsBackToAutomationFromShoutOutUpdatingParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBackToAutomationFromShoutOutUpdating = function (params) {
        return this.bi.log(__assign({ evid: 234 }, params));
    };
    /**
    * @typedef {Object} widgetLoadedParams
    * @property {string} hosting - --
    * @property {boolean} is_shown - 1- shown 0 hidden
    * @property {number} loading_time - loading time from start loading the widget
    * @property {number} loading_time_from_start_loading_home - loading time from start loading the home
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} widget_name - widget name
    **/
    /**
     * Name: dashboard > Widget loaded. Evid: 299.
     * Event description: widget is shown in dashboard.
    
     * hosting - Type: string. Desc: --
     *
     * is_shown - Type: bool. Desc: 1- shown 0 hidden
     *
     * loading_time - Type: numeric. Desc: loading time from start loading the widget
     *
     * loading_time_from_start_loading_home - Type: numeric. Desc: loading time from start loading the home
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * widget_name - Type: string. Desc: widget name
     * @param {widgetLoadedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.widgetLoaded = function (params) {
        return this.bi.log(__assign({ evid: 299 }, params));
    };
    /**
    * @typedef {Object} crmHomeIntegrationsCommunicationsViewAllParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - integrations - communications view all. Evid: 854.
     * Event description: CRM Home - integrations - communications view all.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeIntegrationsCommunicationsViewAllParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeIntegrationsCommunicationsViewAll = function (params) {
        return this.bi.log(__assign({ evid: 854 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetMoreActionParams
    * @property {GUID} contactId - contact id
    * @property {GUID} invoiceId - invoice id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - more action. Evid: 1320.
     * Event description: Invoices - widget - more action.
    
     * contactId - Type: guid. Desc: contact id
     *
     * invoiceId - Type: guid. Desc: invoice id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetMoreActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetMoreAction = function (params) {
        return this.bi.log(__assign({ evid: 1320 }, params));
    };
    /**
    * @typedef {Object} quotesPrintReportClickParams
    * @property {string} basis - accural, cash
    * @property {string} msid - msid
    * @property {string} name - tax, revenue
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - print report click. Evid: 452.
     * Event description: user clicks on print report in tax/revenue summary. use 'name'  to choose tax or revenue..
    
     * basis - Type: string. Desc: accural, cash
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: tax, revenue
     *
     * platform - Type: string.
     * @param {quotesPrintReportClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPrintReportClick = function (params) {
        return this.bi.log(__assign({ evid: 452 }, params));
    };
    /**
    * @typedef {Object} crmHomeWorkflowsWidgetStartFromScratchParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - workflows widget - start from scratch. Evid: 853.
     * Event description: CRM Home - workflows widget - start from scratch.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeWorkflowsWidgetStartFromScratchParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeWorkflowsWidgetStartFromScratch = function (params) {
        return this.bi.log(__assign({ evid: 853 }, params));
    };
    /**
    * @typedef {Object} teamManagementEditTeamProfileOpenDialogParams
    * @property {boolean} onboarding - the dialog was opened from the onboarding page - true, from team management - false
    * @property {string} platform - null
    **/
    /**
     * Name: Team management - Edit team profile – open dialog. Evid: 171.
     * Event description: When a user clicks to edit team profile please send this event with the next fields:.
    
     * onboarding - Type: bool. Desc: the dialog was opened from the onboarding page - true, from team management - false
     *
     * platform - Type: string.
     * @param {teamManagementEditTeamProfileOpenDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementEditTeamProfileOpenDialog = function (params) {
        return this.bi.log(__assign({ evid: 171 }, params));
    };
    /**
    * @typedef {Object} dashboardTpaUpgradeClickParams
    * @property {GUID} app_id - null
    * @property {GUID} msid - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > tpa upgrade click. Evid: 23.
    
    
     * app_id - Type: guid.
     *
     * msid - Type: guid.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTpaUpgradeClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTpaUpgradeClick = function (params) {
        return this.bi.log(__assign({ evid: 23 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorPopupShownParams
    * @property {GUID} msid - site guid
    * @property {string} name - popup name
    * @property {string} platform - null
    * @property {string} siteTypeName - ADI/Editor
    **/
    /**
     * Name: dashboard > site selector popup shown. Evid: 81.
     * Event description: when a user selected an ADI site when his previous action is not suitable for ADI (add app etc... ).
    
     * msid - Type: guid. Desc: site guid
     *
     * name - Type: string. Desc: popup name
     *
     * platform - Type: string.
     *
     * siteTypeName - Type: string. Desc: ADI/Editor
     * @param {dashboardSiteSelectorPopupShownParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorPopupShown = function (params) {
        return this.bi.log(__assign({ evid: 81 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesSiteHomeAlertMessageFromPremiumClickParams
    * @property {string} action - close (window), cancel , OK
    * @property {string} alert_type - alert_message
    * @property {string} hosting - hosting
    * @property {string} platform - null
    * @property {string} premium_alert_id - alert received from premium
    **/
    /**
     * Name: dashboard > My Sites/site-home - alert message from premium click. Evid: 158.
     * Event description: when a user opens my-sites/site-home he receives a message based on notifications that transferred from premiums. This event collects data about what user choose.
    
     * action - Type: string. Desc: close (window), cancel , OK
     *
     * alert_type - Type: string. Desc: alert_message
     *
     * hosting - Type: string. Desc: hosting
     *
     * platform - Type: string.
     *
     * premium_alert_id - Type: string. Desc: alert received from premium
     * @param {dashboardMySitesSiteHomeAlertMessageFromPremiumClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesSiteHomeAlertMessageFromPremiumClick = function (params) {
        return this.bi.log(__assign({ evid: 158 }, params));
    };
    /**
    * @typedef {Object} automationsDripCampaignsBannerCloseParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > drip campaigns banner close. Evid: 1121.
     * Event description: Automations > drip campaigns banner close.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsDripCampaignsBannerCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDripCampaignsBannerClose = function (params) {
        return this.bi.log(__assign({ evid: 1121 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetSeeAllInvoicesParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - see all invoices. Evid: 1326.
     * Event description: Invoices - widget - see all invoices.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetSeeAllInvoicesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetSeeAllInvoices = function (params) {
        return this.bi.log(__assign({ evid: 1326 }, params));
    };
    /**
    * @typedef {Object} bizManagerBusinessInfoMergeDialogCloseParams
    * @property {string} hosting - MA/editor/ADI
    * @property {string} merged_apps - merged app def id, use delimiter "," between each app_id
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - Business Info Merge Dialog - Close. Evid: 587.
     * Event description: This dialog will alert the user about the change to his settings.
    It will be displayed only in case of a conflict (my account and other verticals) in the merge process. This event represents closing the dialog.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * merged_apps - Type: string. Desc: merged app def id, use delimiter "," between each app_id
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     * @param {bizManagerBusinessInfoMergeDialogCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerBusinessInfoMergeDialogClose = function (params) {
        return this.bi.log(__assign({ evid: 587 }, params));
    };
    /**
    * @typedef {Object} analyticsHoverAKpiParams
    * @property {string} hosting - MA/editor/ADI
    * @property {number} kpi_location - 0-left 1-middle 2-right
    * @property {string} kpi_name - kpi's name
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Analytics > hover a KPI. Evid: 377.
     * Event description: Hover a KPI from Analytics Widget.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * kpi_location - Type: numeric. Desc: 0-left 1-middle 2-right
     *
     * kpi_name - Type: string. Desc: kpi's name
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {analyticsHoverAKpiParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsHoverAKpi = function (params) {
        return this.bi.log(__assign({ evid: 377 }, params));
    };
    /**
    * @typedef {Object} accountDialogClickItemParams
    * @property {string} item_id - the page name the item leads to (e.g. account-settings)
    * @property {number} item_index - item's index in the entire dialog (only for main display, index starts from 1, logout (or any side location)=0)
    * @property {number} item_index_ex_separators - item's index in the entire dialog excluding separators (only for main display, index starts from 1, logout (or any side location)=0)
    * @property {string} item_name - the display name in the dialog
    * @property {string} items_displayed - items list including section separators as 'delimiter'
    * @property {GUID} msid - only for dashboard dialog
    * @property {string} origin - main-menu/sub-menu (e.g. languages)
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: Account Dialog > Click Item. Evid: 296.
     * Event description: When a user/anonymous clicks on a dialog item in the account dialog.
    
     * item_id - Type: string. Desc: the page name the item leads to (e.g. account-settings)
     *
     * item_index - Type: numeric. Desc: item's index in the entire dialog (only for main display, index starts from 1, logout (or any side location)=0)
     *
     * item_index_ex_separators - Type: numeric. Desc: item's index in the entire dialog excluding separators (only for main display, index starts from 1, logout (or any side location)=0)
     *
     * item_name - Type: string. Desc: the display name in the dialog
     *
     * items_displayed - Type: string. Desc: items list including section separators as 'delimiter'
     *
     * msid - Type: guid. Desc: only for dashboard dialog
     *
     * origin - Type: string. Desc: main-menu/sub-menu (e.g. languages)
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     * @param {accountDialogClickItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountDialogClickItem = function (params) {
        return this.bi.log(__assign({ evid: 296 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnSelectPremiumPlanParams
    * @property {GUID} msid - null
    * @property {string} platform - null
    * @property {string} referral_info - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > click on select premium plan. Evid: 51.
    
    
     * msid - Type: guid.
     *
     * platform - Type: string.
     *
     * referral_info - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardClickOnSelectPremiumPlanParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnSelectPremiumPlan = function (params) {
        return this.bi.log(__assign({ evid: 51 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesWelcomeMessageForProsDisplayedParams
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > My Sites - welcome message for pros displayed. Evid: 154.
     * Event description: welcome message of pro account is displayed.
    
     * platform - Type: string.
     * @param {dashboardMySitesWelcomeMessageForProsDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesWelcomeMessageForProsDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 154 }, params));
    };
    /**
    * @typedef {Object} quotesVoidPageCancelParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Void page - Cancel. Evid: 429.
     * Event description: cancel in Void page (for every close (cancel, x, background click)).
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesVoidPageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesVoidPageCancel = function (params) {
        return this.bi.log(__assign({ evid: 429 }, params));
    };
    /**
    * @typedef {Object} analyticsClickOnButtonFromCustomizationListParams
    * @property {string} hosting - MA/editor/ADI
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} selected_kpis - the chosen kpis in the following way -> kpi: location: (json)
    **/
    /**
     * Name: Analytics > Click on button from customization list. Evid: 375.
     * Event description: Click on apply button from customization list.
    
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * selected_kpis - Type: string. Desc: the chosen kpis in the following way -> kpi: location: (json)
     * @param {analyticsClickOnButtonFromCustomizationListParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsClickOnButtonFromCustomizationList = function (params) {
        return this.bi.log(__assign({ evid: 375 }, params));
    };
    /**
    * @typedef {Object} homeClickOnCreateAnythingItemParams
    * @property {string} add_app_id - add_app_id
    * @property {GUID} app_id - deprecated
    * @property {GUID} msid - -
    * @property {string} name - item name
    * @property {string} page_view - from where the users opened the dialog
    * @property {string} platform - null
    * @property {string} view - dialog name
    **/
    /**
     * Name: Home > click on create anything item. Evid: 307.
     * Event description: click on create anything item.
    
     * add_app_id - Type: string. Desc: add_app_id
     *
     * app_id - Type: guid. Desc: deprecated
     *
     * msid - Type: guid. Desc: -
     *
     * name - Type: string. Desc: item name
     *
     * page_view - Type: string. Desc: from where the users opened the dialog
     *
     * platform - Type: string.
     *
     * view - Type: string. Desc: dialog name
     * @param {homeClickOnCreateAnythingItemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeClickOnCreateAnythingItem = function (params) {
        return this.bi.log(__assign({ evid: 307 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsDeleteValueParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - delete/clear value
    **/
    /**
     * Name: dashboard > site settings > delete value. Evid: 316.
     * Event description: user deleted/cleared a value from field.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: delete/clear value
     * @param {dashboardSiteSettingsDeleteValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsDeleteValue = function (params) {
        return this.bi.log(__assign({ evid: 316 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsChangeValueParams
    * @property {string} create_method - save(pop-up),create new
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} value - field's value
    **/
    /**
     * Name: dashboard > site settings > change value. Evid: 312.
     * Event description: user changed a value in the site settings.
    
     * create_method - Type: string. Desc: save(pop-up),create new
     *
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * value - Type: string. Desc: field's value
     * @param {dashboardSiteSettingsChangeValueParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsChangeValue = function (params) {
        return this.bi.log(__assign({ evid: 312 }, params));
    };
    /**
    * @typedef {Object} clickOnSeeMoreButtonParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} query - query
    * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
    * @property {string} section - result's section
    * @property {number} section_index - the index of the section in results
    * @property {string} sub_view - page in app
    * @property {string} title - result's title
    * @property {string} title_id - result's title id
    * @property {string} view - requested view
    **/
    /**
     * Name: Click on expand results button. Evid: 167.
     * Event description: When a user clicks on expand results button.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * query - Type: string. Desc: query
     *
     * result - Type: string. Desc: send all results who return on time in the following way -> section: number of results: time to load
     *
     * section - Type: string. Desc: result's section
     *
     * section_index - Type: numeric. Desc: the index of the section in results
     *
     * sub_view - Type: string. Desc: page in app
     *
     * title - Type: string. Desc: result's title
     *
     * title_id - Type: string. Desc: result's title id
     *
     * view - Type: string. Desc: requested view
     * @param {clickOnSeeMoreButtonParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickOnSeeMoreButton = function (params) {
        return this.bi.log(__assign({ evid: 167 }, params));
    };
    /**
    * @typedef {Object} crmDiscoverCrmToolsParams
    * @property {GUID} msid - msid
    * @property {string} pageView - which page clicked this link
    * @property {string} platform - null
    **/
    /**
     * Name: CRM - Discover CRM Tools. Evid: 1333.
     * Event description: CRM - Discover CRM Tools.
    
     * msid - Type: guid. Desc: msid
     *
     * pageView - Type: string. Desc: which page clicked this link
     *
     * platform - Type: string.
     * @param {crmDiscoverCrmToolsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmDiscoverCrmTools = function (params) {
        return this.bi.log(__assign({ evid: 1333 }, params));
    };
    /**
    * @typedef {Object} foldersMarkUnmarkSelectAllButtonParams
    * @property {string} hosting - MA
    * @property {string} name - mark/unmark
    * @property {string} platform - null
    * @property {string} sub_view - grid/ list-view
    * @property {string} view - my-sites
    **/
    /**
     * Name: Folders > Mark/Unmark 'Select All' button. Evid: 116.
     * Event description: mark/unmark 'select all' button.
    
     * hosting - Type: string. Desc: MA
     *
     * name - Type: string. Desc: mark/unmark
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: grid/ list-view
     *
     * view - Type: string. Desc: my-sites
     * @param {foldersMarkUnmarkSelectAllButtonParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersMarkUnmarkSelectAllButton = function (params) {
        return this.bi.log(__assign({ evid: 116 }, params));
    };
    /**
    * @typedef {Object} customerNotificationsSettingsClickOnHideUnhideParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} section_name - component name: notifications_channel/more_notifications/automated_emails you created/system_notifications
    * @property {boolean} status - true - click on unhide , false - click on hide
    **/
    /**
     * Name: customer notifications settings > click on hide/unhide. Evid: 1251.
     * Event description: When the user clicks on "hide/unhide" in each section in the page.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * section_name - Type: string. Desc: component name: notifications_channel/more_notifications/automated_emails you created/system_notifications
     *
     * status - Type: bool. Desc: true - click on unhide , false - click on hide
     * @param {customerNotificationsSettingsClickOnHideUnhideParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customerNotificationsSettingsClickOnHideUnhide = function (params) {
        return this.bi.log(__assign({ evid: 1251 }, params));
    };
    /**
    * @typedef {Object} crmHomeTasksWidgetAddNewTaskParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - Tasks widget - add new task. Evid: 822.
     * Event description: CRM Home - Tasks widget - add new task.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeTasksWidgetAddNewTaskParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeTasksWidgetAddNewTask = function (params) {
        return this.bi.log(__assign({ evid: 822 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSettingsOverviewUnpublishSiteParams
    * @property {string} experience - user's experience
    * @property {string} hosting - from where user arrived to sitesettings (Editor/MA/...)
    * @property {GUID} msid - msid
    * @property {string} name - name of the field that was changed
    * @property {string} origin - name of current tab
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site settings > overview > unpublish site. Evid: 326.
     * Event description: User choose to unpublish site in pop up window.
    
     * experience - Type: string. Desc: user's experience
     *
     * hosting - Type: string. Desc: from where user arrived to sitesettings (Editor/MA/...)
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the field that was changed
     *
     * origin - Type: string. Desc: name of current tab
     *
     * platform - Type: string.
     * @param {dashboardSiteSettingsOverviewUnpublishSiteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSettingsOverviewUnpublishSite = function (params) {
        return this.bi.log(__assign({ evid: 326 }, params));
    };
    /**
    * @typedef {Object} quotesDuplicateInvoiceParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Duplicate Invoice. Evid: 399.
     * Event description: Quotes - Duplicate Invoice.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesDuplicateInvoiceParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDuplicateInvoice = function (params) {
        return this.bi.log(__assign({ evid: 399 }, params));
    };
    /**
    * @typedef {Object} crmHomeSeeAllContactsViaContactsWidgetParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - see all contacts via contacts widget. Evid: 820.
     * Event description: CRM Home - see all contacts via contacts widget.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeSeeAllContactsViaContactsWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeSeeAllContactsViaContactsWidget = function (params) {
        return this.bi.log(__assign({ evid: 820 }, params));
    };
    /**
    * @typedef {Object} dashboardClickInSiteSelectorParams
    * @property {string} item_name - item clicked: all-sites/create-new-site
    * @property {GUID} msid - metasite id
    * @property {string} page_view - my-sites /dashboard / account settings
    * @property {string} platform - null
    **/
    /**
     * Name: Dashboard > Click in Site Selector. Evid: 1381.
     * Event description: When the user clicks on “create new site” OR “all sites” in the site selector.
    
     * item_name - Type: string. Desc: item clicked: all-sites/create-new-site
     *
     * msid - Type: guid. Desc: metasite id
     *
     * page_view - Type: string. Desc: my-sites /dashboard / account settings
     *
     * platform - Type: string.
     * @param {dashboardClickInSiteSelectorParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickInSiteSelector = function (params) {
        return this.bi.log(__assign({ evid: 1381 }, params));
    };
    /**
    * @typedef {Object} teamManagementEditRoleUpdateClickParams
    * @property {boolean} is_accepted - true if invite was accepted
    * @property {string} new_role - new role
    * @property {string} origin - where the dialog is opened from
    * @property {string} platform - null
    * @property {string} prev_role - previous role
    * @property {string} roles_displayed - list of roles displayed to the user
    **/
    /**
     * Name: Team Management - edit role - update click. Evid: 184.
     * Event description: When the user clicks on 'update' in the edit role window - success response.
    
     * is_accepted - Type: bool. Desc: true if invite was accepted
     *
     * new_role - Type: string. Desc: new role
     *
     * origin - Type: string. Desc: where the dialog is opened from
     *
     * platform - Type: string.
     *
     * prev_role - Type: string. Desc: previous role
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     * @param {teamManagementEditRoleUpdateClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementEditRoleUpdateClick = function (params) {
        return this.bi.log(__assign({ evid: 184 }, params));
    };
    /**
    * @typedef {Object} crmHomeCarouselClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: CRM Home - carousel click. Evid: 492.
     * Event description: CRM Home - carousel click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {crmHomeCarouselClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeCarouselClick = function (params) {
        return this.bi.log(__assign({ evid: 492 }, params));
    };
    /**
    * @typedef {Object} ascendPpClickOnNextInCyclePageParams
    * @property {number} cycle_id - cycle id
    * @property {string} cycle_name - cycle name
    * @property {boolean} isChecked - is most popular
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - packageid
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    * @property {number} timeInPage - in milisec
    **/
    /**
     * Name: Ascend PP - Click on next in cycle page. Evid: 137.
     * Event description: User click on select in cycle page.
    
     * cycle_id - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: cycle name
     *
     * isChecked - Type: bool. Desc: is most popular
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: packageid
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     *
     * timeInPage - Type: numeric. Desc: in milisec
     * @param {ascendPpClickOnNextInCyclePageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpClickOnNextInCyclePage = function (params) {
        return this.bi.log(__assign({ evid: 137 }, params));
    };
    /**
    * @typedef {Object} teamManagementDeleteTeamMemberOpenDialogParams
    * @property {string} invite_status - pending/expired/leave team
    * @property {GUID} member_id - the uuid of the deleted member (if status is pending then invite_id)
    * @property {string} origin - where the user opened the dialog from
    * @property {string} platform - null
    * @property {string} role - the deleted user’s role
    **/
    /**
     * Name: Team Management - delete team member - open dialog. Evid: 178.
     * Event description: When a user clicks on delete member.
    
     * invite_status - Type: string. Desc: pending/expired/leave team
     *
     * member_id - Type: guid. Desc: the uuid of the deleted member (if status is pending then invite_id)
     *
     * origin - Type: string. Desc: where the user opened the dialog from
     *
     * platform - Type: string.
     *
     * role - Type: string. Desc: the deleted user’s role
     * @param {teamManagementDeleteTeamMemberOpenDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementDeleteTeamMemberOpenDialog = function (params) {
        return this.bi.log(__assign({ evid: 178 }, params));
    };
    /**
    * @typedef {Object} quotesExportReportClickParams
    * @property {string} basis - accural, cash
    * @property {string} file_type - csv,pdf,excel
    * @property {string} msid - msid
    * @property {string} name - tax, revenue
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - export report click. Evid: 453.
     * Event description: user clicks on export report in tax/revenue summary. use 'name'  to choose tax or revenue..
    
     * basis - Type: string. Desc: accural, cash
     *
     * file_type - Type: string. Desc: csv,pdf,excel
     *
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: tax, revenue
     *
     * platform - Type: string.
     * @param {quotesExportReportClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesExportReportClick = function (params) {
        return this.bi.log(__assign({ evid: 453 }, params));
    };
    /**
    * @typedef {Object} transferSiteCancelTransferAbortParams
    * @property {string} hosting - MA /Editor
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Transfer site - cancel transfer - abort. Evid: 62.
     * Event description: user clicks on "don't cancel transfer" or closes dialog with x.
    
     * hosting - Type: string. Desc: MA /Editor
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {transferSiteCancelTransferAbortParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.transferSiteCancelTransferAbort = function (params) {
        return this.bi.log(__assign({ evid: 62 }, params));
    };
    /**
    * @typedef {Object} automationsChooseTimePhaseToggleParams
    * @property {boolean} boolValue - {true,false}
    * @property {string} flowType - flow {create, edit}
    * @property {GUID} msid - msid
    * @property {string} name - {sendOncePerContact}
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - the rule_id that the user started/edited
    **/
    /**
     * Name: Automations > Choose Time Phase > toggle. Evid: 229.
     * Event description: change the "send one per contact" toggle.
    
     * boolValue - Type: bool. Desc: {true,false}
     *
     * flowType - Type: string. Desc: flow {create, edit}
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: {sendOncePerContact}
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: the rule_id that the user started/edited
     * @param {automationsChooseTimePhaseToggleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsChooseTimePhaseToggle = function (params) {
        return this.bi.log(__assign({ evid: 229 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsInvoicesBusinessInfoEditThemParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - invoices - business info - edit them. Evid: 1305.
     * Event description: Financial Services Settings - invoices - business info - edit them.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsInvoicesBusinessInfoEditThemParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsInvoicesBusinessInfoEditThem = function (params) {
        return this.bi.log(__assign({ evid: 1305 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersServerSaveOrUpdateTriggerSuccessParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe_name
    * @property {GUID} rule_id - rule
    * @property {number} src - null
    **/
    /**
     * Name: Automations Server > save or update trigger success. Evid: 220.
     * Event description: save or update trigger success from server.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe_name
     *
     * rule_id - Type: guid. Desc: rule
     *
     * src - Type: numeric.
     * @param {dashboardTriggersServerSaveOrUpdateTriggerSuccessParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersServerSaveOrUpdateTriggerSuccess = function (params) {
        return this.bi.log(__assign({ evid: 220 }, params));
    };
    /**
    * @typedef {Object} removePhoneNumberRemoveClickedParams
    * @property {string} platform - null
    **/
    /**
     * Name: Remove Phone Number - Remove Clicked. Evid: 97.
     * Event description: verification pop up before deleting the phone.
    
     * platform - Type: string.
     * @param {removePhoneNumberRemoveClickedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.removePhoneNumberRemoveClicked = function (params) {
        return this.bi.log(__assign({ evid: 97 }, params));
    };
    /**
    * @typedef {Object} quotesPreviewFromTableParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Preview from table. Evid: 484.
     * Event description: Quotes - Preview from table.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesPreviewFromTableParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesPreviewFromTable = function (params) {
        return this.bi.log(__assign({ evid: 484 }, params));
    };
    /**
    * @typedef {Object} bizManagerUrgentMessagesClickedParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {string} click_type - click/ close
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - ids to be consistent with premium events
    * @property {string} platform - null
    **/
    /**
     * Name: Biz Manager - urgent messages clicked. Evid: 594.
     * Event description: urgent messages clicked.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * click_type - Type: string. Desc: click/ close
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * platform - Type: string.
     * @param {bizManagerUrgentMessagesClickedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerUrgentMessagesClicked = function (params) {
        return this.bi.log(__assign({ evid: 594 }, params));
    };
    /**
    * @typedef {Object} searchFocusedOnASearchResultParams
    * @property {boolean} is_first_hover - 1- first item that was hovered (without the default) , 0 - not the first
    * @property {number} item_index - item's index in all results
    * @property {number} item_index_in_section - the item's index in it's section
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} query - query
    * @property {string} result - send all results who return on time in the following way -> section: number of results: time to load
    * @property {string} section - result's section
    * @property {number} section_index - the index of the section in results
    * @property {string} sub_view - page in app
    * @property {string} title - result's title
    * @property {string} title_id - result's title id
    * @property {string} view - requested view
    **/
    /**
     * Name: Search > Hover over result item. Evid: 164.
     * Event description: when a user is focused on a result.
    
     * is_first_hover - Type: bool. Desc: 1- first item that was hovered (without the default) , 0 - not the first
     *
     * item_index - Type: numeric. Desc: item's index in all results
     *
     * item_index_in_section - Type: numeric. Desc: the item's index in it's section
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * query - Type: string. Desc: query
     *
     * result - Type: string. Desc: send all results who return on time in the following way -> section: number of results: time to load
     *
     * section - Type: string. Desc: result's section
     *
     * section_index - Type: numeric. Desc: the index of the section in results
     *
     * sub_view - Type: string. Desc: page in app
     *
     * title - Type: string. Desc: result's title
     *
     * title_id - Type: string. Desc: result's title id
     *
     * view - Type: string. Desc: requested view
     * @param {searchFocusedOnASearchResultParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.searchFocusedOnASearchResult = function (params) {
        return this.bi.log(__assign({ evid: 164 }, params));
    };
    /**
    * @typedef {Object} crmHomeGoToMarketingToolsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - go to marketing tools. Evid: 1122.
     * Event description: CRM Home - go to marketing tools.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeGoToMarketingToolsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeGoToMarketingTools = function (params) {
        return this.bi.log(__assign({ evid: 1122 }, params));
    };
    /**
    * @typedef {Object} dashboardMySitesClickPromoteParams
    * @property {GUID} msid - msid
    * @property {string} origin - original page
    * @property {string} place - place inside origin page
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > My Sites - Click Promote. Evid: 153.
     * Event description: my sites selection page.
    
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: original page
     *
     * place - Type: string. Desc: place inside origin page
     *
     * platform - Type: string.
     * @param {dashboardMySitesClickPromoteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardMySitesClickPromote = function (params) {
        return this.bi.log(__assign({ evid: 153 }, params));
    };
    /**
    * @typedef {Object} newReleasesApiRequestParams
    * @property {GUID} announcement_id - announcement_id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: New Releases - API request. Evid: 338.
     * Event description: This event fires every time there is a new request from the API. It means that the dealer sent a new release update to a site.
    The event is unique by announcement_id and metasite_id..
    
     * announcement_id - Type: guid. Desc: announcement_id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {newReleasesApiRequestParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.newReleasesApiRequest = function (params) {
        return this.bi.log(__assign({ evid: 338 }, params));
    };
    /**
    * @typedef {Object} financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettingsParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Financial Services Settings - Price Quotes - business details - go to site settings. Evid: 1311.
     * Event description: Financial Services Settings - Price Quotes - business details - go to site settings.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettingsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.financialServicesSettingsPriceQuotesBusinessDetailsGoToSiteSettings = function (params) {
        return this.bi.log(__assign({ evid: 1311 }, params));
    };
    /**
    * @typedef {Object} notificationsDisplayPopupForUserBlockedDesktopNotificationsParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Notifications > display popup for user blocked desktop notifications. Evid: 278.
     * Event description: When the user clicks the link, show a popup window telling the user they need to unblock notifications at their browser level..
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {notificationsDisplayPopupForUserBlockedDesktopNotificationsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationsDisplayPopupForUserBlockedDesktopNotifications = function (params) {
        return this.bi.log(__assign({ evid: 278 }, params));
    };
    /**
    * @typedef {Object} dashboardBannerClickParams
    * @property {string} abTest - ab test group
    * @property {string} bannerid - Banner id from dealer
    * @property {string} bannerLocationOnPage - 'LIST_TOP' 'LIST_RIGHT' 'LIST_LEFT' ,the location of the banner
    * @property {string} click_type - click/close
    * @property {boolean} isPremium - is_premium
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} origin - null
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} targetUrl - the banner link url
    **/
    /**
     * Name: dashboard > banner click. Evid: 14.
    
    
     * abTest - Type: string. Desc: ab test group
     *
     * bannerid - Type: string. Desc: Banner id from dealer
     *
     * bannerLocationOnPage - Type: string. Desc: 'LIST_TOP' 'LIST_RIGHT' 'LIST_LEFT' ,the location of the banner
     *
     * click_type - Type: string. Desc: click/close
     *
     * isPremium - Type: bool. Desc: is_premium
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * origin - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * targetUrl - Type: string. Desc: the banner link url
     * @param {dashboardBannerClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardBannerClick = function (params) {
        return this.bi.log(__assign({ evid: 14 }, params));
    };
    /**
    * @typedef {Object} dashboardSeeBannerParams
    * @property {string} abTest - ab test group
    * @property {boolean} aboveTheFold - was the item full viewed above the fold
    * @property {string} bannerid - Banner id from dealer
    * @property {string} bannerLocationOnPage - 'LIST_TOP' 'LIST_RIGHT' 'LIST_LEFT' ,the location of the banner
    * @property {boolean} isPremium - is_premium
    * @property {GUID} msid - msid
    * @property {string} name - name of the banner
    * @property {string} origin - the page it displays in
    * @property {string} platform - null
    * @property {number} src - null
    * @property {string} targetUrl - the banner link url
    **/
    /**
     * Name: dashboard > see banner. Evid: 34.
     * Event description: send each time user see banner.
    
     * abTest - Type: string. Desc: ab test group
     *
     * aboveTheFold - Type: bool. Desc: was the item full viewed above the fold
     *
     * bannerid - Type: string. Desc: Banner id from dealer
     *
     * bannerLocationOnPage - Type: string. Desc: 'LIST_TOP' 'LIST_RIGHT' 'LIST_LEFT' ,the location of the banner
     *
     * isPremium - Type: bool. Desc: is_premium
     *
     * msid - Type: guid. Desc: msid
     *
     * name - Type: string. Desc: name of the banner
     *
     * origin - Type: string. Desc: the page it displays in
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * targetUrl - Type: string. Desc: the banner link url
     * @param {dashboardSeeBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSeeBanner = function (params) {
        return this.bi.log(__assign({ evid: 34 }, params));
    };
    /**
    * @typedef {Object} crmHomeManageYourFinancesChooseParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} tabName - which tab the user choose
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: CRM Home - manage your finances - choose. Evid: 493.
    
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * tabName - Type: string. Desc: which tab the user choose
     *
     * uuid - Type: guid. Desc: uuid
     * @param {crmHomeManageYourFinancesChooseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeManageYourFinancesChoose = function (params) {
        return this.bi.log(__assign({ evid: 493 }, params));
    };
    /**
    * @typedef {Object} quotesNonValidPaypalAccountPopupParams
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Non valid Paypal account popup. Evid: 443.
     * Event description: when a user has an old / non business paypal account and connection to paypal is not possible.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow
     *
     * platform - Type: string.
     * @param {quotesNonValidPaypalAccountPopupParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesNonValidPaypalAccountPopup = function (params) {
        return this.bi.log(__assign({ evid: 443 }, params));
    };
    /**
    * @typedef {Object} rolesLoginPageLoadStartParams
    * @property {string} invite_email - invited email
    * @property {string} invite_id - invite_id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Roles - login page load start. Evid: 356.
     * Event description: before login component is loaded - page load start.
    
     * invite_email - Type: string. Desc: invited email
     *
     * invite_id - Type: string. Desc: invite_id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {rolesLoginPageLoadStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.rolesLoginPageLoadStart = function (params) {
        return this.bi.log(__assign({ evid: 356 }, params));
    };
    /**
    * @typedef {Object} quotesBulkActionsPrintParams
    * @property {string} filter - type of filter
    * @property {string} msid - msid
    * @property {string} number - number of invoices choose or all
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - bulk actions - Print. Evid: 348.
     * Event description: Quotes - Create invoice - Toggle Recurring.
    
     * filter - Type: string. Desc: type of filter
     *
     * msid - Type: string. Desc: msid
     *
     * number - Type: string. Desc: number of invoices choose or all
     *
     * platform - Type: string.
     * @param {quotesBulkActionsPrintParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesBulkActionsPrint = function (params) {
        return this.bi.log(__assign({ evid: 348 }, params));
    };
    /**
    * @typedef {Object} quotesSettingsNewTaxClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - settings , create invoice, empty experience
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - New tax click. Evid: 433.
     * Event description: Settings - New tax click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: settings , create invoice, empty experience
     *
     * platform - Type: string.
     * @param {quotesSettingsNewTaxClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesSettingsNewTaxClick = function (params) {
        return this.bi.log(__assign({ evid: 433 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersLearnMoreClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Automations > Learn More Click. Evid: 218.
     * Event description: Learn More Click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTriggersLearnMoreClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersLearnMoreClick = function (params) {
        return this.bi.log(__assign({ evid: 218 }, params));
    };
    /**
    * @typedef {Object} accountSettingsCloseYourWixAccountCloseAccountRequestSubmitedParams
    * @property {string} free_text - users feedback
    * @property {string} platform - null
    * @property {string} reason - why are you closing the account
    * @property {GUID} uuid - user id
    **/
    /**
     * Name: Account Settings > Close your WIX account - close account request summited. Evid: 1279.
     * Event description: the user clicks on the "close my account" button
    
    https://docs.google.com/presentation/d/1toummTuN1-7cxFR3TgbGMi5F5UR-vYntZHpCRfYhkOo/edit#slide=id.gaa2182f012_3_18.
    
     * free_text - Type: string. Desc: users feedback
     *
     * platform - Type: string.
     *
     * reason - Type: string. Desc: why are you closing the account
     *
     * uuid - Type: guid. Desc: user id
     * @param {accountSettingsCloseYourWixAccountCloseAccountRequestSubmitedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsCloseYourWixAccountCloseAccountRequestSubmited = function (params) {
        return this.bi.log(__assign({ evid: 1279 }, params));
    };
    /**
    * @typedef {Object} quotesChooseIssueDateParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - choose issue date. Evid: 386.
     * Event description: Quotes - choose issue date.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesChooseIssueDateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesChooseIssueDate = function (params) {
        return this.bi.log(__assign({ evid: 386 }, params));
    };
    /**
    * @typedef {Object} apesSaveEditedNotification1234Params
    * @property {string} componentChanged - which component was changed
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {GUID} rule_id - rule id
    **/
    /**
     * Name: APeS - Save edited notification. Evid: 1234.
     * Event description: APeS - Save edited notification.
    
     * componentChanged - Type: string. Desc: which component was changed
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule id
     * @param {apesSaveEditedNotification1234Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesSaveEditedNotification1234 = function (params) {
        return this.bi.log(__assign({ evid: 1234 }, params));
    };
    /**
    * @typedef {Object} invoicesWidgetResendViaEmailParams
    * @property {GUID} contactId - contact id
    * @property {GUID} invoiceId - invoice id
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - widget - resend via email. Evid: 1322.
     * Event description: Invoices - widget - resend via email.
    
     * contactId - Type: guid. Desc: contact id
     *
     * invoiceId - Type: guid. Desc: invoice id
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesWidgetResendViaEmailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesWidgetResendViaEmail = function (params) {
        return this.bi.log(__assign({ evid: 1322 }, params));
    };
    /**
    * @typedef {Object} teamManagementAddMembersInviteClickFailParams
    * @property {string} error_desc - error description
    * @property {string} invite_role - (please note that using the toggle changes role desc) the role the user sends to the invitees
    * @property {string} origin - where the dialog was opened
    * @property {string} platform - null
    **/
    /**
     * Name: Team Management - add members - invite click fail. Evid: 177.
     * Event description: When a user clicks on 'send invites' in the add member window - fail response.
    
     * error_desc - Type: string. Desc: error description
     *
     * invite_role - Type: string. Desc: (please note that using the toggle changes role desc) the role the user sends to the invitees
     *
     * origin - Type: string. Desc: where the dialog was opened
     *
     * platform - Type: string.
     * @param {teamManagementAddMembersInviteClickFailParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementAddMembersInviteClickFail = function (params) {
        return this.bi.log(__assign({ evid: 177 }, params));
    };
    /**
    * @typedef {Object} crmHomeImportContactsViaContactsBannerParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - import contacts via contacts banner. Evid: 821.
     * Event description: CRM Home - import contacts via contacts banner.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeImportContactsViaContactsBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeImportContactsViaContactsBanner = function (params) {
        return this.bi.log(__assign({ evid: 821 }, params));
    };
    /**
    * @typedef {Object} analyticsChangeKpisTimePeriodParams
    * @property {string} app_id - app id of the vertical that displays the widget.
    * @property {string} hosting - MA/Editor
    * @property {string} kpi_period - the kpis period chosen for all seen kpis when the kpi is shown
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: analytics > change kpis time period. Evid: 376.
     * Event description: When a user chooses to change the time period of the kpis shown to him in analytics widget (the click that actually changes the period - not the period selection menu).
    
     * app_id - Type: string. Desc: app id of the vertical that displays the widget.
     *
     * hosting - Type: string. Desc: MA/Editor
     *
     * kpi_period - Type: string. Desc: the kpis period chosen for all seen kpis when the kpi is shown
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {analyticsChangeKpisTimePeriodParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsChangeKpisTimePeriod = function (params) {
        return this.bi.log(__assign({ evid: 376 }, params));
    };
    /**
    * @typedef {Object} invoicesCreateOrderNewInvoiceClickParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - create order - new invoice click. Evid: 1213.
     * Event description: Invoices - Add a product Variant - add to invoice.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesCreateOrderNewInvoiceClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesCreateOrderNewInvoiceClick = function (params) {
        return this.bi.log(__assign({ evid: 1213 }, params));
    };
    /**
    * @typedef {Object} automationsBannerActivateParams
    * @property {string} banner_name - banner_name
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations > banner activate. Evid: 145.
     * Event description: user click on banner activate.
    
     * banner_name - Type: string. Desc: banner_name
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsBannerActivateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsBannerActivate = function (params) {
        return this.bi.log(__assign({ evid: 145 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersGetTheAppClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} msid - msid
    * @property {string} origin - origin page
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {number} src - null
    **/
    /**
     * Name: Automations > get the app click. Evid: 202.
     * Event description: get the app click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin page
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * src - Type: numeric.
     * @param {dashboardTriggersGetTheAppClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersGetTheAppClick = function (params) {
        return this.bi.log(__assign({ evid: 202 }, params));
    };
    /**
    * @typedef {Object} bizManagerOpenPanelInteractiveParams
    * @property {string} hosting - MA/editor
    * @property {number} loading_time - time from start opening the panel till interactive
    * @property {GUID} msid - msid
    * @property {string} panel_name - the panel that was opened
    * @property {string} platform - null
    * @property {string} sub_view - page in app
    * @property {string} view - requested view
    **/
    /**
     * Name: Biz Manager > Open panel - interactive. Evid: 657.
     * Event description: panel is interactive.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * loading_time - Type: numeric. Desc: time from start opening the panel till interactive
     *
     * msid - Type: guid. Desc: msid
     *
     * panel_name - Type: string. Desc: the panel that was opened
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: page in app
     *
     * view - Type: string. Desc: requested view
     * @param {bizManagerOpenPanelInteractiveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerOpenPanelInteractive = function (params) {
        return this.bi.log(__assign({ evid: 657 }, params));
    };
    /**
    * @typedef {Object} verticalsEmailNotificationSent1270Params
    * @property {string} channel - email
    * @property {string} contact_id - If the email has been sent to member/contact
    * @property {GUID} msid - msid
    * @property {GUID} notificationId - Notification ID
    * @property {string} platform - null
    * @property {string} template_id - Descriptive name for the type of email. e.g. Identity.Member_Approved
    **/
    /**
     * Name: Verticals -> email notification -> Sent. Evid: 1270.
     * Event description: When A vertical send an email notification which doesn't go via Ping!.
    
     * channel - Type: string. Desc: email
     *
     * contact_id - Type: string. Desc: If the email has been sent to member/contact
     *
     * msid - Type: guid. Desc: msid
     *
     * notificationId - Type: guid. Desc: Notification ID
     *
     * platform - Type: string.
     *
     * template_id - Type: string. Desc: Descriptive name for the type of email. e.g. Identity.Member_Approved
     * @param {verticalsEmailNotificationSent1270Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.verticalsEmailNotificationSent1270 = function (params) {
        return this.bi.log(__assign({ evid: 1270 }, params));
    };
    /**
    * @typedef {Object} dashboardWidgetSeenParams
    * @property {string} hosting - hosting
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} widget_name - widget name
    **/
    /**
     * Name: dashboard > widget seen. Evid: 298.
     * Event description: widget is shown in the dashboard - the event is being sent only when the user sees the widget.
    
     * hosting - Type: string. Desc: hosting
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * widget_name - Type: string. Desc: widget name
     * @param {dashboardWidgetSeenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardWidgetSeen = function (params) {
        return this.bi.log(__assign({ evid: 298 }, params));
    };
    /**
    * @typedef {Object} foldersSortListViewParams
    * @property {string} name - name/date_created/last_edited(name of field sorted by)
    * @property {string} order - desc/asc
    * @property {string} platform - null
    * @property {string} sub_view - list-view
    * @property {string} view - my-sites
    **/
    /**
     * Name: Folders > sort list view. Evid: 127.
     * Event description: sort list view.
    
     * name - Type: string. Desc: name/date_created/last_edited(name of field sorted by)
     *
     * order - Type: string. Desc: desc/asc
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: list-view
     *
     * view - Type: string. Desc: my-sites
     * @param {foldersSortListViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersSortListView = function (params) {
        return this.bi.log(__assign({ evid: 127 }, params));
    };
    /**
    * @typedef {Object} bizManagerModuleLoadingStartParams
    * @property {GUID} app_id - application id
    * @property {string} hosting - MA/editor
    * @property {boolean} initial_load - first load
    * @property {string} module_id - requested module
    * @property {GUID} msid - metasite id
    * @property {string} origin - specific button triggered the the view loading (== referral info from editor)
    * @property {string} origin_app_id - origin_app_id (what app opened the bizmgr)
    * @property {string} platform - null
    * @property {string} prev_module_id - last module loaded
    * @property {string} referral_info - specific button triggered the the view loading
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: Biz Manager - module loading - start. Evid: 564.
     * Event description: module that is loaded in the biz manager (like Stores, Shoutout, etc.).
    
     * app_id - Type: guid. Desc: application id
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * initial_load - Type: bool. Desc: first load
     *
     * module_id - Type: string. Desc: requested module
     *
     * msid - Type: guid. Desc: metasite id
     *
     * origin - Type: string. Desc: specific button triggered the the view loading (== referral info from editor)
     *
     * origin_app_id - Type: string. Desc: origin_app_id (what app opened the bizmgr)
     *
     * platform - Type: string.
     *
     * prev_module_id - Type: string. Desc: last module loaded
     *
     * referral_info - Type: string. Desc: specific button triggered the the view loading
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {bizManagerModuleLoadingStartParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerModuleLoadingStart = function (params) {
        return this.bi.log(__assign({ evid: 564 }, params));
    };
    /**
    * @typedef {Object} ascendPpPurchasePageEnterPromoParams
    * @property {GUID} app_id - app_id
    * @property {number} cycleId - cycle id
    * @property {string} cycle_name - cycle name
    * @property {string} origin - product name open PP
    * @property {GUID} packageId - package id
    * @property {string} package_name - package name
    * @property {string} platform - null
    * @property {string} referralInfo - button name open PP
    * @property {string} selection - enter click / apply
    **/
    /**
     * Name: Ascend PP - Purchase Page Enter promo. Evid: 140.
     * Event description: User click on enter promo code or apply.
    
     * app_id - Type: guid. Desc: app_id
     *
     * cycleId - Type: numeric. Desc: cycle id
     *
     * cycle_name - Type: string. Desc: cycle name
     *
     * origin - Type: string. Desc: product name open PP
     *
     * packageId - Type: guid. Desc: package id
     *
     * package_name - Type: string. Desc: package name
     *
     * platform - Type: string.
     *
     * referralInfo - Type: string. Desc: button name open PP
     *
     * selection - Type: string. Desc: enter click / apply
     * @param {ascendPpPurchasePageEnterPromoParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ascendPpPurchasePageEnterPromo = function (params) {
        return this.bi.log(__assign({ evid: 140 }, params));
    };
    /**
    * @typedef {Object} engageEmailSettingsPageViewParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Settings - error toast. Evid: 540.
     * Event description: Quotes - Settings - error toast.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {engageEmailSettingsPageViewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.engageEmailSettingsPageView = function (params) {
        return this.bi.log(__assign({ evid: 540 }, params));
    };
    /**
    * @typedef {Object} dashboardClickOnSideBarParams
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > click on side bar. Evid: 27.
    
    
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardClickOnSideBarParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardClickOnSideBar = function (params) {
        return this.bi.log(__assign({ evid: 27 }, params));
    };
    /**
    * @typedef {Object} mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCodeParams
    * @property {string} code - confirmation code
    * @property {string} hashed_phone - hashed_phone
    * @property {string} mode - add/edit
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Mobile Phone Number Confirmation - Verify Clicked. Evid: 662.
     * Event description: the final user confirmation before the server validates the number.
    
     * code - Type: string. Desc: confirmation code
     *
     * hashed_phone - Type: string. Desc: hashed_phone
     *
     * mode - Type: string. Desc: add/edit
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCodeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobilePhoneNumberConfirmationPopUpClickConfirmForSmsCode = function (params) {
        return this.bi.log(__assign({ evid: 662 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersMyTriggersClickParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {number} src - null
    **/
    /**
     * Name: Automations > My Triggers Click. Evid: 217.
     * Event description: My Triggers Click.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     * @param {dashboardTriggersMyTriggersClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersMyTriggersClick = function (params) {
        return this.bi.log(__assign({ evid: 217 }, params));
    };
    /**
    * @typedef {Object} bizManagerSetupWidgetIsDisplayedParams
    * @property {string} asset_campaign_guid - asset_campaign_guid
    * @property {number} done_steps - number of done steps in setup
    * @property {string} hosting - MA/editor
    * @property {string} module_id - module  name
    * @property {GUID} msid - metasite id
    * @property {string} platform - null
    * @property {number} skipped_steps - skipped_steps
    * @property {number} steps - number of steps in setup
    * @property {string} widget_state - minimized/expanded
    **/
    /**
     * Name: Biz Manager - setup widget is displayed. Evid: 573.
     * Event description: TPA setup widget is displayed in biz mgr.
    
     * asset_campaign_guid - Type: string. Desc: asset_campaign_guid
     *
     * done_steps - Type: numeric. Desc: number of done steps in setup
     *
     * hosting - Type: string. Desc: MA/editor
     *
     * module_id - Type: string. Desc: module  name
     *
     * msid - Type: guid. Desc: metasite id
     *
     * platform - Type: string.
     *
     * skipped_steps - Type: numeric. Desc: skipped_steps
     *
     * steps - Type: numeric. Desc: number of steps in setup
     *
     * widget_state - Type: string. Desc: minimized/expanded
     * @param {bizManagerSetupWidgetIsDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerSetupWidgetIsDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 573 }, params));
    };
    /**
    * @typedef {Object} accountManagerStartLoadingAccountManagerParams
    * @property {boolean} initial_load - initial_load
    * @property {string} platform - null
    * @property {string} referral_info - referral_info
    **/
    /**
     * Name: account manager - start loading account manager. Evid: 110.
     * Event description: start loading account manager.
    
     * initial_load - Type: bool. Desc: initial_load
     *
     * platform - Type: string.
     *
     * referral_info - Type: string. Desc: referral_info
     * @param {accountManagerStartLoadingAccountManagerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountManagerStartLoadingAccountManager = function (params) {
        return this.bi.log(__assign({ evid: 110 }, params));
    };
    /**
    * @typedef {Object} homeCloseDialogParams
    * @property {GUID} app_id - -
    * @property {GUID} msid - -
    * @property {string} origin - place of clicking my sites ( Header, top left bar). Relevant only for site list
    * @property {string} page_view - Dashboard / my sites
    * @property {string} platform - null
    * @property {string} prev_view - -
    * @property {string} referral_info - -
    * @property {string} view - name of dialog: my-apps, site-list, account
    * @property {string} wixsession - deprecated
    **/
    /**
     * Name: Home > close dialog. Evid: 301.
     * Event description: closing a dialog from home my apps, my sites, account menu.
    
     * app_id - Type: guid. Desc: -
     *
     * msid - Type: guid. Desc: -
     *
     * origin - Type: string. Desc: place of clicking my sites ( Header, top left bar). Relevant only for site list
     *
     * page_view - Type: string. Desc: Dashboard / my sites
     *
     * platform - Type: string.
     *
     * prev_view - Type: string. Desc: -
     *
     * referral_info - Type: string. Desc: -
     *
     * view - Type: string. Desc: name of dialog: my-apps, site-list, account
     *
     * wixsession - Type: string. Desc: deprecated
     * @param {homeCloseDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeCloseDialog = function (params) {
        return this.bi.log(__assign({ evid: 301 }, params));
    };
    /**
    * @typedef {Object} invoicesEditModesNegativePriceToastParams
    * @property {string} invoiceStatus - if no status then create
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - edit modes - negative price toast. Evid: 1331.
     * Event description: Invoices - edit modes - negative price toast.
    
     * invoiceStatus - Type: string. Desc: if no status then create
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesEditModesNegativePriceToastParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesEditModesNegativePriceToast = function (params) {
        return this.bi.log(__assign({ evid: 1331 }, params));
    };
    /**
    * @typedef {Object} quotesDeleteInvoicePageCancelParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin_device - web,native
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Delete invoice page - Cancel. Evid: 432.
     * Event description: cancel in delete page (for every close (cancel, x, background click)).
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin_device - Type: string. Desc: web,native
     *
     * platform - Type: string.
     * @param {quotesDeleteInvoicePageCancelParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesDeleteInvoicePageCancel = function (params) {
        return this.bi.log(__assign({ evid: 432 }, params));
    };
    /**
    * @typedef {Object} phoneVerificationHoverOnMotivationParams
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Phone Verification - Hover on motivation. Evid: 660.
     * Event description: hover on "why add a mobile number?".
    
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {phoneVerificationHoverOnMotivationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.phoneVerificationHoverOnMotivation = function (params) {
        return this.bi.log(__assign({ evid: 660 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteQuickActionDialogCloseParams
    * @property {GUID} msid - -
    * @property {string} name - quick action name
    * @property {string} origin - site-settings, my-sites
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > site -> quick action dialog  - close. Evid: 43.
     * Event description: user clicks cancel or X in dialog of a quick action (e.g cancel rename).
    
     * msid - Type: guid. Desc: -
     *
     * name - Type: string. Desc: quick action name
     *
     * origin - Type: string. Desc: site-settings, my-sites
     *
     * platform - Type: string.
     * @param {dashboardSiteQuickActionDialogCloseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteQuickActionDialogClose = function (params) {
        return this.bi.log(__assign({ evid: 43 }, params));
    };
    /**
    * @typedef {Object} quotesCreateInvoiceAddLineParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} origin - create invoice, edit invoice
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Create invoice - Add line. Evid: 412.
     * Event description: Create invoice - add line.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * origin - Type: string. Desc: create invoice, edit invoice
     *
     * platform - Type: string.
     * @param {quotesCreateInvoiceAddLineParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesCreateInvoiceAddLine = function (params) {
        return this.bi.log(__assign({ evid: 412 }, params));
    };
    /**
    * @typedef {Object} apesMoreActionsChooseAnOptionParams
    * @property {boolean} isPreinstalled - if the automation was preinstalled
    * @property {GUID} msid - msid
    * @property {string} option - which option was choose
    * @property {string} origin - which origin this action was made from
    * @property {string} platform - null
    * @property {GUID} rule_id - rule id
    **/
    /**
     * Name: automations - widget - more actions - choose an option. Evid: 1237.
     * Event description: APeS - Save edited notification.
    
     * isPreinstalled - Type: bool. Desc: if the automation was preinstalled
     *
     * msid - Type: guid. Desc: msid
     *
     * option - Type: string. Desc: which option was choose
     *
     * origin - Type: string. Desc: which origin this action was made from
     *
     * platform - Type: string.
     *
     * rule_id - Type: guid. Desc: rule id
     * @param {apesMoreActionsChooseAnOptionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.apesMoreActionsChooseAnOption = function (params) {
        return this.bi.log(__assign({ evid: 1237 }, params));
    };
    /**
    * @typedef {Object} quotesAddCustomerClickParams
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes - Add Customer - Click. Evid: 460.
     * Event description: Add Customer - Click.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesAddCustomerClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesAddCustomerClick = function (params) {
        return this.bi.log(__assign({ evid: 460 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersCustomizeTheTriggerValueChangeValueChangeParams
    * @property {number} delay - timing
    * @property {string} flowType - flow in which the save happens: {create, edit}
    * @property {number} index - index for drip campaign
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    * @property {number} src - deprecated
    * @property {string} units - units
    * @property {string} value - value of rule
    **/
    /**
     * Name: Automations > Customize the trigger - Value change - value change. Evid: 205.
     * Event description: customize the trigger value.
    
     * delay - Type: numeric. Desc: timing
     *
     * flowType - Type: string. Desc: flow in which the save happens: {create, edit}
     *
     * index - Type: numeric. Desc: index for drip campaign
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     *
     * src - Type: numeric. Desc: deprecated
     *
     * units - Type: string. Desc: units
     *
     * value - Type: string. Desc: value of rule
     * @param {dashboardTriggersCustomizeTheTriggerValueChangeValueChangeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersCustomizeTheTriggerValueChangeValueChange = function (params) {
        return this.bi.log(__assign({ evid: 205 }, params));
    };
    /**
    * @typedef {Object} invoicesItemsListChooseAProductParams
    * @property {GUID} appDefId - appDefId
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Invoices - Items List - choose a product. Evid: 1315.
     * Event description: Invoices - Items List - choose a product.
    
     * appDefId - Type: guid. Desc: appDefId
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {invoicesItemsListChooseAProductParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.invoicesItemsListChooseAProduct = function (params) {
        return this.bi.log(__assign({ evid: 1315 }, params));
    };
    /**
    * @typedef {Object} notificationClickOnNotificationParams
    * @property {string} channel - Web / browser / mobile / SMS / email
    * @property {string} clickOrigin - deprecated
    * @property {string} click_type - mark read/mark unread/click/delete
    * @property {string} contact_id - contact_id
    * @property {string} deep_link - deep_link
    * @property {string} feed_name - Sub category of the channel (All Sites/This Site /Float/Oneapp notification center/ mobile os)
    * @property {string} grouped_notifications - list of notification ids contain in this notification. if the notification is not grouped this field will be null
    * @property {boolean} is_high_priority - true / false
    * @property {GUID} msid - msid of the notification
    * @property {string} notification_id - deprecated
    * @property {string} notificationid - notificationid
    * @property {string} origin - (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {string} platform - null
    **/
    /**
     * Name: Notification - Click on notification. Evid: 272.
     * Event description: user clicks on a notification and opens app (test).
    
     * channel - Type: string. Desc: Web / browser / mobile / SMS / email
     *
     * clickOrigin - Type: string. Desc: deprecated
     *
     * click_type - Type: string. Desc: mark read/mark unread/click/delete
     *
     * contact_id - Type: string. Desc: contact_id
     *
     * deep_link - Type: string. Desc: deep_link
     *
     * feed_name - Type: string. Desc: Sub category of the channel (All Sites/This Site /Float/Oneapp notification center/ mobile os)
     *
     * grouped_notifications - Type: string. Desc: list of notification ids contain in this notification. if the notification is not grouped this field will be null
     *
     * is_high_priority - Type: bool. Desc: true / false
     *
     * msid - Type: guid. Desc: msid of the notification
     *
     * notification_id - Type: string. Desc: deprecated
     *
     * notificationid - Type: string. Desc: notificationid
     *
     * origin - Type: string. Desc: (Msid/my-site) MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * platform - Type: string.
     * @param {notificationClickOnNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationClickOnNotification = function (params) {
        return this.bi.log(__assign({ evid: 272 }, params));
    };
    /**
    * @typedef {Object} automationsXOnAutomationsBannerParams
    * @property {string} bannerName - which banner this event was activated on
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - X on automations banner. Evid: 1392.
     * Event description: CRM Home - Top carousel main CTA click.
    
     * bannerName - Type: string. Desc: which banner this event was activated on
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsXOnAutomationsBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsXOnAutomationsBanner = function (params) {
        return this.bi.log(__assign({ evid: 1392 }, params));
    };
    /**
    * @typedef {Object} dashboardSiteSelectorLoadedParams
    * @property {string} platform - null
    * @property {string} sitePublished - null
    * @property {Url} referral - null
    * @property {number} site_type_enriched - null
    * @property {undefined} site_type - null
    * @property {undefined} siteType - null
    * @property {number} src - null
    **/
    /**
     * Name: dashboard > site selector loaded. Evid: 24.
    
    
     * platform - Type: string.
     *
     * sitePublished - Type: string.
     *
     * referral - Type: url.
     *
     * site_type_enriched - Type: numeric.
     *
     * site_type - Type: map.
     *
     * siteType - Type: map.
     *
     * src - Type: numeric.
     * @param {dashboardSiteSelectorLoadedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardSiteSelectorLoaded = function (params) {
        return this.bi.log(__assign({ evid: 24 }, params));
    };
    /**
    * @typedef {Object} teamManagementAddMembersSendInviteParams
    * @property {string} invite_role - (please note that using the toggle changes role desc) the role the user sends to the invitees
    * @property {number} number_of_existing_emails - emails that already exist in the team
    * @property {number} number_of_invalid_emails - number of invalid numbers (error for not typing correctly - exclude errors for existing emails)
    * @property {number} number_of_valid_emails - number of valid emails
    * @property {string} origin - where the user opened the dialog from
    * @property {string} platform - null
    * @property {string} roles_displayed - list of roles displayed to the user
    **/
    /**
     * Name: Team Management – add members – send invite. Evid: 175.
     * Event description: When a user clicks on 'send invites' in the add member window.
    
     * invite_role - Type: string. Desc: (please note that using the toggle changes role desc) the role the user sends to the invitees
     *
     * number_of_existing_emails - Type: numeric. Desc: emails that already exist in the team
     *
     * number_of_invalid_emails - Type: numeric. Desc: number of invalid numbers (error for not typing correctly - exclude errors for existing emails)
     *
     * number_of_valid_emails - Type: numeric. Desc: number of valid emails
     *
     * origin - Type: string. Desc: where the user opened the dialog from
     *
     * platform - Type: string.
     *
     * roles_displayed - Type: string. Desc: list of roles displayed to the user
     * @param {teamManagementAddMembersSendInviteParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.teamManagementAddMembersSendInvite = function (params) {
        return this.bi.log(__assign({ evid: 175 }, params));
    };
    /**
    * @typedef {Object} accountManagerPageComponentFinishLoadingAccountManagerParams
    * @property {number} loading_time - loading_time
    * @property {string} platform - null
    * @property {string} prev_sub_view - prev_sub_view
    * @property {string} prev_view - prev_view
    * @property {string} referral_info - referral_info
    * @property {string} sub_view - sub_view
    * @property {string} view - view
    **/
    /**
     * Name: account manager - page component finish loading account manager. Evid: 113.
     * Event description: start loading account manager module.
    
     * loading_time - Type: numeric. Desc: loading_time
     *
     * platform - Type: string.
     *
     * prev_sub_view - Type: string. Desc: prev_sub_view
     *
     * prev_view - Type: string. Desc: prev_view
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * sub_view - Type: string. Desc: sub_view
     *
     * view - Type: string. Desc: view
     * @param {accountManagerPageComponentFinishLoadingAccountManagerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountManagerPageComponentFinishLoadingAccountManager = function (params) {
        return this.bi.log(__assign({ evid: 113 }, params));
    };
    /**
    * @typedef {Object} dashboardQuickActionsDragNDropParams
    * @property {string} direction - null
    * @property {number} from - null
    * @property {boolean} isFromTopSix - null
    * @property {boolean} isToTopSix - null
    * @property {GUID} msid - null
    * @property {string} name - null
    * @property {string} platform - null
    * @property {number} src - null
    * @property {number} to - null
    * @property {number} duration - null
    **/
    /**
     * Name: dashboard > quick actions drag'N'drop. Evid: 26.
    
    
     * direction - Type: string.
     *
     * from - Type: numeric.
     *
     * isFromTopSix - Type: bool.
     *
     * isToTopSix - Type: bool.
     *
     * msid - Type: guid.
     *
     * name - Type: string.
     *
     * platform - Type: string.
     *
     * src - Type: numeric.
     *
     * to - Type: numeric.
     *
     * duration - Type: numeric.
     * @param {dashboardQuickActionsDragNDropParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardQuickActionsDragNDrop = function (params) {
        return this.bi.log(__assign({ evid: 26 }, params));
    };
    /**
    * @typedef {Object} bizManagerShowToastParams
    * @property {string} hosting - MA/editor
    * @property {GUID} msid - metasite id
    * @property {string} name - toast name, supplied by toast initiator
    * @property {string} platform - null
    * @property {string} scope - toast scope {app/ dashboard/my-sites}
    * @property {string} severity - high, normal, low
    * @property {number} timeout - miliseconds to auto hide toast, 0 is sticky toast
    * @property {string} type - standard, error, warning, success, premium
    **/
    /**
     * Name: Biz Manager - show toast. Evid: 85.
     * Event description: a toast is shown in bizmgr.
    
     * hosting - Type: string. Desc: MA/editor
     *
     * msid - Type: guid. Desc: metasite id
     *
     * name - Type: string. Desc: toast name, supplied by toast initiator
     *
     * platform - Type: string.
     *
     * scope - Type: string. Desc: toast scope {app/ dashboard/my-sites}
     *
     * severity - Type: string. Desc: high, normal, low
     *
     * timeout - Type: numeric. Desc: miliseconds to auto hide toast, 0 is sticky toast
     *
     * type - Type: string. Desc: standard, error, warning, success, premium
     * @param {bizManagerShowToastParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.bizManagerShowToast = function (params) {
        return this.bi.log(__assign({ evid: 85 }, params));
    };
    /**
    * @typedef {Object} quotesConnectPaymentClickParams
    * @property {string} msid - msid
    * @property {string} name - name of payment
    * @property {string} origin - how user arrived to the flow onboarding/payments
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - Connect payment click. Evid: 441.
     * Event description: user clicks on 'connect' from the payment popup page.
    
     * msid - Type: string. Desc: msid
     *
     * name - Type: string. Desc: name of payment
     *
     * origin - Type: string. Desc: how user arrived to the flow onboarding/payments
     *
     * platform - Type: string.
     * @param {quotesConnectPaymentClickParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesConnectPaymentClick = function (params) {
        return this.bi.log(__assign({ evid: 441 }, params));
    };
    /**
    * @typedef {Object} dialogFirstLoadParams
    * @property {GUID} app_id - -
    * @property {number} loading_time - loading time of page
    * @property {GUID} msid - -
    * @property {string} origin - place of clicking my sites ( Header, top left bar). Relevant only for site list
    * @property {string} platform - null
    * @property {string} prev_view - -
    * @property {string} referral_info - -
    * @property {string} view - my-apps, site-list
    * @property {string} wixsession - authentication token. if the session exists, then the user is logged in.
    **/
    /**
     * Name: dialog first load. Evid: 304.
     * Event description: opening a dialog from home (sent only in the first click within the same session) {my apps, my sites}.
    
     * app_id - Type: guid. Desc: -
     *
     * loading_time - Type: numeric. Desc: loading time of page
     *
     * msid - Type: guid. Desc: -
     *
     * origin - Type: string. Desc: place of clicking my sites ( Header, top left bar). Relevant only for site list
     *
     * platform - Type: string.
     *
     * prev_view - Type: string. Desc: -
     *
     * referral_info - Type: string. Desc: -
     *
     * view - Type: string. Desc: my-apps, site-list
     *
     * wixsession - Type: string. Desc: authentication token. if the session exists, then the user is logged in.
     * @param {dialogFirstLoadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dialogFirstLoad = function (params) {
        return this.bi.log(__assign({ evid: 304 }, params));
    };
    /**
    * @typedef {Object} crmHomeTasksWidgetSeeAllTasksParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: CRM Home - Tasks widget - see all tasks. Evid: 823.
     * Event description: CRM Home - Tasks widget - see all tasks.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {crmHomeTasksWidgetSeeAllTasksParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.crmHomeTasksWidgetSeeAllTasks = function (params) {
        return this.bi.log(__assign({ evid: 823 }, params));
    };
    /**
    * @typedef {Object} quotesClickDueDateParams
    * @property {string} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Quotes - click due date. Evid: 383.
     * Event description: Quotes - click due date.
    
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     * @param {quotesClickDueDateParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesClickDueDate = function (params) {
        return this.bi.log(__assign({ evid: 383 }, params));
    };
    /**
    * @typedef {Object} analyticsKpiIsShownInAnalyticsWidgetParams
    * @property {string} app_id - app id of the vertical that displays the widget.
    * @property {string} hosting - MA/editor/ADI
    * @property {number} kpi_location - 0-left 1-middle 2-right
    * @property {string} kpi_name - kpi's name
    * @property {string} kpi_period - the kpis period chosen for all seen kpis when the kpi is shown
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} value - the value that WAS returns as the kpi value
    **/
    /**
     * Name: Analytics > KPI is shown in analytics widget. Evid: 369.
     * Event description: For each kpi shown in the analytics widget.
    
     * app_id - Type: string. Desc: app id of the vertical that displays the widget.
     *
     * hosting - Type: string. Desc: MA/editor/ADI
     *
     * kpi_location - Type: numeric. Desc: 0-left 1-middle 2-right
     *
     * kpi_name - Type: string. Desc: kpi's name
     *
     * kpi_period - Type: string. Desc: the kpis period chosen for all seen kpis when the kpi is shown
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * value - Type: string. Desc: the value that WAS returns as the kpi value
     * @param {analyticsKpiIsShownInAnalyticsWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.analyticsKpiIsShownInAnalyticsWidget = function (params) {
        return this.bi.log(__assign({ evid: 369 }, params));
    };
    /**
    * @typedef {Object} dashboardTriggersStep2EditingActionParams
    * @property {string} button_name - button name
    * @property {string} event_name - name of event (action)
    * @property {GUID} msid - msid
    * @property {string} platform - null
    * @property {string} recipe_name - recipe name
    * @property {GUID} rule_id - if this trigger all ready customized, null if it first time customization
    **/
    /**
     * Name: Automations > step 2 > editing action. Evid: 225.
     * Event description: editing an action.
    
     * button_name - Type: string. Desc: button name
     *
     * event_name - Type: string. Desc: name of event (action)
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     *
     * recipe_name - Type: string. Desc: recipe name
     *
     * rule_id - Type: guid. Desc: if this trigger all ready customized, null if it first time customization
     * @param {dashboardTriggersStep2EditingActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardTriggersStep2EditingAction = function (params) {
        return this.bi.log(__assign({ evid: 225 }, params));
    };
    /**
    * @typedef {Object} accountSettingsCloseYourWixAccountEnterPageParams
    * @property {string} platform - null
    * @property {GUID} uuid - user id
    **/
    /**
     * Name: Account Settings > Close your WIX account - enter page. Evid: 1278.
     * Event description: new UX for the close your account
    
    https://docs.google.com/presentation/d/1toummTuN1-7cxFR3TgbGMi5F5UR-vYntZHpCRfYhkOo/edit#slide=id.gaa2182f012_3_18.
    
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: user id
     * @param {accountSettingsCloseYourWixAccountEnterPageParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.accountSettingsCloseYourWixAccountEnterPage = function (params) {
        return this.bi.log(__assign({ evid: 1278 }, params));
    };
    /**
    * @typedef {Object} mobilePhoneNumberConfirmationPopUpClickOkForSendingSmsParams
    * @property {string} hashed_phone - hashed_phone
    * @property {string} mode - add/edit
    * @property {string} origin - send / resend
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Mobile Phone Number Confirmation - send SMS. Evid: 661.
     * Event description: request for sms has sent.
    
     * hashed_phone - Type: string. Desc: hashed_phone
     *
     * mode - Type: string. Desc: add/edit
     *
     * origin - Type: string. Desc: send / resend
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {mobilePhoneNumberConfirmationPopUpClickOkForSendingSmsParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobilePhoneNumberConfirmationPopUpClickOkForSendingSms = function (params) {
        return this.bi.log(__assign({ evid: 661 }, params));
    };
    /**
    * @typedef {Object} automationsDaComponentManageAutomations286Params
    * @property {GUID} invoice_id - invoice guid
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {boolean} status - success,failure
    **/
    /**
     * Name: Quotes - partial payment success/failure page. Evid: 286.
     * Event description: Quotes - partial payment success/failure page.
    
     * invoice_id - Type: guid. Desc: invoice guid
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * status - Type: bool. Desc: success,failure
     * @param {automationsDaComponentManageAutomations286Params} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsDaComponentManageAutomations286 = function (params) {
        return this.bi.log(__assign({ evid: 286 }, params));
    };
    /**
    * @typedef {Object} dashboardEnterEditorxParams
    * @property {string} origin - the location of the button e.g. my-sites top button
    * @property {string} platform - null
    **/
    /**
     * Name: dashboard > enter editorx. Evid: 257.
     * Event description: user enters EditorX from different origins (site_list_top, site_list_bottom, top_bar, account_templates).
    
     * origin - Type: string. Desc: the location of the button e.g. my-sites top button
     *
     * platform - Type: string.
     * @param {dashboardEnterEditorxParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dashboardEnterEditorx = function (params) {
        return this.bi.log(__assign({ evid: 257 }, params));
    };
    /**
    * @typedef {Object} foldersClickOnCreateNewFolderInDialogParams
    * @property {string} folder_name - the name of the folder
    * @property {string} hosting - MA
    * @property {number} nesting_level - 0 (my-sites)/1 (folder) /2/3..
    * @property {string} platform - null
    * @property {string} sub_view - grid/list-view
    * @property {string} view - my-sites/folder-view
    **/
    /**
     * Name: Folders > Click on 'Create' button in folder's dialog. Evid: 123.
     * Event description: when a user clicks on 'Create' from new folder dialog.
    
     * folder_name - Type: string. Desc: the name of the folder
     *
     * hosting - Type: string. Desc: MA
     *
     * nesting_level - Type: numeric. Desc: 0 (my-sites)/1 (folder) /2/3..
     *
     * platform - Type: string.
     *
     * sub_view - Type: string. Desc: grid/list-view
     *
     * view - Type: string. Desc: my-sites/folder-view
     * @param {foldersClickOnCreateNewFolderInDialogParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.foldersClickOnCreateNewFolderInDialog = function (params) {
        return this.bi.log(__assign({ evid: 123 }, params));
    };
    /**
    * @typedef {Object} automationsClosePreInstallAutomationBannerParams
    * @property {GUID} msid - msid
    * @property {string} platform - null
    **/
    /**
     * Name: Automations - close pre install automation banner. Evid: 1185.
     * Event description: Automations - close pre install automation banner.
    
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string.
     * @param {automationsClosePreInstallAutomationBannerParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.automationsClosePreInstallAutomationBanner = function (params) {
        return this.bi.log(__assign({ evid: 1185 }, params));
    };
    /**
    * @typedef {Object} notificationShowNotificationParams
    * @property {string} channel - Web / browser / mobile / SMS / email
    * @property {string} contact_id - contact_id guid
    * @property {string} feed_name - All sites/This site /float
    * @property {boolean} is_high_priority - true / false
    * @property {GUID} msid - deprecated
    * @property {string} notification_ids - all notifications that were shown in the page ( separated with a comma)
    * @property {string} notificationid - deprecated
    * @property {string} origin - MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
    * @property {number} page_number - page number - each page is limited to 30 notifications
    * @property {string} platform - null
    **/
    /**
     * Name: Notification - Notifications are displayed. Evid: 271.
     * Event description: user opens the dialog and X notifications are being displayed , after scrolling another event will be sent with a new page number.
    
     * channel - Type: string. Desc: Web / browser / mobile / SMS / email
     *
     * contact_id - Type: string. Desc: contact_id guid
     *
     * feed_name - Type: string. Desc: All sites/This site /float
     *
     * is_high_priority - Type: bool. Desc: true / false
     *
     * msid - Type: guid. Desc: deprecated
     *
     * notification_ids - Type: string. Desc: all notifications that were shown in the page ( separated with a comma)
     *
     * notificationid - Type: string. Desc: deprecated
     *
     * origin - Type: string. Desc: MSID of the site the user is on, my-sites if on Site List. Later on, also account-settings, and other account-level pages.
     *
     * page_number - Type: numeric. Desc: page number - each page is limited to 30 notifications
     *
     * platform - Type: string.
     * @param {notificationShowNotificationParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.notificationShowNotification = function (params) {
        return this.bi.log(__assign({ evid: 271 }, params));
    };
    /**
    * @typedef {Object} quotesInvoicesAutomaticallyCreateAndSendInvoicesParams
    * @property {boolean} is_auto - {true/false}
    * @property {string} msid - msid
    * @property {string} platform - null
    * @property {GUID} uuid - uuid
    **/
    /**
     * Name: Quotes/Invoices - Automatically create and send invoices. Evid: 459.
     * Event description: User Clicked on 'Automatically create and send invoices for accepted price quotes' checkbox in Price Quotes/Invoices settings.
    
     * is_auto - Type: bool. Desc: {true/false}
     *
     * msid - Type: string. Desc: msid
     *
     * platform - Type: string.
     *
     * uuid - Type: guid. Desc: uuid
     * @param {quotesInvoicesAutomaticallyCreateAndSendInvoicesParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.quotesInvoicesAutomaticallyCreateAndSendInvoices = function (params) {
        return this.bi.log(__assign({ evid: 459 }, params));
    };
    /**
    * @typedef {Object} homeMarkNotificationReadParams
    * @property {string} activity_type - activity type - not sent
    * @property {string} app_id - app that sent the notification
    * @property {string} msid - msid
    * @property {string} notification_id - notification id
    * @property {string} platform - null
    **/
    /**
     * Name: Home > mark notification read old event . now deprecated. Evid: 252.
     * Event description: user clicks on mark as read.
    
     * activity_type - Type: string. Desc: activity type - not sent
     *
     * app_id - Type: string. Desc: app that sent the notification
     *
     * msid - Type: string. Desc: msid
     *
     * notification_id - Type: string. Desc: notification id
     *
     * platform - Type: string.
     * @param {homeMarkNotificationReadParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.homeMarkNotificationRead = function (params) {
        return this.bi.log(__assign({ evid: 252 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 5,
        endpoint: 'dash'
    };
}
//# sourceMappingURL=index.js.map