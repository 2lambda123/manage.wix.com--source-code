var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import { Severity } from '@wix/fe-essentials-business-manager/sentry';
import { isErrorMonitorEnabled } from './util/is-error-monitor-enabled';
// for each invocation of the factory, we create a memoization context
export var createFetchAsyncMessagesLoader = function (_a) {
    var localeDistPath = _a.localeDistPath, availableLocalesArr = _a.availableLocales, errorReporter = _a.errorReporter;
    var availableLocales = new Set(availableLocalesArr);
    var translationsCache = new Map();
    // This function allows to add messages to the cache.
    // When the messages are bundled in the component bundle, we use this function to add the bundled messages to the cache.
    var addLocaleMessages = function (messagesMap) {
        var e_1, _a;
        try {
            for (var _b = __values(messagesMap.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var _d = __read(_c.value, 2), locale = _d[0], messages = _d[1];
                translationsCache.set(locale, Promise.resolve(messages));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    var removeLocaleMessages = function (locale) {
        translationsCache.delete(locale);
    };
    var fetchLocale = function (locale) { return __awaiter(void 0, void 0, void 0, function () {
        var url, response, status_1, ok, body, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // do not try to fetch if no messages are provided for this locale
                    if (!availableLocales.has(locale)) {
                        return [2 /*return*/, Promise.reject("Locale assets for " + locale + " are not provided")];
                    }
                    url = "" + __webpack_public_path__ + localeDistPath + "/messages_" + locale + ".json";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 5, , 6]);
                    return [4 /*yield*/, fetch(url)];
                case 2:
                    response = _a.sent();
                    status_1 = response.status, ok = response.ok;
                    if (ok) {
                        return [2 /*return*/, response.json()];
                    }
                    if (!errorReporter) return [3 /*break*/, 4];
                    return [4 /*yield*/, response.text()];
                case 3:
                    body = (_a.sent()).substring(0, 100);
                    if (isErrorMonitorEnabled(errorReporter)) {
                        errorReporter.captureMessage("Can't fetch locale " + locale, {
                            level: Severity.Error,
                            contexts: {
                                requestDetails: {
                                    url: url,
                                    body: body,
                                    status: status_1,
                                },
                            },
                        });
                    }
                    else {
                        errorReporter.captureMessage("Can't fetch locale " + locale, Severity.Error, {
                            captureContext: {
                                contexts: {
                                    requestDetails: {
                                        url: url,
                                        body: body,
                                        status: status_1,
                                    },
                                },
                            },
                        });
                    }
                    _a.label = 4;
                case 4: return [2 /*return*/, Promise.reject("Can't fetch locale " + locale + ", status code: " + status_1)];
                case 5:
                    e_2 = _a.sent();
                    if (errorReporter) {
                        if (isErrorMonitorEnabled(errorReporter)) {
                            // preserve the original error stack trace
                            errorReporter.captureException(e_2, {
                                level: Severity.Error,
                                contexts: {
                                    errorDetails: {
                                        message: "Can't fetch locale " + locale + " due to fetch error",
                                        url: url,
                                    },
                                },
                            });
                        }
                        else {
                            // preserve the original error stack trace
                            errorReporter.captureException(e_2, {
                                captureContext: {
                                    level: Severity.Error,
                                    contexts: {
                                        errorDetails: {
                                            message: "Can't fetch locale " + locale + " due to fetch error",
                                            url: url,
                                        },
                                    },
                                },
                            });
                        }
                    }
                    return [2 /*return*/, Promise.reject("Can't fetch locale " + locale + " due to fetch error")];
                case 6: return [2 /*return*/];
            }
        });
    }); };
    var asyncMessagesLoader = function (locale) { return __awaiter(void 0, void 0, void 0, function () {
        var maybeMessagesPromise, messagesPromise;
        return __generator(this, function (_a) {
            maybeMessagesPromise = translationsCache.get(locale);
            if (maybeMessagesPromise) {
                return [2 /*return*/, maybeMessagesPromise];
            }
            messagesPromise = fetchLocale(locale);
            translationsCache.set(locale, messagesPromise);
            return [2 /*return*/, messagesPromise];
        });
    }); };
    return {
        asyncMessagesLoader: asyncMessagesLoader,
        addLocaleMessages: addLocaleMessages,
        removeLocaleMessages: removeLocaleMessages,
    };
};
//# sourceMappingURL=createFetchAsyncMessagesLoader.js.map