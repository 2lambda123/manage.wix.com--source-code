import { __extends } from "tslib";
import React from 'react';
var VisibilityDetector = /** @class */ (function (_super) {
    __extends(VisibilityDetector, _super);
    function VisibilityDetector() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.ref = React.createRef();
        _this.state = {
            isFirstCheck: true,
        };
        return _this;
    }
    VisibilityDetector.prototype.componentDidMount = function () {
        var _this = this;
        this.observer = new IntersectionObserver(function (_a) {
            var entry = _a[0];
            if (entry.intersectionRatio === 1) {
                if (!_this.props.isDisabled) {
                    _this.props.onVisible({ isFirstCheck: _this.state.isFirstCheck });
                    _this.observer && _this.observer.disconnect();
                }
            }
            _this.setState({
                isFirstCheck: false,
            });
        }, {
            root: null,
            rootMargin: '0px',
            threshold: [1.0],
        });
        if (this.ref.current) {
            this.observer.observe(this.ref.current);
        }
    };
    VisibilityDetector.prototype.componentWillUnmount = function () {
        this.observer && this.observer.disconnect();
        this.observer = undefined;
    };
    VisibilityDetector.prototype.render = function () {
        if (React.isValidElement(this.props.children)) {
            return React.Children.only(React.cloneElement(this.props.children, { ref: this.ref }));
        }
        return this.props.children;
    };
    return VisibilityDetector;
}(React.PureComponent));
export { VisibilityDetector };
//# sourceMappingURL=visibility-detector.js.map