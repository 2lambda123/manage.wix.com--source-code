var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = { endpoint: 'suggestions-widget' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 5 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'suggestions-widget' });
    }
    ;
    /**
    * @typedef {Object} assetViewParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - --
    * @property {string} item_mode - skipped , open . complete
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} premium_badge - the item requires upgrade
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    * @property {string} tag - the name of the tag - if no tag but still in suggestion page write ‘All’
    * @property {string} visibility_trigger - normal/step_completed/scrolling to view/ arrow
    **/
    /**
     * Name: Biz Manager - dashboard asset shown. Evid: 590.
     * Event description: what's next asset shown.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: --
     *
     * item_mode - Type: string. Desc: skipped , open . complete
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * premium_badge - Type: string. Desc: the item requires upgrade
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     *
     * tag - Type: string. Desc: the name of the tag - if no tag but still in suggestion page write ‘All’
     *
     * visibility_trigger - Type: string. Desc: normal/step_completed/scrolling to view/ arrow
     * @param {assetViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.assetView = function (params) {
        return this.bi.log(__assign({ evid: 590 }, params));
    };
    /**
    * @typedef {Object} dashboardErrorPageParams
    * @property {string} error_location - specifies the location in page: header/sidebar/app/sidepanel etc. includes error type
    * @property {string} error_name - null when it's a system error, permission when the error is permission related (user has no permission for the page)
    * @property {string} hosting - --
    * @property {GUID} msid - msid
    * @property {string} page_url - page_url
    **/
    /**
     * Name: bizmgr > error page. Evid: 297.
     * Event description: error page is displayed in one of the bizmgr pages.
    
     * error_location - Type: string. Desc: specifies the location in page: header/sidebar/app/sidepanel etc. includes error type
     *
     * error_name - Type: string. Desc: null when it's a system error, permission when the error is permission related (user has no permission for the page)
     *
     * hosting - Type: string. Desc: --
     *
     * msid - Type: guid. Desc: msid
     *
     * page_url - Type: string. Desc: page_url
     * @param {dashboardErrorPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.dashboardErrorPage = function (params) {
        return this.bi.log(__assign({ evid: 297 }, params));
    };
    /**
    * @typedef {Object} suggestionsFeedbackClickOnNavigationButtonInPopupParams
    * @property {string} asset_campaign_guid - real estate in dealer
    * @property {string} asset_campaign_id - offer name
    * @property {number} asset_location_from_group_list - item location inside a group.
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} click_name - exit/send/cancel/help-center/done/refresh
    * @property {string} hosting - ADI/MA/editor/dashboard/editor/onboarding
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} tag - not null if it's in suggestion page
    **/
    /**
     * Name: Suggestions Feedback > Click on navigation button in popup. Evid: 1240.
     * Event description: click on navigation buttons in the feedback popup.
    
     * asset_campaign_guid - Type: string. Desc: real estate in dealer
     *
     * asset_campaign_id - Type: string. Desc: offer name
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside a group.
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * click_name - Type: string. Desc: exit/send/cancel/help-center/done/refresh
     *
     * hosting - Type: string. Desc: ADI/MA/editor/dashboard/editor/onboarding
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * tag - Type: string. Desc: not null if it's in suggestion page
     * @param {suggestionsFeedbackClickOnNavigationButtonInPopupParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.suggestionsFeedbackClickOnNavigationButtonInPopup = function (params) {
        return this.bi.log(__assign({ evid: 1240 }, params));
    };
    /**
    * @typedef {Object} viewInDashboardParams
    * @property {string} hosting - ma
    * @property {GUID} msid - --
    * @property {string} name - item name
    * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
    **/
    /**
     * Name: dashboard > item shown in dashboard. Evid: 1172.
     * Event description: when a specific item is shown to the user (for example the feature modal step in setup widget).
    
     * hosting - Type: string. Desc: ma
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: item name
     *
     * widget_name - Type: string. Desc: the widget name in dashboard (this field added only in new dashboard)
     * @param {viewInDashboardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.viewInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 1172 }, params));
    };
    /**
    * @typedef {Object} dealerSubItemClickParams
    * @property {string} app_id - app id of the app presented in the item
    * @property {string} asset_campaign_guid - real estate guid in dealer
    * @property {string} asset_campaign_id - offer name in dealer
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} asset_location_on_page - null/bubble
    * @property {string} click_type - item click/explore more
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    **/
    /**
     * Name: Dealer sub item click. Evid: 1799.
     * Event description: Click on dealer sub item.
    
     * app_id - Type: string. Desc: app id of the app presented in the item
     *
     * asset_campaign_guid - Type: string. Desc: real estate guid in dealer
     *
     * asset_campaign_id - Type: string. Desc: offer name in dealer
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * asset_location_on_page - Type: string. Desc: null/bubble
     *
     * click_type - Type: string. Desc: item click/explore more
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     * @param {dealerSubItemClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.dealerSubItemClick = function (params) {
        return this.bi.log(__assign({ evid: 1799 }, params));
    };
    /**
    * @typedef {Object} assetClickParams
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} asset_location_on_page - (0,1,2,3)
    * @property {string} clickType - deprecated
    * @property {string} click_type - close/ click/activate/skip
    * @property {string} group_id - id of category in setup widget
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - assets guid
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} premium_badge - the item requires upgrade
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    * @property {string} tag - the name of the tag in suggestion page - if no tag but still in suggestion page write ‘All’
    * @property {string} visibility_trigger - normal/step_completed
    **/
    /**
     * Name: Biz Manager - dashboard asset click. Evid: 591.
     * Event description: what's next asset clicked.
    
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * asset_location_on_page - Type: string. Desc: (0,1,2,3)
     *
     * clickType - Type: string. Desc: deprecated
     *
     * click_type - Type: string. Desc: close/ click/activate/skip
     *
     * group_id - Type: string. Desc: id of category in setup widget
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: assets guid
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * premium_badge - Type: string. Desc: the item requires upgrade
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     *
     * tag - Type: string. Desc: the name of the tag in suggestion page - if no tag but still in suggestion page write ‘All’
     *
     * visibility_trigger - Type: string. Desc: normal/step_completed
     * @param {assetClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.assetClick = function (params) {
        return this.bi.log(__assign({ evid: 591 }, params));
    };
    /**
    * @typedef {Object} clickInDashboardParams
    * @property {string} hosting - ma
    * @property {string} item_status_desc - deprecated
    * @property {GUID} msid - --
    * @property {string} name - the site details' item: Connect Domain, Manage Plan...
    * @property {string} place - header/footer
    * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
    **/
    /**
     * Name: dashboard > click in dashboard. Evid: 195.
     * Event description: Click on the action in dashboard widgets. (in the beginning this event was only for site details and in the new dashboard we added other clicks in different widgets.).
    
     * hosting - Type: string. Desc: ma
     *
     * item_status_desc - Type: string. Desc: deprecated
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: the site details' item: Connect Domain, Manage Plan...
     *
     * place - Type: string. Desc: header/footer
     *
     * widget_name - Type: string. Desc: the widget name in dashboard (this field added only in new dashboard)
     * @param {clickInDashboardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 195 }, params));
    };
    /**
    * @typedef {Object} suggestionFeedbackClickParams
    * @property {string} asset_campaign_guid - real estate in dealer
    * @property {string} asset_campaign_id - offer name
    * @property {number} asset_location_from_group_list - item location inside a group.
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} click_name - the name of the click (show-later/remove/3-dots...)
    * @property {string} hosting - ADI/MA/editor/dashboard/editor/onboarding
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} tag - not null if it's in suggestion page
    **/
    /**
     * Name: Suggestions Feedback > Click. Evid: 4.
     * Event description: this event is for clicking on buttons related to feedback suggestion.
    
     * asset_campaign_guid - Type: string. Desc: real estate in dealer
     *
     * asset_campaign_id - Type: string. Desc: offer name
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside a group.
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * click_name - Type: string. Desc: the name of the click (show-later/remove/3-dots...)
     *
     * hosting - Type: string. Desc: ADI/MA/editor/dashboard/editor/onboarding
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * tag - Type: string. Desc: not null if it's in suggestion page
     * @param {suggestionFeedbackClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.suggestionFeedbackClick = function (params) {
        return this.bi.log(__assign({ evid: 4 }, params));
    };
    /**
    * @typedef {Object} dealerSubItemShownParams
    * @property {string} app_id - app id of the app presented in app marekt
    * @property {string} asset_campaign_guid - real estate guid
    * @property {string} asset_campaign_id - offer name
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} asset_location_on_page - null/ bubble (top suggestions)
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} promotion_asset_type - appmarket/...
    * @property {string} visibility_trigger - normal/scrolling to view
    **/
    /**
     * Name: Dealer sub item shown. Evid: 1798.
     * Event description: When the dealer sub item is shown.
    
     * app_id - Type: string. Desc: app id of the app presented in app marekt
     *
     * asset_campaign_guid - Type: string. Desc: real estate guid
     *
     * asset_campaign_id - Type: string. Desc: offer name
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * asset_location_on_page - Type: string. Desc: null/ bubble (top suggestions)
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * promotion_asset_type - Type: string. Desc: appmarket/...
     *
     * visibility_trigger - Type: string. Desc: normal/scrolling to view
     * @param {dealerSubItemShownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.dealerSubItemShown = function (params) {
        return this.bi.log(__assign({ evid: 1798 }, params));
    };
    /**
    * @typedef {Object} suggestionsWidgetSnapshotParams
    * @property {string} asset_campaign_guid - real estate in dealer
    * @property {string} eligible_items - a list of asset campaign IDs that are eligible for suggestions  (behind the scene)
    * @property {string} hosting - ADI/Editor/MA
    * @property {string} loaded_items_top - a list of offering guid that are loaded for top suggestions (loaded to page)
    * @property {string} loaded_items_widget - a list of offering guid that are loaded for suggestions widget(loaded to page)
    * @property {GUID} msid - msid
    **/
    /**
     * Name: Suggestions widget - snapshot. Evid: 3.
     * Event description: sent each time the user enters the dashboard - home.
    This shows the state of the suggested items for the user.
    eligible - the list of all eligible items to the user
    available- all the items that were not completed
    shown- the items that are shown to the user..
    
     * asset_campaign_guid - Type: string. Desc: real estate in dealer
     *
     * eligible_items - Type: string. Desc: a list of asset campaign IDs that are eligible for suggestions  (behind the scene)
     *
     * hosting - Type: string. Desc: ADI/Editor/MA
     *
     * loaded_items_top - Type: string. Desc: a list of offering guid that are loaded for top suggestions (loaded to page)
     *
     * loaded_items_widget - Type: string. Desc: a list of offering guid that are loaded for suggestions widget(loaded to page)
     *
     * msid - Type: guid. Desc: msid
     * @param {suggestionsWidgetSnapshotParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.suggestionsWidgetSnapshot = function (params) {
        return this.bi.log(__assign({ evid: 3 }, params));
    };
    /**
    * @typedef {Object} suggestionPagePageLoadedParams
    * @property {string} hosting - dashboard/editor/onboarding
    * @property {string} items - a list of offering guid that are shown in tag
    * @property {GUID} msid - --
    * @property {string} tag - the tag the user is currently in
    * @property {string} tags_list - a list with all tags the user sees (in case there’s no tags send ‘no tags’)
    **/
    /**
     * Name: Suggestion Page > Page Loaded. Evid: 8.
     * Event description: When the Suggestion Page is loaded.
    
     * hosting - Type: string. Desc: dashboard/editor/onboarding
     *
     * items - Type: string. Desc: a list of offering guid that are shown in tag
     *
     * msid - Type: guid. Desc: --
     *
     * tag - Type: string. Desc: the tag the user is currently in
     *
     * tags_list - Type: string. Desc: a list with all tags the user sees (in case there’s no tags send ‘no tags’)
     * @param {suggestionPagePageLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.suggestionPagePageLoaded = function (params) {
        return this.bi.log(__assign({ evid: 8 }, params));
    };
    /**
    * @typedef {Object} suggestionsFeedbackFeedbackSentParams
    * @property {string} asset_campaign_guid - real estate in dealer
    * @property {string} asset_campaign_id - offer name
    * @property {number} asset_location_from_group_list - item location inside a group.
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} description - what the user sent in description
    * @property {string} feedback - which radio button the user chose  if empty then null
    * @property {string} hosting - ADI/MA/editor/dashboard/editor/onboarding
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} tag - not null if it's in suggestion page
    **/
    /**
     * Name: Suggestions Feedback > Feedback Sent. Evid: 1239.
     * Event description: when user sends a feedback.
    
     * asset_campaign_guid - Type: string. Desc: real estate in dealer
     *
     * asset_campaign_id - Type: string. Desc: offer name
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside a group.
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * description - Type: string. Desc: what the user sent in description
     *
     * feedback - Type: string. Desc: which radio button the user chose  if empty then null
     *
     * hosting - Type: string. Desc: ADI/MA/editor/dashboard/editor/onboarding
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * tag - Type: string. Desc: not null if it's in suggestion page
     * @param {suggestionsFeedbackFeedbackSentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.suggestionsFeedbackFeedbackSent = function (params) {
        return this.bi.log(__assign({ evid: 1239 }, params));
    };
    /**
    * @typedef {Object} suggestionsFeedbackFeedbackPopupShownParams
    * @property {string} asset_campaign_guid - real estate in dealer
    * @property {string} asset_campaign_id - offer name
    * @property {number} asset_location_from_group_list - item location inside a group.
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} hosting - ADI/MA/editor/dashboard/editor/onboarding
    * @property {GUID} msid - site guid
    * @property {string} offering_guid - offer guid
    * @property {string} tag - not null if it's in suggestion page
    **/
    /**
     * Name: Suggestions Feedback > Feedback Popup shown. Evid: 1241.
     * Event description: when feedback popup is shown.
    
     * asset_campaign_guid - Type: string. Desc: real estate in dealer
     *
     * asset_campaign_id - Type: string. Desc: offer name
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside a group.
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * hosting - Type: string. Desc: ADI/MA/editor/dashboard/editor/onboarding
     *
     * msid - Type: guid. Desc: site guid
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * tag - Type: string. Desc: not null if it's in suggestion page
     * @param {suggestionsFeedbackFeedbackPopupShownParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.suggestionsFeedbackFeedbackPopupShown = function (params) {
        return this.bi.log(__assign({ evid: 1241 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 5,
        endpoint: 'suggestions-widget',
    };
}
//# sourceMappingURL=index.js.map