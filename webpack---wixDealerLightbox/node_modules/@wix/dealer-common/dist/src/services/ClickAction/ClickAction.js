"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClickAction = void 0;
var tslib_1 = require("tslib");
var bi_events_1 = require("../BiLogger/bi-events");
var ParamExtractor_1 = require("../ParamExtractor");
var ClickAction = /** @class */ (function () {
    function ClickAction(bannerContext, locale, metasiteId, bannerRoot, bannerPosition, onClick, onClose, biLogger) {
        var _this = this;
        this.bannerContext = bannerContext;
        this.locale = locale;
        this.metasiteId = metasiteId;
        this.bannerRoot = bannerRoot;
        this.bannerPosition = bannerPosition;
        this.onClick = onClick;
        this.onClose = onClose;
        this.biLogger = biLogger;
        this.click = function (element, dealerOptions) {
            if (dealerOptions === void 0) { dealerOptions = {}; }
            var clickActionType = ParamExtractor_1.extractParam(element, _this.bannerContext, 'clickAction');
            var url = '';
            switch (clickActionType) {
                case "metaSiteDependent" /* metaSiteDependent */:
                    url = _this.calculateMetaSiteDependentUrl(element);
                    _this.reportBiClick(element, url);
                    _this.openLocation(element, url);
                    break;
                case "closeLightbox" /* closeLightbox */:
                    _this.handleLightboxClose(element, _this.bannerContext, clickActionType);
                    break;
                case "dynamicUrl" /* dynamicUrl */:
                    url = _this.calculateDynamicUrl(element, dealerOptions);
                    _this.reportBiClick(element, url);
                    _this.openLocation(element, url);
                    break;
                case "openChat" /* openChat */:
                    var _a = _this.getChatParams(element), tenantName = _a.tenantName, widgetId = _a.widgetId;
                    _this.loadChatScript(element, tenantName, widgetId);
                    break;
                case "externalClickAction" /* externalClickAction */:
                    _this.reportBiClick(element);
                    break;
                default:
            }
        };
        this.beforeUnloadListener = function (e) {
            e.preventDefault();
            e.returnValue = '';
        };
        this.loadChatScript = function (element, tenantName, widgetId) {
            var aws = document.createElement('script');
            aws.type = 'text/javascript';
            aws.async = true;
            aws.src = "https://" + tenantName + ".wixanswers.com/apps/widget/v1/" + tenantName + "/" + widgetId + "/" + (_this
                .locale || 'en') + "/embed.js";
            aws.onload = function () {
                return window.AnswersWidget.onLoad(function () { return _this.configureChat(element); });
            };
            aws.onerror = function () {
                return _this.handleLightboxClose(element, _this.bannerContext, 'openChat');
            };
            var firstScriptTag = document.getElementsByTagName('script')[0];
            firstScriptTag.parentNode.insertBefore(aws, firstScriptTag);
        };
        this.configureChat = function (element) {
            if (window.AnswersWidget) {
                var userEmail = _this.bannerContext.dynamicParams.userEmail;
                window.AnswersWidget.clearChats(true);
                window.AnswersWidget.identifyUser({ email: userEmail });
                window.AnswersWidget.onChatStarted(function () {
                    return window.addEventListener('beforeunload', _this.beforeUnloadListener, true);
                });
                window.AnswersWidget.onWidgetClosed(function () {
                    return window.removeEventListener('beforeunload', _this.beforeUnloadListener, true);
                });
                window.AnswersWidget.setCustomFields({
                    'proactive-chat': 'subscription churn',
                });
                window.AnswersWidget.open();
                window.AnswersWidget.beginChatWithForm();
                _this.handleLightboxClose(element, _this.bannerContext, 'openChat');
            }
        };
        this.openLocation = function (element, url) {
            /* tslint:disable:no-non-null-assertion */
            if (element && element.en.clickActionParams.isOpenInNewTab) {
                window.open(url);
            }
            else {
                window.location.assign(url);
            }
        };
    }
    ClickAction.prototype.reportBiClick = function (element, url) {
        if (url === void 0) { url = ''; }
        var eventParams = {
            additionalLogParams: {
                targetUrl: url,
                clickType: ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'abTest'),
            },
        };
        this.biLogger.log(bi_events_1.CLICK_EVENT, false, {
            clickType: ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'abTest'),
            targetUrl: url,
        }, this.locale, this.metasiteId, this.bannerRoot, this.bannerPosition);
        this.onClick && this.onClick(eventParams);
    };
    ClickAction.prototype.getChatParams = function (element) {
        var tenantName = ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'tenantName');
        var widgetId = ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'widgetId');
        return { tenantName: tenantName, widgetId: widgetId };
    };
    ClickAction.prototype.calculateDynamicUrl = function (element, dealerOptions) {
        var url = ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'defaultUrl');
        var interpolationOptions = tslib_1.__assign(tslib_1.__assign(tslib_1.__assign({ metasiteGuid: this.metasiteId, metaSiteId: this.metasiteId }, dealerOptions), (this.bannerContext.dynamicParams || {})), { referralAdditionalInfo: this.bannerPosition, refferalInfo: this.bannerPosition });
        return this.interpolate(url, interpolationOptions);
    };
    ClickAction.prototype.interpolate = function (url, dealerOptions) {
        return url.replace(/\{\{(.*?)\}\}/g, function () {
            var regexGroups = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                regexGroups[_i] = arguments[_i];
            }
            return dealerOptions[regexGroups[1]] || '';
        });
    };
    ClickAction.prototype.calculateMetaSiteDependentUrl = function (element) {
        var metaSiteUrl = ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'metaSiteUrl');
        var defaultUrl = ParamExtractor_1.extractParam(element, this.bannerContext, 'clickActionParams', 'defaultUrl');
        var url = this.metasiteId !== '' && metaSiteUrl ? metaSiteUrl : defaultUrl;
        if (ParamExtractor_1.extractParam(element, this.bannerContext, 'clickable')) {
            url = url.replace('###REFFERAL-INFO###', this.bannerPosition);
            url = url.replace('###METASITE###', this.metasiteId);
        }
        return url;
    };
    ClickAction.prototype.handleLightboxClose = function (element, context, biClickType) {
        var elementClickType = element && ParamExtractor_1.extractParam(element, context, 'clickActionParams', 'abTest');
        var clickType = elementClickType || biClickType;
        this.onClose(clickType);
    };
    return ClickAction;
}());
exports.ClickAction = ClickAction;
//# sourceMappingURL=ClickAction.js.map