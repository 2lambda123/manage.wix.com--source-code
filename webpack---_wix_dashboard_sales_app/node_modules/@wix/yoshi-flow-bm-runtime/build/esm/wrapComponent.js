var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
import React, { useMemo, useState } from 'react';
import { configModule, getCurrentInstance, registerToInstanceChanges, } from '@wix/business-manager-api';
import { WixStyleReactEnvironmentProvider } from 'wix-style-react';
import ModuleProvider from './hooks/ModuleProvider';
import { EnvironmentProvider } from './environment';
import { BusinessManagerAPIProvider } from './hooks/useBusinessManagerAPI';
import ComponentInfoProvider from './hooks/ComponentInfoProvider';
import ModuleInfoProvider from './hooks/ModuleInfoProvider';
export var wrapComponent = function (Component, moduleModel, reactProviders, messagesMap) {
    var I18nextProvider = reactProviders.I18nextProvider, HttpProvider = reactProviders.HttpProvider, SentryProvider = reactProviders.SentryProvider, ErrorMonitorProvider = reactProviders.ErrorMonitorProvider, FedopsProvider = reactProviders.FedopsProvider, BILoggerProvider = reactProviders.BILoggerProvider, PureExperimentsProvider = reactProviders.PureExperimentsProvider;
    return function (props) {
        var _a, _b;
        var routeBaseName = props.routeBaseName, router = props.router, metaSiteId = props.metaSiteId, children = props.children, config = props.config, accountLanguage = props.accountLanguage, brand = props.brand, coBranding = props.coBranding, debug = props.debug, instance = props.instance, instanceId = props.instanceId, liveSite = props.liveSite, locale = props.locale, primarySiteLocale = props.primarySiteLocale, siteName = props.siteName, userId = props.userId, userPermissions = props.userPermissions, userRole = props.userRole, viewMode = props.viewMode, flowAPI = props._componentFlowAPI, _environment = props._environment, restProps = __rest(props, ["routeBaseName", "router", "metaSiteId", "children", "config", "accountLanguage", "brand", "coBranding", "debug", "instance", "instanceId", "liveSite", "locale", "primarySiteLocale", "siteName", "userId", "userPermissions", "userRole", "viewMode", "_componentFlowAPI", "_environment"]);
        var _c = __read(useState(function () { return ({
            getCurrentInstance: getCurrentInstance,
            registerToInstanceChanges: registerToInstanceChanges,
            configModule: configModule,
        }); }), 1), businessManagerAPI = _c[0];
        useState(function () {
            var _translations = flowAPI._translations;
            if (_translations) {
                if (messagesMap) {
                    // update messages directly to the cache
                    _translations.addLocaleMessages(messagesMap);
                    // reload i18n in HMR
                    if (process.env.NODE_ENV === 'development' &&
                        _translations.i18n.isInitialized) {
                        _translations.i18n.reloadResources().then(function () {
                            // https://github.com/wix-private/fed-infra/pull/2538
                            _translations.i18n.emit('reloadResources');
                        });
                    }
                }
                _translations.init();
            }
        });
        useState(function () {
            var _a;
            if (PureExperimentsProvider != null) {
                var experiments_1 = flowAPI.experiments;
                var _b = (_a = moduleModel.config.experiments) !== null && _a !== void 0 ? _a : {}, scopes = _b.scopes, centralized = _b.centralized;
                if (scopes && !centralized) {
                    scopes.forEach(function (scope) { return experiments_1.load(scope); });
                }
            }
        });
        var moduleParams = useMemo(function () { return ({
            routeBaseName: routeBaseName,
            router: router,
            metaSiteId: metaSiteId,
            config: config,
            accountLanguage: accountLanguage,
            brand: brand,
            coBranding: coBranding,
            debug: debug,
            instance: instance,
            instanceId: instanceId,
            liveSite: liveSite,
            locale: locale,
            primarySiteLocale: primarySiteLocale,
            siteName: siteName,
            userId: userId,
            userPermissions: userPermissions,
            userRole: userRole,
            viewMode: viewMode,
        }); }, [
            routeBaseName,
            router,
            metaSiteId,
            config,
            accountLanguage,
            brand,
            coBranding,
            debug,
            instance,
            instanceId,
            liveSite,
            locale,
            primarySiteLocale,
            siteName,
            userId,
            userPermissions,
            userRole,
            viewMode,
        ]);
        var provider = (React.createElement(Component, __assign({}, restProps), children));
        if (HttpProvider != null) {
            provider = (React.createElement(HttpProvider, { client: flowAPI.httpClient }, provider));
        }
        if (ErrorMonitorProvider != null && flowAPI.errorMonitor != null) {
            provider = (React.createElement(ErrorMonitorProvider, { errorMonitor: flowAPI.errorMonitor }, provider));
        }
        else {
            if (SentryProvider != null && flowAPI._sentry != null) {
                provider = (React.createElement(SentryProvider, { value: flowAPI._sentry }, provider));
            }
        }
        if (I18nextProvider != null) {
            provider = (React.createElement(I18nextProvider, { i18n: flowAPI.i18n }, provider));
        }
        if (FedopsProvider != null) {
            provider = (React.createElement(FedopsProvider, { value: flowAPI.fedopsLogger }, provider));
        }
        if ((((_a = moduleModel.config.experiments) === null || _a === void 0 ? void 0 : _a.scopes) != null || ((_b = moduleModel.config.experiments) === null || _b === void 0 ? void 0 : _b.centralized)) &&
            PureExperimentsProvider != null) {
            provider = (React.createElement(PureExperimentsProvider, { experiments: flowAPI.experiments }, provider));
        }
        if (BILoggerProvider != null) {
            provider = (React.createElement(BILoggerProvider, { logger: flowAPI.biLogger }, provider));
        }
        if (_environment) {
            provider = (React.createElement(EnvironmentProvider, { environment: _environment }, provider));
        }
        else {
            provider = (React.createElement(ModuleProvider, { moduleParams: moduleParams }, provider));
        }
        return (React.createElement(BusinessManagerAPIProvider, { value: businessManagerAPI },
            React.createElement(ModuleInfoProvider, { moduleInfo: flowAPI.moduleInfo },
                React.createElement(ComponentInfoProvider, { componentInfo: flowAPI.componentInfo },
                    React.createElement(WixStyleReactEnvironmentProvider, { locale: accountLanguage }, provider)))));
    };
};
//# sourceMappingURL=wrapComponent.js.map