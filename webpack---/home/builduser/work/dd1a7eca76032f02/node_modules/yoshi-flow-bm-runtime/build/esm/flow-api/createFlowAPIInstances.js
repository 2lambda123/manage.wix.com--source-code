import { once } from 'lodash';
export function createFlowAPIInstances({ bmModule, module, optionalDeps, useEssentials, }) {
    var _a;
    const { moduleParams: { accountLanguage: locale = 'en' }, } = bmModule;
    const { config: { translations }, } = module;
    return {
        i18nOrGet: useEssentials && (translations === null || translations === void 0 ? void 0 : translations.enabled)
            ? bmModule._essentials.createI18n({
                asyncMessagesLoader: optionalDeps.asyncMessagesLoader,
                useSuspense: (_a = translations === null || translations === void 0 ? void 0 : translations.suspense) !== null && _a !== void 0 ? _a : true,
                disableAutoInit: true,
            })
            : once(async () => {
                var _a;
                const { initI18n, asyncMessagesLoader, } = await optionalDeps.loadOptionalFlowAPIDeps();
                return initI18n === null || initI18n === void 0 ? void 0 : initI18n({
                    locale,
                    asyncMessagesLoader,
                    useSuspense: (_a = translations === null || translations === void 0 ? void 0 : translations.suspense) !== null && _a !== void 0 ? _a : true,
                    disableAutoInit: true,
                });
            }),
        biLoggerOrGet: useEssentials && optionalDeps.createBILogger
            ? optionalDeps.createBILogger({
                biLoggerFactory: bmModule._essentials.biLoggerFactory,
            })
            : once(async () => {
                const { createBILogger, } = await optionalDeps.loadOptionalFlowAPIDeps();
                return createBILogger === null || createBILogger === void 0 ? void 0 : createBILogger({
                    biLoggerFactory: useEssentials
                        ? bmModule._essentials.biLoggerFactory
                        : undefined,
                });
            }),
        experimentsOrGet: useEssentials && module.config.experiments != null
            ? bmModule._essentials.createExperiments({ scopes: [] })
            : once(async () => {
                const { Experiments, } = await optionalDeps.loadOptionalFlowAPIDeps();
                return Experiments ? new Experiments() : undefined;
            }),
    };
}
//# sourceMappingURL=createFlowAPIInstances.js.map