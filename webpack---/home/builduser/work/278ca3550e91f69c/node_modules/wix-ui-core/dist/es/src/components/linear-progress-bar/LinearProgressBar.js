import { __assign } from "tslib";
import * as React from 'react';
import { st, classes } from './LinearProgressBar.st.css';
import { ProgressBarDataHooks, ProgressBarDataKeys, ProgressBarAriaKeys, } from './DataHooks';
import { filterDataProps } from '../../utils/filter-data-props';
var FULL_PROGRESS = 100;
var NO_PROGRESS = 0;
var resolveIndicationElement = function (props) {
    var wrapped = function (dataHook, children) { return (React.createElement("div", { "data-hook": dataHook, className: classes.indicationContainer }, children)); };
    if (props.error && props.errorIcon) {
        return wrapped(ProgressBarDataHooks.errorIcon, props.errorIcon);
    }
    if (props.value === FULL_PROGRESS && props.successIcon) {
        return wrapped(ProgressBarDataHooks.successIcon, props.successIcon);
    }
    return wrapped(ProgressBarDataHooks.progressPercentage, React.createElement("span", { className: classes.progressPercentage }, props.value + "%"));
};
var renderBarSection = function (value) {
    var progressWidth = { width: value + "%" };
    return (React.createElement("div", { "data-hook": ProgressBarDataHooks.container, className: classes.barContainer },
        React.createElement("div", { "data-hook": ProgressBarDataHooks.background, className: classes.barBackground }),
        React.createElement("div", { "data-hook": ProgressBarDataHooks.foreground, style: progressWidth, className: classes.barForeground })));
};
var getRelativeValue = function (props) {
    var value = props.value, min = props.min, max = props.max, precision = props.precision;
    var relativeValue = ((+value - min) / (max - min)) * 100;
    return precision
        ? +relativeValue.toFixed(precision)
        : parseInt(relativeValue, 10);
};
var normalizeProps = function (props) {
    if (props.value >= props.max) {
        return __assign(__assign({}, props), { value: FULL_PROGRESS });
    }
    if (props.value < props.min ||
        [undefined, null, ''].includes(props.value)) {
        return __assign(__assign({}, props), { value: NO_PROGRESS });
    }
    return __assign(__assign({}, props), { value: getRelativeValue(props) });
};
var getDataAttributes = function (props) {
    var _a;
    return _a = {},
        _a[ProgressBarDataKeys.value] = props.value,
        _a[ProgressBarDataKeys.min] = props.min,
        _a[ProgressBarDataKeys.max] = props.max,
        _a;
};
var getAriaAttributes = function (props) {
    var _a;
    return _a = {},
        _a[ProgressBarAriaKeys.valuenow] = +props.value || NO_PROGRESS,
        _a[ProgressBarAriaKeys.valuemin] = +props.min,
        _a[ProgressBarAriaKeys.valuemax] = +props.max,
        _a[ProgressBarAriaKeys.valuetext] = props[ProgressBarAriaKeys.valuetext],
        _a;
};
export var LinearProgressBar = function (props) {
    var error = props.error, showProgressIndication = props.showProgressIndication, className = props.className;
    var _props = normalizeProps(props);
    var success = _props.value === FULL_PROGRESS;
    return (React.createElement("div", __assign({}, getDataAttributes(_props), getAriaAttributes(props), { "data-min": _props.min, "data-error": error, role: "progressbar", className: st(classes.root, { error: error, success: success }, className) }, filterDataProps(props)),
        renderBarSection(_props.value),
        showProgressIndication && (React.createElement("div", { "data-hook": ProgressBarDataHooks.progressIndicator, className: classes.progressIndicationSection }, resolveIndicationElement(_props)))));
};
LinearProgressBar.displayName = 'LinearProgressBar';
LinearProgressBar.defaultProps = {
    min: NO_PROGRESS,
    max: FULL_PROGRESS,
};
//# sourceMappingURL=LinearProgressBar.js.map