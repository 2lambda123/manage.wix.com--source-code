import { __assign } from "tslib";
import * as React from 'react';
import { st, classes } from './CircularProgressBar.st.css';
import { Arc } from './Arc';
import { dataHooks } from './constants';
import { filterDataProps } from '../../utils/filter-data-props';
var FULL_PROGRESS = 100;
var NO_PROGRESS = 0;
var VIEWBOX_SIZE = 54;
var resolveIndicationElement = function (props) {
    var wrapped = function (dataHook, children) { return (React.createElement("div", { "data-hook": dataHook, className: classes.statusIndicator }, children)); };
    if (props.error && props.errorIcon) {
        return wrapped(dataHooks.errorIcon, props.errorIcon);
    }
    if (props.value === FULL_PROGRESS && props.successIcon) {
        return wrapped(dataHooks.successIcon, props.successIcon);
    }
};
var normalizeValue = function (value) {
    return typeof value === 'number'
        ? value
        : parseInt(value, 10)
            ? parseInt(value, 10)
            : NO_PROGRESS;
};
var normalizeSize = function (size) {
    var intSize = typeof size === 'number' ? size : parseInt(size, 10);
    return intSize && intSize > 0 ? intSize : VIEWBOX_SIZE;
};
var renderArcs = function (props) {
    var value = props.value, size = props.size;
    var normalizedSize = normalizeSize(size);
    var normalizedValue = normalizeValue(value);
    return (React.createElement("div", { className: classes.arcsContainer, style: { width: normalizedSize + "px", height: normalizedSize + "px" } },
        resolveIndicationElement(props),
        React.createElement(Arc, { "data-hook": dataHooks.progressArcBackground, value: FULL_PROGRESS, className: classes.backArc, strokeWidth: 4, size: normalizedSize }),
        React.createElement(Arc, { "data-hook": dataHooks.progressArcForeground, value: normalizedValue, className: classes.foreArc, strokeWidth: 4, size: normalizedSize })));
};
var normalizeProps = function (props) {
    var value = normalizeValue(props.value);
    if (value >= FULL_PROGRESS) {
        return __assign(__assign({}, props), { value: FULL_PROGRESS });
    }
    if (value < NO_PROGRESS) {
        return __assign(__assign({}, props), { value: NO_PROGRESS });
    }
    return __assign(__assign({}, props), { value: value });
};
export var CircularProgressBar = function (props) {
    var label = props.label, error = props.error, showProgressIndication = props.showProgressIndication;
    var _props = normalizeProps(props);
    var success = _props.value === FULL_PROGRESS;
    var value = error && _props.errorLabel
        ? _props.errorLabel
        : Math.floor(_props.value) + "%";
    var shouldShowProgressIndication = showProgressIndication && !label;
    return (React.createElement("div", __assign({ className: st(classes.root, { error: error, success: success }, _props.className), "data-error": error }, filterDataProps(props)),
        renderArcs(_props),
        label && (React.createElement("div", { "data-hook": dataHooks.label, className: classes.label }, label)),
        shouldShowProgressIndication && (React.createElement("div", { "data-hook": dataHooks.progressIndicator, className: classes.progressIndicator }, value))));
};
CircularProgressBar.displayName = 'CircularProgressBar';
CircularProgressBar.defaultProps = {
    value: NO_PROGRESS,
    size: VIEWBOX_SIZE,
};
//# sourceMappingURL=CircularProgressBar.js.map