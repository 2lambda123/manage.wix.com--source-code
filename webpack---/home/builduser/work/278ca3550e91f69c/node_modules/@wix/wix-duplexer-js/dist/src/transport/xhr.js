"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var request_1 = require("../utils/request");
var cancel_token_1 = require("../utils/cancel-token");
var utils_1 = require("../utils/utils");
var transport_1 = require("./transport");
var ready_state_1 = require("../ready-state");
var transport_error_1 = require("./transport-error");
var Xhr = /** @class */ (function (_super) {
    __extends(Xhr, _super);
    function Xhr(baseUrl) {
        var _this = _super.call(this, { keepAlive: false }) || this;
        _this.baseUrl = baseUrl;
        _this.commandsCancelTokens = [];
        _this.baseUrl = utils_1.omitEndingSlashIfExists(_this.baseUrl);
        return _this;
    }
    Object.defineProperty(Xhr.prototype, "name", {
        get: function () {
            return 'http_long_polling';
        },
        enumerable: true,
        configurable: true
    });
    Xhr.prototype.doOpen = function () {
        this.poll();
    };
    Xhr.prototype.doClose = function () {
        this.commandsCancelTokens.forEach(function (c) { return c.cancel(); });
        this.abortOngoingPollInterval();
    };
    Xhr.prototype.write = function (packet, _a) {
        var _b = (_a === void 0 ? {} : _a).affectState, affectState = _b === void 0 ? true : _b;
        return __awaiter(this, void 0, void 0, function () {
            var url, cancelToken, data, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        url = this.buildUrl('xhr-command');
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        cancelToken = cancel_token_1.createCancelTokenSource();
                        this.commandsCancelTokens.push(cancelToken);
                        return [4 /*yield*/, request_1.post(url, packet, {
                                cancelToken: cancelToken.token,
                            })];
                    case 2:
                        data = (_d.sent()).data;
                        this.removeCancelToken(cancelToken);
                        this.onData(data);
                        if (affectState) {
                            this.startPollInterval();
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        _c = _d.sent();
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Xhr.prototype.abortOngoingPollInterval = function () {
        this.pollCancelToken && this.pollCancelToken.cancel();
    };
    Xhr.prototype.startPollInterval = function () {
        return __awaiter(this, void 0, void 0, function () {
            var continuable;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.abortOngoingPollInterval();
                        if (!(this.readyState === ready_state_1.default.OPEN)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.poll()];
                    case 1:
                        continuable = (_a.sent()).continuable;
                        if (continuable) {
                            this.startPollInterval();
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    Xhr.prototype.poll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var url, pollReq, res, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.pollCancelToken = cancel_token_1.createCancelTokenSource();
                        url = this.buildUrl('xhr');
                        pollReq = request_1.post(url, this.payload, {
                            cancelToken: this.pollCancelToken.token,
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, withSafeFailure(pollReq)];
                    case 2:
                        res = _a.sent();
                        if (res.data)
                            this.onData(res.data);
                        return [2 /*return*/, res];
                    case 3:
                        e_1 = _a.sent();
                        this.closeOnTransportFailure(e_1);
                        return [2 /*return*/, { continuable: false }];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Xhr.prototype.buildUrl = function (url) {
        if (this.sessionId) {
            url += "?sessionId=" + this.sessionId;
        }
        return this.baseUrl + "/" + url;
    };
    Xhr.prototype.closeOnTransportFailure = function (e) {
        var status = extractStatus(e);
        var err = transport_error_1.anHttpLongPollingError(status, e.message);
        this.close(err);
    };
    Xhr.prototype.removeCancelToken = function (cancelToken) {
        var idx = this.commandsCancelTokens.indexOf(cancelToken);
        this.commandsCancelTokens.splice(idx, 1);
    };
    return Xhr;
}(transport_1.default));
exports.default = Xhr;
function withSafeFailure(req) {
    return __awaiter(this, void 0, void 0, function () {
        var data, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, req];
                case 1:
                    data = (_a.sent()).data;
                    return [2 /*return*/, { continuable: true, data: data || undefined }];
                case 2:
                    e_2 = _a.sent();
                    if (request_1.isCancel(e_2)) {
                        return [2 /*return*/, { continuable: false }];
                    }
                    if (isGatewayTimeout(e_2)) {
                        // This way we support gateways/proxies with a lower timeout than our sockets server.
                        // If we don't do this, we'll create a different session on every poll.
                        // In the future we can detect such cases and fallback to polling transport.
                        return [2 /*return*/, { continuable: true }];
                    }
                    throw e_2;
                case 3: return [2 /*return*/];
            }
        });
    });
}
function isGatewayTimeout(e) {
    return extractStatus(e) === 504;
}
function extractStatus(e) {
    return (e.response && e.response.status) || -1;
}
//# sourceMappingURL=xhr.js.map