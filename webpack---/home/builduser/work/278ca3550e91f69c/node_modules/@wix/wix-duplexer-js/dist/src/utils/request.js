"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var deferred_1 = require("./deferred");
function isCancel(error) {
    return error.isCancel === true;
}
exports.isCancel = isCancel;
function post(url, payload, config) {
    if (config === void 0) { config = {}; }
    var deferred = new deferred_1.default();
    var headers = config.headers || {};
    var request = new XMLHttpRequest();
    request.open('POST', url, true);
    request.onreadystatechange = function () {
        if (request.readyState !== 4) {
            return;
        }
        // request errored out, will be handled by onerror handler
        if (request.status === 0) {
            return;
        }
        var response = {
            data: maybeJSON(request.responseText),
            status: request.status,
        };
        settle(deferred, request, response);
    };
    request.onerror = function () { return deferred.reject(new Error('Network Error')); };
    if (payload !== undefined) {
        request.setRequestHeader('Content-Type', 'application/json;charset=utf-8');
    }
    if (config.onDownloadProgress !== undefined) {
        request.onprogress = function () { return config.onDownloadProgress(); };
    }
    var xsrf = readCookie('XSRF-TOKEN');
    if (xsrf !== undefined) {
        headers['X-XSRF-TOKEN'] = xsrf;
    }
    Object.keys(headers).forEach(function (key) {
        var value = headers[key];
        request.setRequestHeader(key, value);
    });
    if (config.withCredentials) {
        request.withCredentials = true;
    }
    if (config.cancelToken !== undefined) {
        config.cancelToken.promise.then(function () {
            request.abort();
            deferred.reject(createCancelError());
        });
    }
    if (payload === undefined) {
        payload = null; // IE tends to send "undefined" as string
    }
    else {
        payload = JSON.stringify(payload);
    }
    request.send(payload);
    return deferred.promise;
}
exports.post = post;
function readCookie(name) {
    var match = typeof window !== 'undefined' &&
        window.document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
    return match ? decodeURIComponent(match[3]) : undefined;
}
function settle(deferred, request, response) {
    if (verifyStatus(request)) {
        deferred.resolve(response);
    }
    else {
        var error = createError(request, response);
        deferred.reject(error);
    }
}
function verifyStatus(request) {
    var status = request.status;
    return status >= 200 && status < 300;
}
function createError(request, response) {
    var error = new Error("Request failed with status code " + request.status);
    error.response = response;
    return error;
}
function createCancelError() {
    var error = new Error('Request canceled');
    error.isCancel = true;
    return error;
}
function maybeJSON(data) {
    try {
        return JSON.parse(data);
    }
    catch (_a) {
        return data;
    }
}
//# sourceMappingURL=request.js.map