"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = require("./transport");
var transport_error_1 = require("./transport-error");
var idleConnectionExitCode = 3000;
var WS = /** @class */ (function (_super) {
    __extends(WS, _super);
    function WS(url) {
        var _this = _super.call(this, { keepAlive: true }) || this;
        _this.url = url;
        return _this;
    }
    WS.isSupported = function () {
        return typeof WebSocket !== 'undefined';
    };
    Object.defineProperty(WS.prototype, "name", {
        get: function () {
            return 'websocket';
        },
        enumerable: true,
        configurable: true
    });
    WS.prototype.doOpen = function () {
        if (this.ws) {
            this.ws.onmessage = function () { };
            this.ws.onclose = function () { };
            this.doClose();
        }
        this.ws = new WebSocket(this.url);
        this.listen();
    };
    WS.prototype.doClose = function () {
        this.ws.close(1000);
    };
    WS.prototype.write = function (packet) {
        var normalized = JSON.stringify(packet);
        this.ws.send(normalized);
    };
    WS.prototype.listen = function () {
        var _this = this;
        this.ws.onclose = function (event) {
            // when close is being initiated from client, we shouldn't call this.onClose()
            // the status check is a workaround - should check how we terminate with wasClean=false
            // in sockets server
            if (!event.wasClean || event.code === idleConnectionExitCode) {
                var error = transport_error_1.aWebSocketError(event.code, event.reason);
                _this.onClose(error);
            }
        };
        this.ws.onmessage = function (ev) {
            var normalized = JSON.parse(ev.data);
            _this.onData(normalized);
        };
        this.ws.onerror = function () { };
    };
    return WS;
}(transport_1.default));
exports.default = WS;
//# sourceMappingURL=websocket.js.map