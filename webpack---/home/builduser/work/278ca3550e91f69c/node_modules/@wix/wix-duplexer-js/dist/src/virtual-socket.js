"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Emitter = require("component-emitter");
var wix_duplexer_protocol_1 = require("wix-duplexer-protocol");
var ready_state_1 = require("./ready-state");
var channels_1 = require("./channels/channels");
var on_1 = require("./utils/on");
var VirtualSocket = /** @class */ (function (_super) {
    __extends(VirtualSocket, _super);
    function VirtualSocket(duplexer, opts) {
        var _this = _super.call(this) || this;
        _this.duplexer = duplexer;
        _this.ids = 1;
        _this.connected = false;
        _this.sendBuffer = [];
        _this.acks = {};
        _this.socketListeners = [];
        _this.sessionId = '';
        _this.channels = new channels_1.default(_this);
        _this.ns = opts.apiKey;
        _this.config = {
            auth: opts.auth,
        };
        _this.open();
        return _this;
    }
    VirtualSocket.prototype.subscribe = function (channelName, opts) {
        if (opts === void 0) { opts = {}; }
        var channel = this.channels.add(channelName, opts);
        channel.subscribe(opts);
        return channel;
    };
    VirtualSocket.prototype.unsubscribe = function (channelName) {
        var channel = this.channels.remove(channelName);
        channel.unsubscribe();
        return channel;
    };
    /* internal usages only */
    VirtualSocket.prototype.open = function () {
        var _this = this;
        var readyState = this.duplexer.connection.readyState;
        this.listen();
        if (readyState === ready_state_1.default.CLOSED) {
            this.duplexer.connection.connect();
        }
        else if (readyState === ready_state_1.default.OPEN) {
            setTimeout(function () { return _this.onConnect(); }, 0);
        }
    };
    VirtualSocket.prototype.disconnect = function () {
        this.send({ type: 'disconnect' });
        this.cleanup();
        this.duplexer.closeVirtualSocket(this);
        this.onClose();
    };
    /* internal usages only */
    VirtualSocket.prototype.send = function (message, opts) {
        var _this = this;
        return new Promise(function (resolve) {
            if (_this.connected) {
                var id = _this.issueAckId();
                _this.acks[id] = resolve;
                message.id = id;
                _this.packet(message, opts);
            }
            else {
                _this.sendBuffer.push({ message: message, resolve: resolve });
            }
        });
    };
    /* internal usages only */
    VirtualSocket.prototype.whenConnected = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.duplexer.connection.readyState === ready_state_1.default.OPEN
                ? resolve()
                : _this.once('@duplexer:connected', resolve);
        });
    };
    VirtualSocket.prototype.listen = function () {
        this.socketListeners = [
            on_1.default(this.duplexer, 'open', this.onConnect.bind(this)),
            on_1.default(this.duplexer, 'packet', this.onPacket.bind(this)),
            on_1.default(this.duplexer, 'close', this.onClose.bind(this)),
            on_1.default(this.duplexer.connection, 'connect_error', this.onConnectError.bind(this)),
        ];
    };
    VirtualSocket.prototype.onConnectError = function (error) {
        this.emit('@duplexer:connect_error', error);
    };
    VirtualSocket.prototype.onClose = function (error) {
        this.connected = false;
        this.emit('@duplexer:disconnected', error);
    };
    VirtualSocket.prototype.onPacket = function (packet) {
        if (packet.ns !== this.ns) {
            return;
        }
        switch (packet.type) {
            case 'ack':
                this.onAck(packet);
                break;
            case 'message':
                this.onMessage(packet);
                break;
            default:
                break;
        }
    };
    VirtualSocket.prototype.onConnect = function () {
        this.sessionId = this.duplexer.connection.sessionId;
        this.channels.forceSubscribeAll();
        this.connected = true;
        this.emit('@duplexer:connected');
        this.emitBuffered();
    };
    VirtualSocket.prototype.onMessage = function (message) {
        var channel = this.channels.find(message.channel);
        if (channel !== undefined) {
            var restore = channel.setMessageIdRestore(message.id);
            var override = new wix_duplexer_protocol_1.PollOverrideRestoreStrategyBuilder()
                .withNs(this.ns)
                .withChannelName(channel.name)
                .withRestoreStrategy(restore)
                .build();
            this.duplexer.addRestoreOverride(override);
            channel.emit(message.event, message.payload, createAttachments(message));
        }
    };
    VirtualSocket.prototype.onAck = function (packet) {
        var ack = this.acks[packet.id];
        if (typeof ack === 'function') {
            ack(packet);
            delete this.acks[packet.id];
        }
    };
    VirtualSocket.prototype.packet = function (packet, opts) {
        packet.ns = this.ns;
        this.duplexer.packet(packet, opts);
    };
    VirtualSocket.prototype.emitBuffered = function () {
        var _this = this;
        this.sendBuffer.forEach(function (msg) {
            var message = msg.message, resolve = msg.resolve;
            _this.send(message).then(resolve);
        });
        this.sendBuffer = [];
    };
    VirtualSocket.prototype.issueAckId = function () {
        var id = this.ids++;
        return id.toString();
    };
    VirtualSocket.prototype.cleanup = function () {
        this.socketListeners.forEach(function (l) { return l.destroy(); });
    };
    return VirtualSocket;
}(Emitter));
exports.default = VirtualSocket;
function createAttachments(message) {
    return {
        user: message.user,
    };
}
//# sourceMappingURL=virtual-socket.js.map