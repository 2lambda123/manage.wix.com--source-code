"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Emitter = require("component-emitter");
var ready_state_1 = require("../ready-state");
/**
 * Transport responsibilities:
 * - Encode/decode packets and pass through
 * - Mark connection as open by waiting for connection_established packet, dealing with session id
 * - Close connection
 * - Connection errors
 * - Todo: handling packets queue (move from virtual socket)
 */
var Transport = /** @class */ (function (_super) {
    __extends(Transport, _super);
    function Transport(opts) {
        var _this = _super.call(this) || this;
        _this.readyState = ready_state_1.default.CLOSED;
        _this.keepAlive = opts.keepAlive;
        return _this;
    }
    Object.defineProperty(Transport.prototype, "keepAliveEnabled", {
        get: function () {
            return this.keepAlive;
        },
        enumerable: true,
        configurable: true
    });
    Transport.prototype.open = function () {
        this.doOpen();
    };
    Transport.prototype.close = function (error) {
        this.doClose();
        this.onClose(error);
    };
    Transport.prototype.send = function (packet, opts) {
        this.write(packet, opts);
    };
    Transport.prototype.updatePayload = function (params) {
        this.payload = params;
    };
    Transport.prototype.onData = function (packet) {
        var _this = this;
        if (!Array.isArray(packet)) {
            this.handlePacket(packet);
        }
        else {
            packet.forEach(function (packet) { return _this.handlePacket(packet); });
        }
    };
    Transport.prototype.onClose = function (error) {
        this.sessionId = '';
        this.readyState = ready_state_1.default.CLOSED;
        this.emit('close', error);
    };
    Transport.prototype.handlePacket = function (packet) {
        switch (packet.type) {
            case 'connection_established':
                this.sessionId = packet.sessionId;
                this.readyState = ready_state_1.default.OPEN;
                this.emit('open', packet);
                break;
            default:
                this.emit('packet', packet);
        }
    };
    return Transport;
}(Emitter));
exports.default = Transport;
//# sourceMappingURL=transport.js.map