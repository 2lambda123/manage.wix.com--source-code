"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Emitter = require("component-emitter");
var Backoff = require("backo2");
var wix_duplexer_protocol_1 = require("wix-duplexer-protocol");
var authenticator_1 = require("../authenticator");
var cancel_token_1 = require("../utils/cancel-token");
var Channel = /** @class */ (function (_super) {
    __extends(Channel, _super);
    function Channel(virtualSocket, name, opts) {
        var _this = _super.call(this) || this;
        _this.subscribingState = 0 /* NOT_IN_PROGRESS */;
        _this.name = name;
        _this.virtualSocket = virtualSocket;
        _this.authenticator = _this.virtualSocket.config.auth
            ? new authenticator_1.default(_this.virtualSocket.config.auth)
            : null;
        _this.forceTokenRequest = opts.forceTokenRequest || false;
        if (_this.isAuthRequired() && _this.authenticator === null) {
            throw new Error('auth config has not passed, cannot use channels that require authorization');
        }
        return _this;
    }
    Channel.prototype.setMessageIdRestore = function (messageId) {
        this.restore = wix_duplexer_protocol_1.RestoreStrategyBuilderFactory.messageId()
            .withId(messageId)
            .build();
        return this.restore;
    };
    Channel.prototype.forceSubscribe = function () {
        this.abort();
        this.subscribe();
    };
    Channel.prototype.subscribe = function (opts) {
        if (opts === void 0) { opts = {}; }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.subscribingState !== 0 /* NOT_IN_PROGRESS */)
                            return [2 /*return*/];
                        this.cancelTokenSource = cancel_token_1.createCancelTokenSource();
                        this.subscribingState = 1 /* AWAITING_CONNECTION */;
                        return [4 /*yield*/, this.virtualSocket.whenConnected()];
                    case 1:
                        _a.sent();
                        this.subscribingState = 2 /* IN_PROGRESS */;
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, , 4, 5]);
                        return [4 /*yield*/, Promise.race([
                                this.cancelTokenSource.token.promise,
                                this.sendSubscribe(opts),
                            ])];
                    case 3:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 4:
                        this.subscribingState = 0 /* NOT_IN_PROGRESS */;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Channel.prototype.abort = function () {
        if (this.subscribingState === 2 /* IN_PROGRESS */) {
            this.cancelTokenSource.cancel();
            this.subscribingState = 0 /* NOT_IN_PROGRESS */;
        }
    };
    Channel.prototype.sendSubscribe = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var authRes, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.maybeAuth()];
                    case 1:
                        authRes = _a.sent();
                        if (!authRes)
                            return [2 /*return*/]; // in case auth request aborted
                        if (!authRes.success) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.virtualSocket.send({
                                type: 'subscribe',
                                channel: this.name,
                                auth: authRes.auth,
                                restore: opts.restoreStrategy || this.restore,
                            })];
                    case 2:
                        res = _a.sent();
                        this.emit('@duplexer:subscription_succeeded', { isSynced: res.isSynced });
                        return [3 /*break*/, 4];
                    case 3:
                        this.emit('@duplexer:subscription_failed', authRes.error);
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Channel.prototype.unsubscribe = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.virtualSocket.send({ type: 'unsubscribe', channel: this.name })];
                    case 1:
                        _a.sent();
                        this.emit('unsubscribe');
                        return [2 /*return*/];
                }
            });
        });
    };
    Channel.prototype.send = function (event, payload) {
        return this.virtualSocket.send({
            type: 'client_message',
            channel: this.name,
            event: event,
            payload: payload,
        }, { affectState: false });
    };
    Channel.prototype.maybeAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.isAuthRequired()) {
                    return [2 /*return*/, Promise.resolve({ success: true, auth: '' })];
                }
                return [2 /*return*/, withRetry(function () { return _this.authenticator.auth(_this.name, _this.virtualSocket.sessionId); }, {
                        maxTimes: 3,
                        minTimeout: 400,
                        cancelToken: this.cancelTokenSource.token,
                    })];
            });
        });
    };
    Channel.prototype.isAuthRequired = function () {
        return (this.name.indexOf('@private') === 0 ||
            this.name.indexOf('@presence') === 0 ||
            this.forceTokenRequest);
    };
    return Channel;
}(Emitter));
exports.default = Channel;
// todo: generalize method and move to a different file
function withRetry(fn, opts) {
    var times = 0;
    var backoff = new Backoff({ min: opts.minTimeout });
    function run() {
        return __awaiter(this, void 0, void 0, function () {
            var res, maybeCancel;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn()];
                    case 1:
                        res = _a.sent();
                        times += 1;
                        if (res.success || opts.maxTimes === times) {
                            return [2 /*return*/, res];
                        }
                        return [4 /*yield*/, Promise.race([
                                delay(backoff.duration()),
                                opts.cancelToken.promise,
                            ])];
                    case 2:
                        maybeCancel = _a.sent();
                        if (cancel_token_1.isCancel(maybeCancel)) {
                            return [2 /*return*/];
                        }
                        return [2 /*return*/, run()];
                }
            });
        });
    }
    return run();
}
function delay(ms) {
    return new Promise(function (resolve) { return setTimeout(resolve, ms); });
}
//# sourceMappingURL=channel.js.map