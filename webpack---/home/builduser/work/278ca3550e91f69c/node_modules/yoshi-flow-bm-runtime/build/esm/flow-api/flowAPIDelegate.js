import { once } from 'lodash';
import { assertEnabledApi } from '../util/assert-enabled-api';
import { createFlowAPIInstances } from './createFlowAPIInstances';
import { createModuleFlowAPI } from './createModuleFlowAPI';
import { assertSyncAPI } from './assertSyncAPI';
export class FlowAPIDelegate {
    constructor(params) {
        this.module = params.module;
        this.optionalDeps = params.optionalDeps;
        this.bmModule = params.bmModule;
        this.useEssentials = params.useEssentials;
    }
    get flowAPIInstancesOrGet() {
        const { optionalDeps, useEssentials } = this;
        if (this._flowAPIInstancesOrGet == null) {
            this._flowAPIInstancesOrGet = createFlowAPIInstances({
                optionalDeps,
                bmModule: this.bmModule,
                module: this.module,
                useEssentials,
            });
        }
        return this._flowAPIInstancesOrGet;
    }
    get moduleFlowAPI() {
        const { bmModule, module, optionalDeps } = this;
        if (this._moduleFlowAPI == null) {
            this._moduleFlowAPI = createModuleFlowAPI({
                module,
                bmModule,
                optionalDeps,
                flowAPIInstancesOrGet: this.flowAPIInstancesOrGet,
                useEssentials: this.useEssentials,
            });
        }
        return this._moduleFlowAPI;
    }
    createGetFedopsLogger(appName) {
        const { bmModule, useEssentials, module } = this;
        if (useEssentials) {
            return bmModule._essentials.createFedopsLogger(appName, Object.assign({}, module.config.fedops));
        }
        return once(async () => {
            const flowAPIDeps = await this.optionalDeps.loadOptionalFlowAPIDeps();
            const { createFedopsLogger } = flowAPIDeps;
            return createFedopsLogger === null || createFedopsLogger === void 0 ? void 0 : createFedopsLogger(appName, Object.assign({}, this.module.config.fedops));
        });
    }
    createGetI18nInstance(asyncMessagesLoader) {
        var _a, _b;
        const { bmModule, useEssentials } = this;
        if (useEssentials) {
            return bmModule._essentials.createI18n({
                asyncMessagesLoader,
                useSuspense: (_b = (_a = this.module.config.translations) === null || _a === void 0 ? void 0 : _a.suspense) !== null && _b !== void 0 ? _b : true,
                disableAutoInit: true,
            });
        }
        return once(async () => {
            var _a, _b;
            const flowAPIDeps = await this.optionalDeps.loadOptionalFlowAPIDeps();
            const { initI18n } = flowAPIDeps;
            return initI18n === null || initI18n === void 0 ? void 0 : initI18n({
                locale: this.bmModule.moduleParams.accountLanguage,
                asyncMessagesLoader,
                useSuspense: (_b = (_a = this.module.config.translations) === null || _a === void 0 ? void 0 : _a.suspense) !== null && _b !== void 0 ? _b : true,
                disableAutoInit: true,
            });
        });
    }
    getComponentI18nInstanceSync(asyncMessagesLoader, flowAPIDeps) {
        var _a, _b, _c, _d;
        const { bmModule, useEssentials } = this;
        if (useEssentials) {
            return bmModule._essentials.createI18n({
                asyncMessagesLoader,
                useSuspense: (_b = (_a = this.module.config.translations) === null || _a === void 0 ? void 0 : _a.suspense) !== null && _b !== void 0 ? _b : true,
                disableAutoInit: true,
            });
        }
        const { initI18n } = flowAPIDeps;
        return initI18n === null || initI18n === void 0 ? void 0 : initI18n({
            locale: this.bmModule.moduleParams.accountLanguage,
            asyncMessagesLoader,
            useSuspense: (_d = (_c = this.module.config.translations) === null || _c === void 0 ? void 0 : _c.suspense) !== null && _d !== void 0 ? _d : true,
            disableAutoInit: true,
        });
    }
    createBMMethodFlowAPI(method) {
        const { moduleFlowAPI } = this;
        const fedopsLoggerOrGet = this.createGetFedopsLogger(method.methodId);
        return {
            get module() {
                return moduleFlowAPI.module;
            },
            get moduleInfo() {
                return moduleFlowAPI.moduleInfo;
            },
            get httpClient() {
                return moduleFlowAPI.httpClient;
            },
            get sentry() {
                return moduleFlowAPI.sentry;
            },
            get moduleParams() {
                return moduleFlowAPI.moduleParams;
            },
            getI18n: moduleFlowAPI.getI18n,
            getExperiments: moduleFlowAPI.getExperiments,
            getBILogger: moduleFlowAPI.getBILogger,
            getModuleFedopsLogger: moduleFlowAPI.getModuleFedopsLogger,
            getFedopsLogger: typeof fedopsLoggerOrGet === 'function'
                ? fedopsLoggerOrGet
                : async () => fedopsLoggerOrGet,
            get fedopsLogger() {
                assertSyncAPI(typeof fedopsLoggerOrGet !== 'function', 'fedopsLogger');
                return fedopsLoggerOrGet;
            },
        };
    }
    getComponentHooksFlowAPI(component, { fedopsLoggerOrGet, getComponentI18nInstance, }) {
        const { moduleFlowAPI } = this;
        return {
            get module() {
                return moduleFlowAPI.module;
            },
            get moduleInfo() {
                return moduleFlowAPI.moduleInfo;
            },
            get httpClient() {
                return moduleFlowAPI.httpClient;
            },
            get sentry() {
                return moduleFlowAPI.sentry;
            },
            get moduleParams() {
                return moduleFlowAPI.moduleParams;
            },
            getModuleFedopsLogger: moduleFlowAPI.getModuleFedopsLogger,
            getI18n: getComponentI18nInstance !== null && getComponentI18nInstance !== void 0 ? getComponentI18nInstance : moduleFlowAPI.getI18n,
            getExperiments: moduleFlowAPI.getExperiments,
            getBILogger: moduleFlowAPI.getBILogger,
            componentInfo: {
                componentId: component.componentId,
                type: component.componentType,
            },
            getFedopsLogger: typeof fedopsLoggerOrGet === 'function'
                ? fedopsLoggerOrGet
                : async () => fedopsLoggerOrGet,
            get fedopsLogger() {
                assertSyncAPI(typeof fedopsLoggerOrGet !== 'function', 'fedopsLogger');
                return fedopsLoggerOrGet;
            },
        };
    }
    createBMComponentAPISync(component, { fedopsLogger, flowAPIDeps, componentI18n, flowAPIInstances, }) {
        const { moduleFlowAPI } = this;
        return {
            module: moduleFlowAPI.module,
            moduleInfo: moduleFlowAPI.moduleInfo,
            get httpClient() {
                return moduleFlowAPI.httpClient;
            },
            get sentry() {
                return moduleFlowAPI.sentry;
            },
            get moduleParams() {
                return moduleFlowAPI.moduleParams;
            },
            get biLogger() {
                return flowAPIInstances.biLogger;
            },
            get i18n() {
                return componentI18n !== null && componentI18n !== void 0 ? componentI18n : flowAPIInstances.i18n;
            },
            get experiments() {
                return flowAPIInstances.experiments;
            },
            get reactProviders() {
                return flowAPIDeps;
            },
            componentInfo: {
                componentId: component.componentId,
                type: component.componentType,
            },
            get fedopsLogger() {
                assertEnabledApi(fedopsLogger, 'fedopsLogger');
                return fedopsLogger;
            },
        };
    }
    async prefetchTranslations(asyncMessagesLoader) {
        var _a;
        const { optionalDeps, bmModule } = this;
        const { moduleParams: { accountLanguage }, } = bmModule;
        const loadTranslations = async (locale) => {
            if (asyncMessagesLoader != null) {
                await asyncMessagesLoader(locale);
            }
            else if (optionalDeps.asyncMessagesLoader != null) {
                await optionalDeps.asyncMessagesLoader(locale);
            }
        };
        try {
            await loadTranslations(accountLanguage);
        }
        catch (e) {
            try {
                await loadTranslations('en');
            }
            catch (e) {
                const errorMsg = 'Default locale (en) not found!';
                console.error(errorMsg);
                // eslint-disable-next-line no-unused-expressions
                (_a = this.moduleFlowAPI.sentry) === null || _a === void 0 ? void 0 : _a.captureException(new Error(errorMsg));
            }
        }
    }
    async prefetchExperiments() {
        var _a;
        const { module } = this;
        if (typeof this.flowAPIInstancesOrGet.experimentsOrGet !== 'function') {
            const experiments = this.flowAPIInstancesOrGet.experimentsOrGet;
            const scopes = (_a = module.config.experiments) === null || _a === void 0 ? void 0 : _a.scopes;
            if (scopes) {
                return Promise.all(scopes.map((scope) => experiments.load(scope)));
            }
        }
    }
    async createBMComponentAPI(component, { fedopsLoggerOrGet, getComponentI18nInstance, }) {
        const { optionalDeps, flowAPIInstancesOrGet } = this;
        const { biLoggerOrGet, i18nOrGet, experimentsOrGet, } = flowAPIInstancesOrGet;
        const flowAPIDeps = await optionalDeps.loadOptionalFlowAPIDeps();
        const i18n = typeof i18nOrGet === 'function' ? await i18nOrGet() : i18nOrGet;
        const biLogger = typeof biLoggerOrGet === 'function'
            ? await biLoggerOrGet()
            : biLoggerOrGet;
        const experiments = typeof experimentsOrGet === 'function'
            ? await experimentsOrGet()
            : experimentsOrGet;
        return this.createBMComponentAPISync(component, {
            flowAPIDeps,
            fedopsLogger: typeof fedopsLoggerOrGet === 'function'
                ? await fedopsLoggerOrGet()
                : fedopsLoggerOrGet,
            componentI18n: await (getComponentI18nInstance === null || getComponentI18nInstance === void 0 ? void 0 : getComponentI18nInstance()),
            flowAPIInstances: {
                get i18n() {
                    assertEnabledApi(i18n, 'i18n');
                    return i18n;
                },
                get biLogger() {
                    assertEnabledApi(biLogger, 'biLogger');
                    return biLogger;
                },
                get experiments() {
                    assertEnabledApi(experiments, 'experiments');
                    return experiments;
                },
            },
        });
    }
    createGetComponentI18nInstance(asyncMessagesLoader) {
        return asyncMessagesLoader != null
            ? async () => {
                const i18nOrGet = this.createGetI18nInstance(asyncMessagesLoader);
                const i18n = typeof i18nOrGet === 'function' ? await i18nOrGet() : i18nOrGet;
                if (!i18n.isInitialized) {
                    await i18n.init();
                }
                return i18n;
            }
            : null;
    }
}
//# sourceMappingURL=flowAPIDelegate.js.map