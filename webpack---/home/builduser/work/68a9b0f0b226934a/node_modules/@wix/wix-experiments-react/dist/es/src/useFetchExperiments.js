import { __assign } from "tslib";
import React from 'react';
import Experiments from '@wix/wix-experiments';
import { generateDependencyKeys } from './utils';
export var useFetchExperiments = function (options) {
    var dependency = generateDependencyKeys(options);
    var experimentsInstance = React.useMemo(function () {
        return new Experiments({
            baseUrl: options.baseUrl,
        });
    }, [dependency.baseUrl]);
    React.useMemo(function () {
        if (options.experiments) {
            experimentsInstance.add(__assign({}, options.experiments));
        }
    }, [experimentsInstance, dependency.experiments]);
    React.useMemo(function () {
        if (options.scope) {
            var scopes = Array.isArray(options.scope)
                ? options.scope
                : [options.scope];
            for (var _i = 0, scopes_1 = scopes; _i < scopes_1.length; _i++) {
                var scope = scopes_1[_i];
                void experimentsInstance.load(scope);
            }
        }
    }, [experimentsInstance, dependency.scope]);
    var promise = React.useMemo(function () { return experimentsInstance.ready(); }, [
        experimentsInstance,
        dependency.scope,
    ]);
    var _a = React.useState(!experimentsInstance.pending()), ready = _a[0], setReady = _a[1];
    React.useEffect(function () {
        var mounted = true;
        if (!ready) {
            void promise
                .then(function () {
                if (mounted) {
                    setReady(true);
                }
            })
                .catch(function () { });
        }
        return function () {
            mounted = false;
        };
    }, [promise]);
    return {
        ready: ready,
        promise: promise,
        experimentsInstance: experimentsInstance,
    };
};
//# sourceMappingURL=useFetchExperiments.js.map