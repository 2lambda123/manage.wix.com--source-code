var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = { endpoint: 'market' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 24 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'market' });
    }
    ;
    /**
    * @typedef {Object} __deprecated__17Params
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 17.
     * Event description: welcome screen -> welcome screen loaded.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__17Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__17 = function (params) {
        return this.bi.log(__assign({ evid: 17 }, params));
    };
    /**
    * @typedef {Object} appMarketUpgradeWixSiteClickParams
    * @property {string} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - determines which market initiated this event (editor or dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Upgrade Wix-Site Premium click. Evid: 70.
     * Event description: When trying to install Apps that require premium wix site, prompt will be opened, clicking on the button "Upgrade Site" will send this BI event..
    
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: determines which market initiated this event (editor or dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketUpgradeWixSiteClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketUpgradeWixSiteClick = function (params) {
        return this.bi.log(__assign({ evid: 70 }, params));
    };
    /**
    * @typedef {Object} __deprecated__60Params
    * @property {GUID} esi - null
    * @property {string} open_origin - {add_panel...}
    * @property {number} seconds_opened - how long was the session in the app market (open to close in seconds)
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Close Market Button [x] (not in use). Evid: 60.
     * Event description: App Market - Close Market Button [x].
    
     * esi - Type: guid.
     *
     * open_origin - Type: string. Desc: {add_panel...}
     *
     * seconds_opened - Type: numeric. Desc: how long was the session in the app market (open to close in seconds)
     *
     * vertical - Type: string.
     * @param {__deprecated__60Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__60 = function (params) {
        return this.bi.log(__assign({ evid: 60 }, params));
    };
    /**
    * @typedef {Object} addAppClickParams
    * @property {GUID} app_id - app_id
    * @property {string} category - Every app belongs to one category. which one is the app category of this app?
    * @property {string} click_location - 'main_cta' or 'sticky_header'
    * @property {GUID} collimp_id - collection impression guid
    * @property {GUID} esi - null
    * @property {GUID} impression_id - impression id - unique for which impression
    * @property {number} index - The listing ranking of the number in the presented page.
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} pageType - Type of page used when add app was clicked ( Homepage, App page, Developer page , collection page etc)
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_section_name - section that referred this
    * @property {string} search_term - {html, analytics,...}
    * @property {string} section - In which section is that app located?
    * @property {number} section_index - from top = 0, to last = 0+n. what is the ranking order of the section presented?
    * @property {string} section_name - name of section's title presented
    * @property {string} slug_id - id of consistent set of apps
    * @property {string} tag_name - name of the specific tag ('must have apps' , 'music' etc)
    * @property {string} tag_type - type of page opened - category, homepage, app page etc
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    * @property {string} widget_name - when trying to add an app, if app the inside a widget - what is the widget name. else null
    * @property {string} widget_referral - is flow referred from widget
    **/
    /**
     * Name: AppMarket - add app click. Evid: 31.
     * Event description: add app click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * category - Type: string. Desc: Every app belongs to one category. which one is the app category of this app?
     *
     * click_location - Type: string. Desc: 'main_cta' or 'sticky_header'
     *
     * collimp_id - Type: guid. Desc: collection impression guid
     *
     * esi - Type: guid.
     *
     * impression_id - Type: guid. Desc: impression id - unique for which impression
     *
     * index - Type: numeric. Desc: The listing ranking of the number in the presented page.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * pageType - Type: string. Desc: Type of page used when add app was clicked ( Homepage, App page, Developer page , collection page etc)
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_section_name - Type: string. Desc: section that referred this
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * section - Type: string. Desc: In which section is that app located?
     *
     * section_index - Type: numeric. Desc: from top = 0, to last = 0+n. what is the ranking order of the section presented?
     *
     * section_name - Type: string. Desc: name of section's title presented
     *
     * slug_id - Type: string. Desc: id of consistent set of apps
     *
     * tag_name - Type: string. Desc: name of the specific tag ('must have apps' , 'music' etc)
     *
     * tag_type - Type: string. Desc: type of page opened - category, homepage, app page etc
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     *
     * widget_name - Type: string. Desc: when trying to add an app, if app the inside a widget - what is the widget name. else null
     *
     * widget_referral - Type: string. Desc: is flow referred from widget
     * @param {addAppClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.addAppClick = function (params) {
        return this.bi.log(__assign({ evid: 31 }, params));
    };
    /**
    * @typedef {Object} __deprecated__86Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} type - {facebook, twitter}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 86.
     * Event description: review system -> share review.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * type - Type: string. Desc: {facebook, twitter}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__86Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__86 = function (params) {
        return this.bi.log(__assign({ evid: 86 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1011Params
    * @property {string} button_name - 'test_app', 'submit_proposal'
    * @property {GUID} esi - session ID
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1011.
     * Event description: Click any button on the split page.
    
     * button_name - Type: string. Desc: 'test_app', 'submit_proposal'
     *
     * esi - Type: guid. Desc: session ID
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1011Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1011 = function (params) {
        return this.bi.log(__assign({ evid: 1011 }, params));
    };
    /**
    * @typedef {Object} collectionOpenSiteCategoryPopUpParams
    * @property {string} category - {[market]_collection}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {ed_home}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - click on site category pop up. Evid: 30.
     * Event description: When changing  the site category (stores, photography, music , fitness, etc - this will change the type of apps shown in the front page.).
    
     * category - Type: string. Desc: {[market]_collection}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {ed_home}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {collectionOpenSiteCategoryPopUpParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.collectionOpenSiteCategoryPopUp = function (params) {
        return this.bi.log(__assign({ evid: 30 }, params));
    };
    /**
    * @typedef {Object} __deprecated__28Params
    * @property {string} auto_search_term - auto_search_term
    * @property {GUID} esi - null
    * @property {GUID} first_result_app_id - [first_result_app_id]
    * @property {string} market - {editor,dashboard,standalone}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 28.
     * Event description: search autocomplete results.
    
     * auto_search_term - Type: string. Desc: auto_search_term
     *
     * esi - Type: guid.
     *
     * first_result_app_id - Type: guid. Desc: [first_result_app_id]
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__28Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__28 = function (params) {
        return this.bi.log(__assign({ evid: 28 }, params));
    };
    /**
    * @typedef {Object} myAppsUpgradeAppClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} app_site_id - app_site_id
    * @property {GUID} esi - null
    * @property {string} market - {dashboard,...}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} pp_origin - {my_apps,...}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Manage Apps - upgrade app click. Evid: 38.
     * Event description: in manage apps - click on upgrade button for apps.
    
     * app_id - Type: guid. Desc: app_id
     *
     * app_site_id - Type: guid. Desc: app_site_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {dashboard,...}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * pp_origin - Type: string. Desc: {my_apps,...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {myAppsUpgradeAppClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.myAppsUpgradeAppClick = function (params) {
        return this.bi.log(__assign({ evid: 38 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1100Params
    * @property {string} button_name - 'home', 'add_app', 'documentation', 'support', 'app_market', 'dev_account', 'logout'
    * @property {GUID} esi - Session ID
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1100.
     * Event description: Click a button on the top banner of the new Dev Center.
    
     * button_name - Type: string. Desc: 'home', 'add_app', 'documentation', 'support', 'app_market', 'dev_account', 'logout'
     *
     * esi - Type: guid. Desc: Session ID
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1100Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1100 = function (params) {
        return this.bi.log(__assign({ evid: 1100 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1021Params
    * @property {GUID} esi - session ID
    * @property {GUID} msid - msid
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Finance Tab - View More Apps click. Evid: 1021.
     * Event description: Click on view more apps.
    
     * esi - Type: guid. Desc: session ID
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1021Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1021 = function (params) {
        return this.bi.log(__assign({ evid: 1021 }, params));
    };
    /**
    * @typedef {Object} searchSearchClickParams
    * @property {GUID} esi - null
    * @property {number} index - index number of app preseting ranking order
    * @property {string} market - {editor,dashboard,standalone}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {search_auto, direct}
    * @property {string} search_location - search_location
    * @property {string} search_term - {html, analytics,...}
    * @property {string} search_type - direct, apps, popular, categories
    * @property {string} tag_type - tag_type of searched bar
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Search Performed by User. Evid: 13.
     * Event description: search -> search click.
    
     * esi - Type: guid.
     *
     * index - Type: numeric. Desc: index number of app preseting ranking order
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {search_auto, direct}
     *
     * search_location - Type: string. Desc: search_location
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * search_type - Type: string. Desc: direct, apps, popular, categories
     *
     * tag_type - Type: string. Desc: tag_type of searched bar
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {searchSearchClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.searchSearchClick = function (params) {
        return this.bi.log(__assign({ evid: 13 }, params));
    };
    /**
    * @typedef {Object} manageAppsUpgradeSiteParams
    * @property {GUID} appId - app id
    * @property {GUID} appInstanceId - app instance id
    * @property {GUID} esi - null
    * @property {string} market - what market ? (editor, dashboard etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Manage Apps - Upgrade App. Evid: 95.
     * Event description: Upgrade App Click in the Manage Apps.
    
     * appId - Type: guid. Desc: app id
     *
     * appInstanceId - Type: guid. Desc: app instance id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what market ? (editor, dashboard etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {manageAppsUpgradeSiteParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.manageAppsUpgradeSite = function (params) {
        return this.bi.log(__assign({ evid: 95 }, params));
    };
    /**
    * @typedef {Object} errorPageLoadedParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} referral_info - referral_info
    * @property {GUID} site_id - site_id
    * @property {string} state - state
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket- error page loaded. Evid: 200.
     * Event description: error page loaded.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * site_id - Type: guid. Desc: site_id
     *
     * state - Type: string. Desc: state
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {errorPageLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.errorPageLoaded = function (params) {
        return this.bi.log(__assign({ evid: 200 }, params));
    };
    /**
    * @typedef {Object} appMarketToastPresentedParams
    * @property {string} action_cta - action required
    * @property {string} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - dashboard, editor etc
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Toast Presented. Evid: 150.
     * Event description: Toast is presented for user to take action for app..
    
     * action_cta - Type: string. Desc: action required
     *
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: dashboard, editor etc
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketToastPresentedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketToastPresented = function (params) {
        return this.bi.log(__assign({ evid: 150 }, params));
    };
    /**
    * @typedef {Object} wishlistWishlistLoadedParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {number} num_results - {0,1,2,3..}
    * @property {string} origin - {search, ...}
    * @property {string} search_term - [search_term]
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Wishlist - wishlist loaded. Evid: 52.
     * Event description: wishlist -> wishlist loaded.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * num_results - Type: numeric. Desc: {0,1,2,3..}
     *
     * origin - Type: string. Desc: {search, ...}
     *
     * search_term - Type: string. Desc: [search_term]
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {wishlistWishlistLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistWishlistLoaded = function (params) {
        return this.bi.log(__assign({ evid: 52 }, params));
    };
    /**
    * @typedef {Object} wishlistWishlistClosedParams
    * @property {string} closing_method - {x, cancel, click_out}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Wishlist - wishlist closed. Evid: 53.
     * Event description: wishlist -> wishlist closed.
    
     * closing_method - Type: string. Desc: {x, cancel, click_out}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {wishlistWishlistClosedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistWishlistClosed = function (params) {
        return this.bi.log(__assign({ evid: 53 }, params));
    };
    /**
    * @typedef {Object} appMarketWidgetsClickActionParams
    * @property {GUID} esi - null
    * @property {string} market - market platform
    * @property {string} marketVersion - version of market
    * @property {GUID} msid - msid
    * @property {string} section - what is the section (widget) name
    * @property {string} tag_name - what was the actual page name , where the widget was shown? (app_id of app, homepage etc)
    * @property {string} tag_name_clicked - name of tag clicked on to go
    * @property {string} tag_type - Where was the widget when user clicked on it? (homepage, app page)
    * @property {string} tag_type_clicked - type of tag clicked on to go
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Widgets - Click Action. Evid: 3.
     * Event description: When user clicks on a possible action in a widget: could be box of apps collection, category or simple articles.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market platform
     *
     * marketVersion - Type: string. Desc: version of market
     *
     * msid - Type: guid. Desc: msid
     *
     * section - Type: string. Desc: what is the section (widget) name
     *
     * tag_name - Type: string. Desc: what was the actual page name , where the widget was shown? (app_id of app, homepage etc)
     *
     * tag_name_clicked - Type: string. Desc: name of tag clicked on to go
     *
     * tag_type - Type: string. Desc: Where was the widget when user clicked on it? (homepage, app page)
     *
     * tag_type_clicked - Type: string. Desc: type of tag clicked on to go
     *
     * vertical - Type: string.
     * @param {appMarketWidgetsClickActionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketWidgetsClickAction = function (params) {
        return this.bi.log(__assign({ evid: 3 }, params));
    };
    /**
    * @typedef {Object} wishlistSuccessMessageAddAgainClickParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Wishlist - success message -> add again click. Evid: 57.
     * Event description: wishlist -> success message -> add again click.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {wishlistSuccessMessageAddAgainClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistSuccessMessageAddAgainClick = function (params) {
        return this.bi.log(__assign({ evid: 57 }, params));
    };
    /**
    * @typedef {Object} wishlistSendClickParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {number} num_results - {0,1,2,3..}
    * @property {string} origin - {search, ...}
    * @property {string} search_term - [search_term]
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Wishlist - send click. Evid: 54.
     * Event description: wishlist -> send click.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * num_results - Type: numeric. Desc: {0,1,2,3..}
     *
     * origin - Type: string. Desc: {search, ...}
     *
     * search_term - Type: string. Desc: [search_term]
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {wishlistSendClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistSendClick = function (params) {
        return this.bi.log(__assign({ evid: 54 }, params));
    };
    /**
    * @typedef {Object} __deprecated__105Params
    * @property {GUID} esi - null
    * @property {string} market - editor,dashboard
    * @property {string} marketVersion - what market version (old or new market)
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - open manage apps (not in use). Evid: 105.
     * Event description: open manage apps section.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor,dashboard
     *
     * marketVersion - Type: string. Desc: what market version (old or new market)
     *
     * vertical - Type: string.
     * @param {__deprecated__105Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__105 = function (params) {
        return this.bi.log(__assign({ evid: 105 }, params));
    };
    /**
    * @typedef {Object} appMarketAppPageAppGalleryClickParams
    * @property {string} action - right, left, dot
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - editor, dashboard, standalone
    * @property {string} marketVersion - new
    * @property {GUID} msid - msid of site
    * @property {string} tag_name - name of the tag
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - App Page - App Gallery Click. Evid: 173.
     * Event description: App Market - App Page - Click on Reviews Number.
    
     * action - Type: string. Desc: right, left, dot
     *
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor, dashboard, standalone
     *
     * marketVersion - Type: string. Desc: new
     *
     * msid - Type: guid. Desc: msid of site
     *
     * tag_name - Type: string. Desc: name of the tag
     *
     * vertical - Type: string.
     * @param {appMarketAppPageAppGalleryClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppPageAppGalleryClick = function (params) {
        return this.bi.log(__assign({ evid: 173 }, params));
    };
    /**
    * @typedef {Object} appModalSupportInfoClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} info_type - {email, website, phone}
    * @property {string} market - {editor,dashboard,standalone, da_widget, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Support Info Click. Evid: 25.
     * Event description: app modal -> support info click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * info_type - Type: string. Desc: {email, website, phone}
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {appModalSupportInfoClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appModalSupportInfoClick = function (params) {
        return this.bi.log(__assign({ evid: 25 }, params));
    };
    /**
    * @typedef {Object} __deprecated__59Params
    * @property {string} action - User's click in the prompt menu (delete app, cancel, go got it, learn more,[x] ....
    * @property {GUID} appId - app id
    * @property {GUID} esi - null
    * @property {string} market - Name of market manage apps was used from (dashboard, market)
    * @property {string} promptType - what kind of prompt was shown? (dashboard app, page app, multi widget app, hybrid app, upgraded app)
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 59.
     * Event description: Prompt open when user presses the delete button over an app , in the Manage Apps section..
    
     * action - Type: string. Desc: User's click in the prompt menu (delete app, cancel, go got it, learn more,[x] ....
     *
     * appId - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: Name of market manage apps was used from (dashboard, market)
     *
     * promptType - Type: string. Desc: what kind of prompt was shown? (dashboard app, page app, multi widget app, hybrid app, upgraded app)
     *
     * vertical - Type: string.
     * @param {__deprecated__59Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__59 = function (params) {
        return this.bi.log(__assign({ evid: 59 }, params));
    };
    /**
    * @typedef {Object} appMarketMenuNavigationParams
    * @property {GUID} esi - null
    * @property {number} index - index of label in menu
    * @property {string} market - editor, dashboard etc
    * @property {string} marketVersion - version of the market - old or new
    * @property {string} menu_item_label - name of menu label
    * @property {GUID} msid - msid
    * @property {string} slug_id - slug_id
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Menu Navigation. Evid: 116.
     * Event description: User navigate through the App Market, using the side menu..
    
     * esi - Type: guid.
     *
     * index - Type: numeric. Desc: index of label in menu
     *
     * market - Type: string. Desc: editor, dashboard etc
     *
     * marketVersion - Type: string. Desc: version of the market - old or new
     *
     * menu_item_label - Type: string. Desc: name of menu label
     *
     * msid - Type: guid. Desc: msid
     *
     * slug_id - Type: string. Desc: slug_id
     *
     * vertical - Type: string.
     * @param {appMarketMenuNavigationParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketMenuNavigation = function (params) {
        return this.bi.log(__assign({ evid: 116 }, params));
    };
    /**
    * @typedef {Object} appMarketStandaloneHomepageClicksOnGetStartedParams
    * @property {GUID} esi - null
    * @property {string} market - standalone
    * @property {GUID} msid - msid
    * @property {string} tag_type - home page
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Standalone - Homepage - Clicks On Get Started. Evid: 138.
     * Event description: user enters the standalone homepage and clicks on get started (link to Wix app market)..
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_type - Type: string. Desc: home page
     *
     * vertical - Type: string.
     * @param {appMarketStandaloneHomepageClicksOnGetStartedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketStandaloneHomepageClicksOnGetStarted = function (params) {
        return this.bi.log(__assign({ evid: 138 }, params));
    };
    /**
    * @typedef {Object} permissionsModalTermsOfUseClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Permission - terms of use click. Evid: 44.
     * Event description: Consent page - clicking on the 'terms of use' option.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {permissionsModalTermsOfUseClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.permissionsModalTermsOfUseClick = function (params) {
        return this.bi.log(__assign({ evid: 44 }, params));
    };
    /**
    * @typedef {Object} __deprecated__39Params
    * @property {GUID} esi - null
    * @property {string} market - {dashboard}
    * @property {string} msg_type - {standard, premium, hybrid}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 39.
     * Event description: tpa message loaded.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {dashboard}
     *
     * msg_type - Type: string. Desc: {standard, premium, hybrid}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__39Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__39 = function (params) {
        return this.bi.log(__assign({ evid: 39 }, params));
    };
    /**
    * @typedef {Object} pendingRemoveAppFromPendingClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - pending - remove app from pending click. Evid: 61.
     * Event description: pending -> remove app from pending click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {pendingRemoveAppFromPendingClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.pendingRemoveAppFromPendingClick = function (params) {
        return this.bi.log(__assign({ evid: 61 }, params));
    };
    /**
    * @typedef {Object} appMarketDeveloperContactBoxActionClickParams
    * @property {string} actionName - name of action taken 'visit our website', 'privacy policy' etc
    * @property {string} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - market version, "new" for new else null
    * @property {GUID} msid - msid
    * @property {string} tag_name - tag name
    * @property {string} tag_type - tag_type
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Developer Contact Box Action Click. Evid: 126.
     * Event description: User clicks on developer contact box action in the App page.
    
     * actionName - Type: string. Desc: name of action taken 'visit our website', 'privacy policy' etc
     *
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: market version, "new" for new else null
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_name - Type: string. Desc: tag name
     *
     * tag_type - Type: string. Desc: tag_type
     *
     * vertical - Type: string.
     * @param {appMarketDeveloperContactBoxActionClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDeveloperContactBoxActionClick = function (params) {
        return this.bi.log(__assign({ evid: 126 }, params));
    };
    /**
    * @typedef {Object} pendingAppRemovedFromPendingParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Pending - app removed from pending. Evid: 62.
     * Event description: pending -> app removed from pending.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {pendingAppRemovedFromPendingParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.pendingAppRemovedFromPending = function (params) {
        return this.bi.log(__assign({ evid: 62 }, params));
    };
    /**
    * @typedef {Object} __deprecated__81Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {string} origin - {tab,link}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 81.
     * Event description: review system page view.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {tab,link}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__81Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__81 = function (params) {
        return this.bi.log(__assign({ evid: 81 }, params));
    };
    /**
    * @typedef {Object} permissionsPermissionsModalClosedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - editor, dashboard, adi, third_party
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {string} message_type - {default, unlisted_app_warning}
    * @property {string} modalType - consent , existing
    * @property {GUID} msid - msid
    * @property {number} num_of_permissions - number of permissions requested by consent
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Consent Page closed. Evid: 42.
     * Event description: permissions -> permissions modal closed.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor, dashboard, adi, third_party
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * message_type - Type: string. Desc: {default, unlisted_app_warning}
     *
     * modalType - Type: string. Desc: consent , existing
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_permissions - Type: numeric. Desc: number of permissions requested by consent
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {permissionsPermissionsModalClosedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.permissionsPermissionsModalClosed = function (params) {
        return this.bi.log(__assign({ evid: 42 }, params));
    };
    /**
    * @typedef {Object} appModalShareClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {standalone,...}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} share_type - {facebook, twitter}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - app modal share click. Evid: 27.
     * Event description: app modal -> share click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {standalone,...}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * share_type - Type: string. Desc: {facebook, twitter}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {appModalShareClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appModalShareClick = function (params) {
        return this.bi.log(__assign({ evid: 27 }, params));
    };
    /**
    * @typedef {Object} appMarketSubCategoryClickParams
    * @property {string} category_name - name of category page
    * @property {GUID} esi - null
    * @property {string} loaction - from where the user reached to the page, and then clicked on the sub category- side menu and etc
    * @property {string} market - dashboard, editor, standalone
    * @property {string} marketVersion - new or old
    * @property {GUID} msid - msid
    * @property {string} subcategory_name - name of sub-category clicked
    * @property {string} type - type of click: 'exclude' or 'include'
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Sub-Category Click. Evid: 118.
     * Event description: User clicks on a sub-category tag, to filter in (or out) the apps that are presented in a category page..
    
     * category_name - Type: string. Desc: name of category page
     *
     * esi - Type: guid.
     *
     * loaction - Type: string. Desc: from where the user reached to the page, and then clicked on the sub category- side menu and etc
     *
     * market - Type: string. Desc: dashboard, editor, standalone
     *
     * marketVersion - Type: string. Desc: new or old
     *
     * msid - Type: guid. Desc: msid
     *
     * subcategory_name - Type: string. Desc: name of sub-category clicked
     *
     * type - Type: string. Desc: type of click: 'exclude' or 'include'
     *
     * vertical - Type: string.
     * @param {appMarketSubCategoryClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSubCategoryClick = function (params) {
        return this.bi.log(__assign({ evid: 118 }, params));
    };
    /**
    * @typedef {Object} appMarketBreadcrumbsClickParams
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - "new" for new market, else null
    * @property {GUID} msid - msid
    * @property {number} nav_level - level of breadcrumb clicked, 1 > 2 > 3 > etc
    * @property {string} tag_name - tag name
    * @property {string} tag_name_clicked - tag name of target
    * @property {string} tag_type - tag type
    * @property {string} tag_type_clicked - target of tag type
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Breadcrumbs Click. Evid: 125.
     * Event description: user clicks on breadcrumb navigation.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: "new" for new market, else null
     *
     * msid - Type: guid. Desc: msid
     *
     * nav_level - Type: numeric. Desc: level of breadcrumb clicked, 1 > 2 > 3 > etc
     *
     * tag_name - Type: string. Desc: tag name
     *
     * tag_name_clicked - Type: string. Desc: tag name of target
     *
     * tag_type - Type: string. Desc: tag type
     *
     * tag_type_clicked - Type: string. Desc: target of tag type
     *
     * vertical - Type: string.
     * @param {appMarketBreadcrumbsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketBreadcrumbsClick = function (params) {
        return this.bi.log(__assign({ evid: 125 }, params));
    };
    /**
    * @typedef {Object} appMarketUpgradeSiteConnectDomainDialogBoxParams
    * @property {GUID} appId - app id
    * @property {GUID} esi - null
    * @property {string} market - editor or dashboard
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} stepName - which step is it? 'upgrade_site' or 'connect_domain'
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket: "Upgrade Site" / "Connect Domain" Dialog Box. Evid: 76.
     * Event description: Dialog box opened when user tries to install a premium-must app..
    
     * appId - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor or dashboard
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * stepName - Type: string. Desc: which step is it? 'upgrade_site' or 'connect_domain'
     *
     * vertical - Type: string.
     * @param {appMarketUpgradeSiteConnectDomainDialogBoxParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketUpgradeSiteConnectDomainDialogBox = function (params) {
        return this.bi.log(__assign({ evid: 76 }, params));
    };
    /**
    * @typedef {Object} __deprecated__26Params
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget, premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} thumbnail_type - {left, right}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 26.
     * Event description: app modal -> thumbnail click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * thumbnail_type - Type: string. Desc: {left, right}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__26Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__26 = function (params) {
        return this.bi.log(__assign({ evid: 26 }, params));
    };
    /**
    * @typedef {Object} appMarketDeleteModalCancelAppDeleteXParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - market version (new or null)
    * @property {GUID} msid - msid
    * @property {string} origin - click origin from? ('context_menu' etc)
    * @property {string} tag_type - Where did the delete take place from?
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Delete Modal - Cancel App Delete [x]. Evid: 8.
     * Event description: User closes the delete app modal without deleting..
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: market version (new or null)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: click origin from? ('context_menu' etc)
     *
     * tag_type - Type: string. Desc: Where did the delete take place from?
     *
     * vertical - Type: string.
     * @param {appMarketDeleteModalCancelAppDeleteXParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDeleteModalCancelAppDeleteX = function (params) {
        return this.bi.log(__assign({ evid: 8 }, params));
    };
    /**
    * @typedef {Object} __deprecated__72Params
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 72.
     * Event description: premium cart -> app removed from cart.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__72Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__72 = function (params) {
        return this.bi.log(__assign({ evid: 72 }, params));
    };
    /**
    * @typedef {Object} appMarketPageViewParams
    * @property {string} app_id - if app page opened, app_id. Else = null
    * @property {string} app_subcategory - if app was shown in a category page where sub categories were selected - name them.
    * @property {GUID} collimp_id - collection impression guid
    * @property {GUID} esi - null
    * @property {GUID} impression_id - Impression id - unique for which impression
    * @property {string} market - market type - editor, dashboard, standalone
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} navigation_source - what triggered the pave view? ( menu navigation, search, deep link etc)
    * @property {string} referral_info - referral_info (correct, no typo)
    * @property {number} referral_section_index - what is the index number of the app box that was clicked in previous page
    * @property {string} referral_section_name - what is the section name that was clicked in previous page
    * @property {string} referral_tag_name - what is the tag_name that referred to this page
    * @property {string} refferal_info - refferal_info - is typo
    * @property {string} search_term - search_term used to get here
    * @property {string} section - In which section is that app located?
    * @property {string} slug_id - id of consistent set of apps
    * @property {string} slug_index_list - list of slug_id presented in homepage from top to bottom
    * @property {string} tag_name - the name of the tag type (if collection - must have apps, free apps etc. if category - music, video , business etc)
    * @property {string} tag_type - tag type - collection, category
    * @property {string} vertical - null
    * @property {string} widget_referral - is flow referred from widget
    **/
    /**
     * Name: AppMarket - Page View. Evid: 111.
     * Event description: Every page opened in the App Market will trigger this event..
    
     * app_id - Type: string. Desc: if app page opened, app_id. Else = null
     *
     * app_subcategory - Type: string. Desc: if app was shown in a category page where sub categories were selected - name them.
     *
     * collimp_id - Type: guid. Desc: collection impression guid
     *
     * esi - Type: guid.
     *
     * impression_id - Type: guid. Desc: Impression id - unique for which impression
     *
     * market - Type: string. Desc: market type - editor, dashboard, standalone
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * navigation_source - Type: string. Desc: what triggered the pave view? ( menu navigation, search, deep link etc)
     *
     * referral_info - Type: string. Desc: referral_info (correct, no typo)
     *
     * referral_section_index - Type: numeric. Desc: what is the index number of the app box that was clicked in previous page
     *
     * referral_section_name - Type: string. Desc: what is the section name that was clicked in previous page
     *
     * referral_tag_name - Type: string. Desc: what is the tag_name that referred to this page
     *
     * refferal_info - Type: string. Desc: refferal_info - is typo
     *
     * search_term - Type: string. Desc: search_term used to get here
     *
     * section - Type: string. Desc: In which section is that app located?
     *
     * slug_id - Type: string. Desc: id of consistent set of apps
     *
     * slug_index_list - Type: string. Desc: list of slug_id presented in homepage from top to bottom
     *
     * tag_name - Type: string. Desc: the name of the tag type (if collection - must have apps, free apps etc. if category - music, video , business etc)
     *
     * tag_type - Type: string. Desc: tag type - collection, category
     *
     * vertical - Type: string.
     *
     * widget_referral - Type: string. Desc: is flow referred from widget
     * @param {appMarketPageViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPageView = function (params) {
        return this.bi.log(__assign({ evid: 111 }, params));
    };
    /**
    * @typedef {Object} appMarketPendingForDeleteModalLoadedParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Pending for Delete Modal - Loaded. Evid: 127.
     * Event description: when user is trying to delete an editor component app from the BM , he will get this modal to ask him to move to Editor..
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketPendingForDeleteModalLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPendingForDeleteModalLoaded = function (params) {
        return this.bi.log(__assign({ evid: 127 }, params));
    };
    /**
    * @typedef {Object} unificationAddAppClickParams
    * @property {string} addition_method - {direct_add, modal}
    * @property {GUID} app_id - app_id
    * @property {string} category - {featured, new, search, pending, all_carousel....}
    * @property {string} component_type - {tpa,ed_component,list,blog...}
    * @property {GUID} esi - null
    * @property {number} item_position - {1,2,3...}
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {string} modal_tab_name - {demo, reviews, reviews_link}
    * @property {GUID} msid - msid
    * @property {string} origin - {dash_market_hover,....}
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {[add panel 'view more apps' category], [sa category], [cart category]...}
    * @property {string} search_term - {html, analytics,...}
    * @property {GUID} site_id - site_id
    * @property {string} value - {search_term}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - unification add app click. Evid: 32.
     * Event description: unification add app click.
    
     * addition_method - Type: string. Desc: {direct_add, modal}
     *
     * app_id - Type: guid. Desc: app_id
     *
     * category - Type: string. Desc: {featured, new, search, pending, all_carousel....}
     *
     * component_type - Type: string. Desc: {tpa,ed_component,list,blog...}
     *
     * esi - Type: guid.
     *
     * item_position - Type: numeric. Desc: {1,2,3...}
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * modal_tab_name - Type: string. Desc: {demo, reviews, reviews_link}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {dash_market_hover,....}
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {[add panel 'view more apps' category], [sa category], [cart category]...}
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * value - Type: string. Desc: {search_term}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {unificationAddAppClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.unificationAddAppClick = function (params) {
        return this.bi.log(__assign({ evid: 32 }, params));
    };
    /**
    * @typedef {Object} appMarketConsentPageAllowAndInstall117Params
    * @property {string} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} marketVersion - new market or old market
    * @property {GUID} msid - msid
    * @property {string} vertical - what is the vertical of the site
    **/
    /**
     * Name: AppMarket - Empty Ready Event (Not in use). Evid: 117.
     * Event description: This event was never used. can be used for new events..
    
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid.
     *
     * marketVersion - Type: string. Desc: new market or old market
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string. Desc: what is the vertical of the site
     * @param {appMarketConsentPageAllowAndInstall117Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketConsentPageAllowAndInstall117 = function (params) {
        return this.bi.log(__assign({ evid: 117 }, params));
    };
    /**
    * @typedef {Object} appMarketStandaloneHomepageClicksOnStartNowParams
    * @property {GUID} esi - null
    * @property {string} market - standalone
    * @property {GUID} msid - msid
    * @property {string} tag_type - home page
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Standalone - Homepage - Clicks On Start Now. Evid: 139.
     * Event description: user enters the standalone homepage and clicks on start now (link to dev center)..
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_type - Type: string. Desc: home page
     *
     * vertical - Type: string.
     * @param {appMarketStandaloneHomepageClicksOnStartNowParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketStandaloneHomepageClicksOnStartNow = function (params) {
        return this.bi.log(__assign({ evid: 139 }, params));
    };
    /**
    * @typedef {Object} externalPpCheckoutStartParams
    * @property {GUID} appId - app id
    * @property {GUID} appstoreId - unique guid for app_id, package and cycle. (e.g - App_1 , pro package, yearly cycle)
    * @property {number} payment_cycle - 3 - monthly, 6- yearly etc.
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {number} num_of_packages - number of packages offered by the app to upgrade.
    * @property {string} pp_origin - Where did the package picker opened from
    * @property {Url} referer - url that upgrade came from
    * @property {string} referralAdditionalInfo - Which button sent the user into upgrading the TPA funnel (ed_Settings dialog - favicon_upgrade_btn, ed_Settings dialog - url_upgrade_btn)
    * @property {string} vendorProductId - vendor product id
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - App Upgrade - Checkout Page. Evid: 77.
     * Event description: Checkout Started Package Picker.
    
     * appId - Type: guid. Desc: app id
     *
     * appstoreId - Type: guid. Desc: unique guid for app_id, package and cycle. (e.g - App_1 , pro package, yearly cycle)
     *
     * payment_cycle - Type: numeric. Desc: 3 - monthly, 6- yearly etc.
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_packages - Type: numeric. Desc: number of packages offered by the app to upgrade.
     *
     * pp_origin - Type: string. Desc: Where did the package picker opened from
     *
     * referer - Type: url. Desc: url that upgrade came from
     *
     * referralAdditionalInfo - Type: string. Desc: Which button sent the user into upgrading the TPA funnel (ed_Settings dialog - favicon_upgrade_btn, ed_Settings dialog - url_upgrade_btn)
     *
     * vendorProductId - Type: string. Desc: vendor product id
     *
     * vertical - Type: string.
     * @param {externalPpCheckoutStartParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.externalPpCheckoutStart = function (params) {
        return this.bi.log(__assign({ evid: 77 }, params));
    };
    /**
    * @typedef {Object} __deprecated__85Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} value - {most_recent, most_liked, highest_rate, lowest_rate}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 85.
     * Event description: review system -> sort_by click.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * value - Type: string. Desc: {most_recent, most_liked, highest_rate, lowest_rate}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__85Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__85 = function (params) {
        return this.bi.log(__assign({ evid: 85 }, params));
    };
    /**
    * @typedef {Object} __deprecated__65Params
    * @property {GUID} esi - esi
    * @property {string} market - editor, dashboard etc.
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - back button (not in use). Evid: 65.
     * Event description: Going back in manage apps window.
    
     * esi - Type: guid. Desc: esi
     *
     * market - Type: string. Desc: editor, dashboard etc.
     *
     * vertical - Type: string.
     * @param {__deprecated__65Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__65 = function (params) {
        return this.bi.log(__assign({ evid: 65 }, params));
    };
    /**
    * @typedef {Object} appMarketOpenAppCategoryParams
    * @property {string} app_category - App category name (fitness, photography, marketing etc)
    * @property {GUID} esi - null
    * @property {string} market - market type - editor, dashboard, standalone
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {string} pageType - Type of page viewed ( Homepage, App page, Developer page , collection page etc)
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Open App Category. Evid: 112.
     * Event description: Open an entire app category for farther browsing.
    
     * app_category - Type: string. Desc: App category name (fitness, photography, marketing etc)
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market type - editor, dashboard, standalone
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * pageType - Type: string. Desc: Type of page viewed ( Homepage, App page, Developer page , collection page etc)
     *
     * vertical - Type: string.
     * @param {appMarketOpenAppCategoryParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketOpenAppCategory = function (params) {
        return this.bi.log(__assign({ evid: 112 }, params));
    };
    /**
    * @typedef {Object} collectionLoadedParams
    * @property {GUID} app_id1 - app_id1
    * @property {GUID} app_id2 - app_id2
    * @property {GUID} app_id3 - app_id3
    * @property {GUID} app_id4 - app_id4
    * @property {GUID} app_id5 - app_id5
    * @property {string} category - category of apps name (must-have-apps, social, forms, free apps, etc)
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - collection loaded. Evid: 58.
     * Event description: loading app market collection with the list of apps.
    When only 4 apps are available (missing the main vertical app) - we should populate values 2 through 5, leaving 1 empty. created by pavelk.
    
     * app_id1 - Type: guid. Desc: app_id1
     *
     * app_id2 - Type: guid. Desc: app_id2
     *
     * app_id3 - Type: guid. Desc: app_id3
     *
     * app_id4 - Type: guid. Desc: app_id4
     *
     * app_id5 - Type: guid. Desc: app_id5
     *
     * category - Type: string. Desc: category of apps name (must-have-apps, social, forms, free apps, etc)
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {collectionLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.collectionLoaded = function (params) {
        return this.bi.log(__assign({ evid: 58 }, params));
    };
    /**
    * @typedef {Object} __deprecated__102Params
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} source_page - {home_page/search}
    * @property {string} target_page - {home_page/search}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: click back (not in use). Evid: 102.
     * Event description: click back.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * source_page - Type: string. Desc: {home_page/search}
     *
     * target_page - Type: string. Desc: {home_page/search}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__102Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__102 = function (params) {
        return this.bi.log(__assign({ evid: 102 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1010Params
    * @property {GUID} esi - session id
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1010.
     * Event description: Split page loaded (create test app / submit a proposal for your app).
    
     * esi - Type: guid. Desc: session id
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1010Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1010 = function (params) {
        return this.bi.log(__assign({ evid: 1010 }, params));
    };
    /**
    * @typedef {Object} appMarketCancelAppReviewClickParams
    * @property {GUID} appId - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} tag_type - tag_type
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Cancel App Review Click. Evid: 108.
     * Event description: Clicking on cancel when review page is open for apps..
    
     * appId - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_type - Type: string. Desc: tag_type
     *
     * vertical - Type: string.
     * @param {appMarketCancelAppReviewClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketCancelAppReviewClick = function (params) {
        return this.bi.log(__assign({ evid: 108 }, params));
    };
    /**
    * @typedef {Object} appMarketBackToManageApps136Params
    * @property {GUID} appId - null if not exists
    * @property {GUID} esi - null
    * @property {string} market - what is the market (suppose to be only dashboard)
    * @property {GUID} msid - msid
    * @property {string} tag_name - tag name
    * @property {string} tag_type - (homepage, app page, collection etc)
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Back To Manage Apps. Evid: 136.
     * Event description: User from app market dashboard clicks on back to manage apps button..
    
     * appId - Type: guid. Desc: null if not exists
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what is the market (suppose to be only dashboard)
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_name - Type: string. Desc: tag name
     *
     * tag_type - Type: string. Desc: (homepage, app page, collection etc)
     *
     * vertical - Type: string.
     * @param {appMarketBackToManageApps136Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketBackToManageApps136 = function (params) {
        return this.bi.log(__assign({ evid: 136 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1033Params
    * @property {string} app_kind - Kind of app (travel, weddings, etc. - according to values in drop-down menu)
    * @property {Url} app_link - App's website
    * @property {string} app_name - Name of app
    * @property {string} app_platform - Other platforms the app is integrated with
    * @property {GUID} esi - session id
    * @property {string} phaseName - '2_intro'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1033.
     * Event description: Click next in the "intro" phase of the app proposal flow.
    
     * app_kind - Type: string. Desc: Kind of app (travel, weddings, etc. - according to values in drop-down menu)
     *
     * app_link - Type: url. Desc: App's website
     *
     * app_name - Type: string. Desc: Name of app
     *
     * app_platform - Type: string. Desc: Other platforms the app is integrated with
     *
     * esi - Type: guid. Desc: session id
     *
     * phaseName - Type: string. Desc: '2_intro'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1033Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1033 = function (params) {
        return this.bi.log(__assign({ evid: 1033 }, params));
    };
    /**
    * @typedef {Object} __deprecated__20Params
    * @property {string} category - {[market]_collection}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {string} origin - {ed_home}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: Not in use. Evid: 20.
     * Event description: click on open collection view.
    
     * category - Type: string. Desc: {[market]_collection}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {ed_home}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__20Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__20 = function (params) {
        return this.bi.log(__assign({ evid: 20 }, params));
    };
    /**
    * @typedef {Object} appMarketAppSupportedGeoSHoverParams
    * @property {GUID} app_id - guid
    * @property {GUID} esi - null
    * @property {string} market - editor dashboard
    * @property {string} marketVersion - 'new' else null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - App Supported Geo's - Hover. Evid: 702.
     * Event description: user hover over app geo supported.
    
     * app_id - Type: guid. Desc: guid
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor dashboard
     *
     * marketVersion - Type: string. Desc: 'new' else null
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketAppSupportedGeoSHoverParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppSupportedGeoSHover = function (params) {
        return this.bi.log(__assign({ evid: 702 }, params));
    };
    /**
    * @typedef {Object} appMarketDeleteModalClickOnCustomerCareParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {GUID} msid - msid
    * @property {string} tag_type - Where did the delete take place from?
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Delete Modal - Click On Customer Care. Evid: 141.
     * Event description: User clicks on contact Customer Care button in the delete modal.
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_type - Type: string. Desc: Where did the delete take place from?
     *
     * vertical - Type: string.
     * @param {appMarketDeleteModalClickOnCustomerCareParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDeleteModalClickOnCustomerCare = function (params) {
        return this.bi.log(__assign({ evid: 141 }, params));
    };
    /**
    * @typedef {Object} manageAppsOpenContextMenuParams
    * @property {GUID} appId - app id
    * @property {GUID} appInstanceId - app instance id
    * @property {GUID} esi - null
    * @property {string} market - what market ? (editor, dashboard etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Manage Apps - Open Context Menu. Evid: 94.
     * Event description: Manage Apps section in App Market. click on context menu (...).
    
     * appId - Type: guid. Desc: app id
     *
     * appInstanceId - Type: guid. Desc: app instance id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what market ? (editor, dashboard etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {manageAppsOpenContextMenuParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.manageAppsOpenContextMenu = function (params) {
        return this.bi.log(__assign({ evid: 94 }, params));
    };
    /**
    * @typedef {Object} marketOpenedParams
    * @property {GUID} esi - null
    * @property {boolean} is_first - (per user per site)
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {number} num_pending_apps - {0,1,2...}
    * @property {string} page_name - {'home, 'pending', 'app', 'search'}
    * @property {string} personalized - {general, online_store, music...}
    * @property {string} postreg_category - what is the postreg category of the site
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {[add panel 'view more apps' category], [sa category], [cart category]...}
    * @property {GUID} site_id - site_id
    * @property {string} tag_name - name of the specific tag, category name such as 'music' etc
    * @property {string} tag_type - type of tag, 'homepage','app page', 'category page' etc)
    * @property {number} ts - market loading time in ms
    * @property {number} ts_partial - loading time from previous step (after the SSR was loaded) in ms
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - App Market Opened. Evid: 11.
     * Event description: market opened.
    
     * esi - Type: guid.
     *
     * is_first - Type: bool. Desc: (per user per site)
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * num_pending_apps - Type: numeric. Desc: {0,1,2...}
     *
     * page_name - Type: string. Desc: {'home, 'pending', 'app', 'search'}
     *
     * personalized - Type: string. Desc: {general, online_store, music...}
     *
     * postreg_category - Type: string. Desc: what is the postreg category of the site
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {[add panel 'view more apps' category], [sa category], [cart category]...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * tag_name - Type: string. Desc: name of the specific tag, category name such as 'music' etc
     *
     * tag_type - Type: string. Desc: type of tag, 'homepage','app page', 'category page' etc)
     *
     * ts - Type: numeric. Desc: market loading time in ms
     *
     * ts_partial - Type: numeric. Desc: loading time from previous step (after the SSR was loaded) in ms
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {marketOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.marketOpened = function (params) {
        return this.bi.log(__assign({ evid: 11 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1001Params
    * @property {string} button_position - 'top_banner' for top banner, 'stats_banner' for the banner with App Market stats
    * @property {GUID} esi - session ID
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1001.
     * Event description: Click Start Now button on new Dev Center's homepage.
    
     * button_position - Type: string. Desc: 'top_banner' for top banner, 'stats_banner' for the banner with App Market stats
     *
     * esi - Type: guid. Desc: session ID
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1001Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1001 = function (params) {
        return this.bi.log(__assign({ evid: 1001 }, params));
    };
    /**
    * @typedef {Object} __deprecated__48Params
    * @property {GUID} app_id - app_id
    * @property {string} button_text - button_text
    * @property {GUID} esi - null
    * @property {string} market - {standalone,...}
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {featured, new, search....}
    * @property {number} sites_count - {1,2,3...}
    * @property {string} title - title
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 48.
     * Event description: site selector -> close click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * button_text - Type: string. Desc: button_text
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {standalone,...}
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {featured, new, search....}
     *
     * sites_count - Type: numeric. Desc: {1,2,3...}
     *
     * title - Type: string. Desc: title
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__48Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__48 = function (params) {
        return this.bi.log(__assign({ evid: 48 }, params));
    };
    /**
    * @typedef {Object} __deprecated__50Params
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} page_name - {modal, market, etc]
    * @property {GUID} site_id - site_id
    * @property {number} ts - number of ms from SSR to the click (some browsers don't support timing API, then send blank)
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 50.
     * Event description: Click before market is loaded, when it's not responsive yet..
    
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * page_name - Type: string. Desc: {modal, market, etc]
     *
     * site_id - Type: guid. Desc: site_id
     *
     * ts - Type: numeric. Desc: number of ms from SSR to the click (some browsers don't support timing API, then send blank)
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__50Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__50 = function (params) {
        return this.bi.log(__assign({ evid: 50 }, params));
    };
    /**
    * @typedef {Object} appMarketWidgetsNavigationClickParams
    * @property {string} direction - 'right' or 'left'
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - new
    * @property {GUID} msid - msid
    * @property {string} section - widget name
    * @property {string} tag_name - name of tag
    * @property {string} tag_type - type of tag
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Widgets - Navigation Click. Evid: 140.
     * Event description: user navigate in the widget section to right or left.
    
     * direction - Type: string. Desc: 'right' or 'left'
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: new
     *
     * msid - Type: guid. Desc: msid
     *
     * section - Type: string. Desc: widget name
     *
     * tag_name - Type: string. Desc: name of tag
     *
     * tag_type - Type: string. Desc: type of tag
     *
     * vertical - Type: string.
     * @param {appMarketWidgetsNavigationClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketWidgetsNavigationClick = function (params) {
        return this.bi.log(__assign({ evid: 140 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1031Params
    * @property {GUID} esi - session id
    * @property {string} phaseName - '1_company_info', '2_intro', '3_details', '4_app_value', '5_pricing'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1031.
     * Event description: Click back in any phase of the app proposal flow.
    
     * esi - Type: guid. Desc: session id
     *
     * phaseName - Type: string. Desc: '1_company_info', '2_intro', '3_details', '4_app_value', '5_pricing'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1031Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1031 = function (params) {
        return this.bi.log(__assign({ evid: 1031 }, params));
    };
    /**
    * @typedef {Object} __deprecated__83Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {number} rate - {1,2...5}
    * @property {GUID} site_id - site_id
    * @property {string} type - {post,edit}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 83.
     * Event description: review system -> post review.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * rate - Type: numeric. Desc: {1,2...5}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * type - Type: string. Desc: {post,edit}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__83Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__83 = function (params) {
        return this.bi.log(__assign({ evid: 83 }, params));
    };
    /**
    * @typedef {Object} manageAppsContextMenuActionParams
    * @property {GUID} appId - app id
    * @property {GUID} appInstanceId - app instance id
    * @property {string} contextAction - action taken inside the context menu within the Manage App section in the app market
    * @property {GUID} esi - null
    * @property {string} market - what market ? (editor, dashboard etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Manage Apps - Context Menu Action. Evid: 96.
     * Event description: Manage Apps - Context Menu Action.
    
     * appId - Type: guid. Desc: app id
     *
     * appInstanceId - Type: guid. Desc: app instance id
     *
     * contextAction - Type: string. Desc: action taken inside the context menu within the Manage App section in the app market
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what market ? (editor, dashboard etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {manageAppsContextMenuActionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.manageAppsContextMenuAction = function (params) {
        return this.bi.log(__assign({ evid: 96 }, params));
    };
    /**
    * @typedef {Object} appMarketManageAppsActionRequiredClickParams
    * @property {string} action_cta - cta action (claim app, upgrade app, add info, etc)
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - market (dashboard, editor standalone
    * @property {GUID} msid - msid
    * @property {Url} url - article url
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Manage Apps - Action Required Click. Evid: 9.
     * Event description: In the Manage Apps tab, when user clicks on an action requirement of an app..
    
     * action_cta - Type: string. Desc: cta action (claim app, upgrade app, add info, etc)
     *
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market (dashboard, editor standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * url - Type: url. Desc: article url
     *
     * vertical - Type: string.
     * @param {appMarketManageAppsActionRequiredClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketManageAppsActionRequiredClick = function (params) {
        return this.bi.log(__assign({ evid: 9 }, params));
    };
    /**
    * @typedef {Object} unificationGoToClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} go_to_market - {editor,dashboard}
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {unification_modal, pending_category}
    * @property {string} pending_source - {unification_modal, pending_hybrid, cart}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} value - {search_term}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket -unification -> 'go to' click. Evid: 93.
     * Event description: unification -> 'go to' click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * go_to_market - Type: string. Desc: {editor,dashboard}
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {unification_modal, pending_category}
     *
     * pending_source - Type: string. Desc: {unification_modal, pending_hybrid, cart}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * value - Type: string. Desc: {search_term}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {unificationGoToClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.unificationGoToClick = function (params) {
        return this.bi.log(__assign({ evid: 93 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1032Params
    * @property {string} company - Name of company
    * @property {Url} company_website - Company's website
    * @property {GUID} esi - session id
    * @property {string} number_of_people - According to the values in the drop-down menu
    * @property {string} phaseName - '1_company_info'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1032.
     * Event description: Click next in the "company info" phase of the app proposal flow.
    
     * company - Type: string. Desc: Name of company
     *
     * company_website - Type: url. Desc: Company's website
     *
     * esi - Type: guid. Desc: session id
     *
     * number_of_people - Type: string. Desc: According to the values in the drop-down menu
     *
     * phaseName - Type: string. Desc: '1_company_info'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1032Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1032 = function (params) {
        return this.bi.log(__assign({ evid: 1032 }, params));
    };
    /**
    * @typedef {Object} externalPpCheckoutSuccessParams
    * @property {GUID} appId - app id
    * @property {string} billing_flow - where the billing took place? (external, internal)
    * @property {string} coupon_name - name of coupon used to get discount or special offer
    * @property {number} payment_cycle - cycle_id = 3 is monthly, 6 is yearly etc.
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} pp_origin - where was the upgrade click initiated
    * @property {string} vendorProductId - vendor product id
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - App Upgrade - Checkout Success. Evid: 78.
     * Event description: Checkout succeeded for Package Picker.
    
     * appId - Type: guid. Desc: app id
     *
     * billing_flow - Type: string. Desc: where the billing took place? (external, internal)
     *
     * coupon_name - Type: string. Desc: name of coupon used to get discount or special offer
     *
     * payment_cycle - Type: numeric. Desc: cycle_id = 3 is monthly, 6 is yearly etc.
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * pp_origin - Type: string. Desc: where was the upgrade click initiated
     *
     * vendorProductId - Type: string. Desc: vendor product id
     *
     * vertical - Type: string.
     * @param {externalPpCheckoutSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.externalPpCheckoutSuccess = function (params) {
        return this.bi.log(__assign({ evid: 78 }, params));
    };
    /**
    * @typedef {Object} searchSearchFocusParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} search_location - search_location
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Click on search bar (Search Focus). Evid: 14.
     * Event description: search -> search focus.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * search_location - Type: string. Desc: search_location
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {searchSearchFocusParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.searchSearchFocus = function (params) {
        return this.bi.log(__assign({ evid: 14 }, params));
    };
    /**
    * @typedef {Object} appMarketDemoLinkClickedParams
    * @property {GUID} app_id - app id
    * @property {string} category - what is the apps category? {featured, new, search, home, must-have-apps....}
    * @property {GUID} esi - null
    * @property {string} market - What market? (dashboard, editor, standalone etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - what is the site postreg? {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Demo link clicked. Evid: 100.
     * Event description: when a user clicks on a demo link to an app provided by the developer, from the app page in the app market..
    
     * app_id - Type: guid. Desc: app id
     *
     * category - Type: string. Desc: what is the apps category? {featured, new, search, home, must-have-apps....}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: What market? (dashboard, editor, standalone etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string. Desc: what is the site postreg? {general, online_store, music...}
     * @param {appMarketDemoLinkClickedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDemoLinkClicked = function (params) {
        return this.bi.log(__assign({ evid: 100 }, params));
    };
    /**
    * @typedef {Object} unificationUnificationModalLoadedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {unification_modal....}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} value - {search_term}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - unification - unification modal loaded. Evid: 90.
     * Event description: unification -> unification modal loaded.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {unification_modal....}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * value - Type: string. Desc: {search_term}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {unificationUnificationModalLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.unificationUnificationModalLoaded = function (params) {
        return this.bi.log(__assign({ evid: 90 }, params));
    };
    /**
    * @typedef {Object} manageAppsAddAppParams
    * @property {GUID} esi - null
    * @property {string} market - what market ? (editor, dashboard etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} referral_info - 'manage_apps' , 'finance_tab' etc
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Go To App Market - Add More Apps Click. Evid: 98.
     * Event description: Manage Apps - go back to market and add more apps..
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what market ? (editor, dashboard etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: 'manage_apps' , 'finance_tab' etc
     *
     * vertical - Type: string.
     * @param {manageAppsAddAppParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.manageAppsAddApp = function (params) {
        return this.bi.log(__assign({ evid: 98 }, params));
    };
    /**
    * @typedef {Object} appMarketDeleteModalModalOpenedParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - editor or dashboard
    * @property {string} marketVersion - market version ('new' or null)
    * @property {GUID} msid - msid
    * @property {string} origin - click origin from? ('context_menu' etc)
    * @property {string} tag_type - Where did the delete take place from?
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Delete Modal - Modal Opened. Evid: 6.
     * Event description: Delete modal opened to user.
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor or dashboard
     *
     * marketVersion - Type: string. Desc: market version ('new' or null)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: click origin from? ('context_menu' etc)
     *
     * tag_type - Type: string. Desc: Where did the delete take place from?
     *
     * vertical - Type: string.
     * @param {appMarketDeleteModalModalOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDeleteModalModalOpened = function (params) {
        return this.bi.log(__assign({ evid: 6 }, params));
    };
    /**
    * @typedef {Object} externalPpContactSupportWhenFailedParams
    * @property {GUID} appId - app id
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vendorProductId - vendor product id
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - TPA Purchase Page - Contact Support (When Failed). Evid: 80.
     * Event description: Dev Center - when Checkout failed External Package Picker - user clicked on 'contact support'.
    
     * appId - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vendorProductId - Type: string. Desc: vendor product id
     *
     * vertical - Type: string.
     * @param {externalPpContactSupportWhenFailedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.externalPpContactSupportWhenFailed = function (params) {
        return this.bi.log(__assign({ evid: 80 }, params));
    };
    /**
    * @typedef {Object} manageAppsDeletePendingAppClickParams
    * @property {GUID} appId - app id
    * @property {GUID} appInstanceId - app instance id
    * @property {GUID} esi - null
    * @property {string} market - what market ? (editor, dashboard etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Manage Apps - Delete Pending App Click. Evid: 97.
     * Event description: Manage Apps - Delete Pending App Click.
    
     * appId - Type: guid. Desc: app id
     *
     * appInstanceId - Type: guid. Desc: app instance id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what market ? (editor, dashboard etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {manageAppsDeletePendingAppClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.manageAppsDeletePendingAppClick = function (params) {
        return this.bi.log(__assign({ evid: 97 }, params));
    };
    /**
    * @typedef {Object} appMarketWidgetLoadedParams
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} origin - what is the origin of the widget?
    * @property {string} vertical - null
    * @property {string} widget_name - what is the widget name
    **/
    /**
     * Name: App Market - Widget Loaded. Evid: 123.
     * Event description: Widget is loaded to user, for example - recommended apps widget in the business manager homepage..
    
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: what is the origin of the widget?
     *
     * vertical - Type: string.
     *
     * widget_name - Type: string. Desc: what is the widget name
     * @param {appMarketWidgetLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketWidgetLoaded = function (params) {
        return this.bi.log(__assign({ evid: 123 }, params));
    };
    /**
    * @typedef {Object} appModalOpenAppModalClickParams
    * @property {GUID} app_id - app_id
    * @property {string} category - {featured, new, search, pending, all_carousel, my_apps....}
    * @property {GUID} collimp_id - collection impression guid
    * @property {GUID} esi - null
    * @property {GUID} impression_id - Impression id - unique for which impression
    * @property {number} index - The listing ranking of the number in the presented page.
    * @property {string} market - {editor,dashboard,standalone, da_widget, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {[add panel 'view more apps' category], [sa category], [cart category]...}
    * @property {string} search_term - {html, analytics,...}
    * @property {string} section - In which section is that app located?
    * @property {number} section_index - from top = 0, to last = 0+n. what is the ranking order of the section presented?
    * @property {string} section_name - what is the title in the section presented.
    * @property {string} slug_id - id of consistent set of apps
    * @property {string} tag_name - unique name of actual tag ('must have apps', 'photography' etc)
    * @property {string} tag_type - category, collection, homepage etc.
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    * @property {string} widget_name - If user clicked on an app cube that was located inside a widget. what is the widget name, else null
    * @property {string} widget_referral - is flow referred from widget
    **/
    /**
     * Name: AppMarket - App Box Click. Evid: 21.
     * Event description: User clicks on app cube to get more info.
    
     * app_id - Type: guid. Desc: app_id
     *
     * category - Type: string. Desc: {featured, new, search, pending, all_carousel, my_apps....}
     *
     * collimp_id - Type: guid. Desc: collection impression guid
     *
     * esi - Type: guid.
     *
     * impression_id - Type: guid. Desc: Impression id - unique for which impression
     *
     * index - Type: numeric. Desc: The listing ranking of the number in the presented page.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {[add panel 'view more apps' category], [sa category], [cart category]...}
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * section - Type: string. Desc: In which section is that app located?
     *
     * section_index - Type: numeric. Desc: from top = 0, to last = 0+n. what is the ranking order of the section presented?
     *
     * section_name - Type: string. Desc: what is the title in the section presented.
     *
     * slug_id - Type: string. Desc: id of consistent set of apps
     *
     * tag_name - Type: string. Desc: unique name of actual tag ('must have apps', 'photography' etc)
     *
     * tag_type - Type: string. Desc: category, collection, homepage etc.
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     *
     * widget_name - Type: string. Desc: If user clicked on an app cube that was located inside a widget. what is the widget name, else null
     *
     * widget_referral - Type: string. Desc: is flow referred from widget
     * @param {appModalOpenAppModalClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appModalOpenAppModalClick = function (params) {
        return this.bi.log(__assign({ evid: 21 }, params));
    };
    /**
    * @typedef {Object} appMarketReviewImpressionParams
    * @property {GUID} appId - app id
    * @property {GUID} collimp_id - collection impression id (guid)
    * @property {boolean} dev_comment - did the developer commented on the review?
    * @property {GUID} esi - null
    * @property {string} market - dashboard, editor, standalone
    * @property {GUID} msid - msid
    * @property {string} referral_info - what is the referral that referred to the app page
    * @property {string} referral_name - home page, collections,  category...
    * @property {string} referral_tag_name - what is the tag_name that referred to this install
    * @property {string} review_body - the body of the review, what was written
    * @property {number} review_index - the index of the review: 0 is the first review that will shown in the app page
    * @property {number} reviewsScore - review score: 1-5
    * @property {string} slug_id - id of consistent set of apps
    * @property {string} tag_name - what is the specific tag from the specific app page
    * @property {string} tag_type - app page...
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Review Impression. Evid: 160.
     * Event description: reviews impression- review impressions are visible in the app page..
    
     * appId - Type: guid. Desc: app id
     *
     * collimp_id - Type: guid. Desc: collection impression id (guid)
     *
     * dev_comment - Type: bool. Desc: did the developer commented on the review?
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: dashboard, editor, standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: what is the referral that referred to the app page
     *
     * referral_name - Type: string. Desc: home page, collections,  category...
     *
     * referral_tag_name - Type: string. Desc: what is the tag_name that referred to this install
     *
     * review_body - Type: string. Desc: the body of the review, what was written
     *
     * review_index - Type: numeric. Desc: the index of the review: 0 is the first review that will shown in the app page
     *
     * reviewsScore - Type: numeric. Desc: review score: 1-5
     *
     * slug_id - Type: string. Desc: id of consistent set of apps
     *
     * tag_name - Type: string. Desc: what is the specific tag from the specific app page
     *
     * tag_type - Type: string. Desc: app page...
     *
     * vertical - Type: string.
     * @param {appMarketReviewImpressionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketReviewImpression = function (params) {
        return this.bi.log(__assign({ evid: 160 }, params));
    };
    /**
    * @typedef {Object} appMarketAppCollectionImpressionsParams
    * @property {string} apps_list - list of app_id by the order they are presented from top left, seperated by ","
    * @property {number} collection_index - what is the index of the collection in the page (from top to bottom)
    * @property {GUID} collimp_id - collection impression id (guid)
    * @property {GUID} esi - null
    * @property {string} market - market type - editor, dashboard, standalone
    * @property {GUID} msid - msid
    * @property {number} number_of_apps - how many apps presented in the collection
    * @property {string} tag_name - name of the specific tag (must have apps, music apps, free collection etc).
    * @property {string} tag_type - collection, category
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - App Collection Impressions. Evid: 128.
     * Event description: Section.
    
     * apps_list - Type: string. Desc: list of app_id by the order they are presented from top left, seperated by ","
     *
     * collection_index - Type: numeric. Desc: what is the index of the collection in the page (from top to bottom)
     *
     * collimp_id - Type: guid. Desc: collection impression id (guid)
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market type - editor, dashboard, standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * number_of_apps - Type: numeric. Desc: how many apps presented in the collection
     *
     * tag_name - Type: string. Desc: name of the specific tag (must have apps, music apps, free collection etc).
     *
     * tag_type - Type: string. Desc: collection, category
     *
     * vertical - Type: string.
     * @param {appMarketAppCollectionImpressionsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppCollectionImpressions = function (params) {
        return this.bi.log(__assign({ evid: 128 }, params));
    };
    /**
    * @typedef {Object} __deprecated__18Params
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} value - {get_social, sell_online,...}
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 18.
     * Event description: welcome screen -> internal click.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * value - Type: string. Desc: {get_social, sell_online,...}
     *
     * vertical - Type: string.
     * @param {__deprecated__18Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__18 = function (params) {
        return this.bi.log(__assign({ evid: 18 }, params));
    };
    /**
    * @typedef {Object} appMarketAppImageGalleryInteractionParams
    * @property {string} action - "more" or "less" click
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - What market? (dashboard, editor, standalone etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - what is the site postreg? {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Manage Apps - Read More Action. Evid: 99.
     * Event description: user browse through the apps image gallery.
    
     * action - Type: string. Desc: "more" or "less" click
     *
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: What market? (dashboard, editor, standalone etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string. Desc: what is the site postreg? {general, online_store, music...}
     * @param {appMarketAppImageGalleryInteractionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppImageGalleryInteraction = function (params) {
        return this.bi.log(__assign({ evid: 99 }, params));
    };
    /**
    * @typedef {Object} __deprecated__49Params
    * @property {GUID} app_id - app_id
    * @property {string} button_text - button_text
    * @property {GUID} esi - null
    * @property {string} market - {standalone,...}
    * @property {GUID} msid - msid
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {featured, new, search....}
    * @property {GUID} site_id - site_id
    * @property {number} sites_count - {1,2,3...}
    * @property {string} title - title
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 49.
     * Event description: site selector -> select site.
    
     * app_id - Type: guid. Desc: app_id
     *
     * button_text - Type: string. Desc: button_text
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {standalone,...}
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {featured, new, search....}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * sites_count - Type: numeric. Desc: {1,2,3...}
     *
     * title - Type: string. Desc: title
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__49Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__49 = function (params) {
        return this.bi.log(__assign({ evid: 49 }, params));
    };
    /**
    * @typedef {Object} appMarketLikeUnlikeAppReviewParams
    * @property {GUID} appId - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Like App Review. Evid: 110.
     * Event description: AppMarket - Like /Dislike App Review.
    
     * appId - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketLikeUnlikeAppReviewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketLikeUnlikeAppReview = function (params) {
        return this.bi.log(__assign({ evid: 110 }, params));
    };
    /**
    * @typedef {Object} appMarketCloseDialogBoxOfConnectDomainXParams
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - determines which market initiated this event (editor or dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Close Dialog Box of Connect domain [x]. Evid: 75.
     * Event description: When trying to install Apps that require premium wix site, prompt will be opened, This BI event is sent when box is closed..
    
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: determines which market initiated this event (editor or dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketCloseDialogBoxOfConnectDomainXParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketCloseDialogBoxOfConnectDomainX = function (params) {
        return this.bi.log(__assign({ evid: 75 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1036Params
    * @property {string} app_price - App requested price - according to values in drop-down menu
    * @property {GUID} esi - session id
    * @property {string} monetization_method - Monetization method for the app ('freemium', 'free_trial', etc. - according to values in drop down menu)
    * @property {string} phaseName - '5_pricing'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1036.
     * Event description: Click submit proposal in the "pricing" phase of the app proposal flow.
    
     * app_price - Type: string. Desc: App requested price - according to values in drop-down menu
     *
     * esi - Type: guid. Desc: session id
     *
     * monetization_method - Type: string. Desc: Monetization method for the app ('freemium', 'free_trial', etc. - according to values in drop down menu)
     *
     * phaseName - Type: string. Desc: '5_pricing'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1036Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1036 = function (params) {
        return this.bi.log(__assign({ evid: 1036 }, params));
    };
    /**
    * @typedef {Object} appMarketAppPageAppRequirementClickParams
    * @property {string} action - other countries, 'site requirement'
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - editor, dashboard, standalone
    * @property {GUID} msid - msid of site
    * @property {string} tag_name - name of the tag
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - App Page - App Requirement Click. Evid: 172.
     * Event description: App Market - App Page - Click on Reviews Number.
    
     * action - Type: string. Desc: other countries, 'site requirement'
     *
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor, dashboard, standalone
     *
     * msid - Type: guid. Desc: msid of site
     *
     * tag_name - Type: string. Desc: name of the tag
     *
     * vertical - Type: string.
     * @param {appMarketAppPageAppRequirementClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppPageAppRequirementClick = function (params) {
        return this.bi.log(__assign({ evid: 172 }, params));
    };
    /**
    * @typedef {Object} permissionsPermissionsModalLoadedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} collimp_id - collection impression guid
    * @property {string} consentVersion - old_consent, new_consent
    * @property {GUID} esi - null
    * @property {string} flow_type - consent or update_app_version
    * @property {string} market - editor, dashboard, adi, third_party
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {string} modalType - consent , existing
    * @property {GUID} msid - msid
    * @property {number} num_of_permissions - number of permissions requested by consent modal
    * @property {string} referral_info - referral_info
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Modal Loaded. Evid: 41.
     * Event description: permissions -> permissions modal loaded.
    
     * app_id - Type: guid. Desc: app_id
     *
     * collimp_id - Type: guid. Desc: collection impression guid
     *
     * consentVersion - Type: string. Desc: old_consent, new_consent
     *
     * esi - Type: guid.
     *
     * flow_type - Type: string. Desc: consent or update_app_version
     *
     * market - Type: string. Desc: editor, dashboard, adi, third_party
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * modalType - Type: string. Desc: consent , existing
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_permissions - Type: numeric. Desc: number of permissions requested by consent modal
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {permissionsPermissionsModalLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.permissionsPermissionsModalLoaded = function (params) {
        return this.bi.log(__assign({ evid: 41 }, params));
    };
    /**
    * @typedef {Object} tpaNewPremiumFlowCyclePageOpenedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} app_site_id - app_site_id. the instance id. key for app in msid
    * @property {GUID} esi - null
    * @property {string} market - source of click for upgrade (editor, dashboard)
    * @property {GUID} msid - msid
    * @property {string} package_id - the package id
    * @property {string} package_name - the package name the string itself
    * @property {string} pp_origin - pp_origin {settings,GFPP,BM}
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMArket - Package Picker - Cycle Page. Evid: 401.
     * Event description: Event is triggered whenever the cycle choosing page (subscription) is opened.
    
     * app_id - Type: guid. Desc: app_id
     *
     * app_site_id - Type: guid. Desc: app_site_id. the instance id. key for app in msid
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: source of click for upgrade (editor, dashboard)
     *
     * msid - Type: guid. Desc: msid
     *
     * package_id - Type: string. Desc: the package id
     *
     * package_name - Type: string. Desc: the package name the string itself
     *
     * pp_origin - Type: string. Desc: pp_origin {settings,GFPP,BM}
     *
     * vertical - Type: string.
     * @param {tpaNewPremiumFlowCyclePageOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.tpaNewPremiumFlowCyclePageOpened = function (params) {
        return this.bi.log(__assign({ evid: 401 }, params));
    };
    /**
    * @typedef {Object} appMarketAppImpressionParams
    * @property {string} app_id - app id
    * @property {string} app_subcategory - if app was shown in a category page where sub categories were selected - name them.
    * @property {string} badge_name - name of badge of app box (e.g - Premium Benefit)
    * @property {GUID} esi - null
    * @property {GUID} impression_id - impression id - unique for which impression
    * @property {string} impression_type - type of exposure of app (app cube, search suggestion etc)
    * @property {number} index - The listing ranking of the number in the presented page.
    * @property {string} market - market type - editor, dashboard, standalone
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} search_term - search_term used to expose this app
    * @property {string} section - section in which app box is located
    * @property {number} section_index - from top = 0, to last = 0+n. what is the ranking order of the section presented?
    * @property {string} slug_id - id of consistent set of apps
    * @property {string} tag_name - name of the specific tag (must have apps, music apps, free collection etc).
    * @property {string} tag_type - collection, category
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - App Impression. Evid: 113.
     * Event description: When an app is loaded and visible to user, meaning it was exposed for the user to engage with..
    
     * app_id - Type: string. Desc: app id
     *
     * app_subcategory - Type: string. Desc: if app was shown in a category page where sub categories were selected - name them.
     *
     * badge_name - Type: string. Desc: name of badge of app box (e.g - Premium Benefit)
     *
     * esi - Type: guid.
     *
     * impression_id - Type: guid. Desc: impression id - unique for which impression
     *
     * impression_type - Type: string. Desc: type of exposure of app (app cube, search suggestion etc)
     *
     * index - Type: numeric. Desc: The listing ranking of the number in the presented page.
     *
     * market - Type: string. Desc: market type - editor, dashboard, standalone
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * search_term - Type: string. Desc: search_term used to expose this app
     *
     * section - Type: string. Desc: section in which app box is located
     *
     * section_index - Type: numeric. Desc: from top = 0, to last = 0+n. what is the ranking order of the section presented?
     *
     * slug_id - Type: string. Desc: id of consistent set of apps
     *
     * tag_name - Type: string. Desc: name of the specific tag (must have apps, music apps, free collection etc).
     *
     * tag_type - Type: string. Desc: collection, category
     *
     * vertical - Type: string.
     * @param {appMarketAppImpressionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppImpression = function (params) {
        return this.bi.log(__assign({ evid: 113 }, params));
    };
    /**
    * @typedef {Object} __deprecated__37Params
    * @property {GUID} esi - null
    * @property {boolean} is_first - (per user+site)
    * @property {string} market - {dashboard}
    * @property {GUID} msid - msid
    * @property {number} num_pending_apps - {0,1,2...}
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {featured, new, search....}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: no in use. Evid: 37.
     * Event description: my apps -> my apps page view.
    
     * esi - Type: guid.
     *
     * is_first - Type: bool. Desc: (per user+site)
     *
     * market - Type: string. Desc: {dashboard}
     *
     * msid - Type: guid. Desc: msid
     *
     * num_pending_apps - Type: numeric. Desc: {0,1,2...}
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {featured, new, search....}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__37Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__37 = function (params) {
        return this.bi.log(__assign({ evid: 37 }, params));
    };
    /**
    * @typedef {Object} openAppClickParams
    * @property {GUID} app_id - app_id
    * @property {string} category - category
    * @property {GUID} esi - null
    * @property {number} index - The listing ranking of the number in the presented page.
    * @property {number} item_position - {1,2,3...}
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {string} method - {direct_add , modal}
    * @property {GUID} msid - msid
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} search_term - {html, analytics,...}
    * @property {string} section - In which section is that app located?
    * @property {GUID} site_id - site_id
    * @property {string} tag_name - name of the specific tag ('must have apps' , 'music' etc)
    * @property {string} tag_type - type of page opened - category, homepage, app page etc
    * @property {string} target - {editor, dashboard}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - open app click. Evid: 33.
     * Event description: click on open app button.
    
     * app_id - Type: guid. Desc: app_id
     *
     * category - Type: string. Desc: category
     *
     * esi - Type: guid.
     *
     * index - Type: numeric. Desc: The listing ranking of the number in the presented page.
     *
     * item_position - Type: numeric. Desc: {1,2,3...}
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * method - Type: string. Desc: {direct_add , modal}
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * section - Type: string. Desc: In which section is that app located?
     *
     * site_id - Type: guid. Desc: site_id
     *
     * tag_name - Type: string. Desc: name of the specific tag ('must have apps' , 'music' etc)
     *
     * tag_type - Type: string. Desc: type of page opened - category, homepage, app page etc
     *
     * target - Type: string. Desc: {editor, dashboard}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {openAppClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.openAppClick = function (params) {
        return this.bi.log(__assign({ evid: 33 }, params));
    };
    /**
    * @typedef {Object} __deprecated__87Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} type - {like, dislike}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 87.
     * Event description: review system -> like click.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * type - Type: string. Desc: {like, dislike}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__87Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__87 = function (params) {
        return this.bi.log(__assign({ evid: 87 }, params));
    };
    /**
    * @typedef {Object} manageAppsTabClickParams
    * @property {GUID} esi - null
    * @property {string} market - market name (editor, dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} tabName - name of tab (app market, manage apps)
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Header Click. Evid: 64.
     * Event description: When in App Market, clicking on Tabs (App Market, Manage Apps).
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market name (editor, dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * tabName - Type: string. Desc: name of tab (app market, manage apps)
     *
     * vertical - Type: string.
     * @param {manageAppsTabClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.manageAppsTabClick = function (params) {
        return this.bi.log(__assign({ evid: 64 }, params));
    };
    /**
    * @typedef {Object} appMarketPostAppReviewParams
    * @property {string} actionType - add_review, edit_review
    * @property {GUID} appId - app_id
    * @property {string} appScore - ( 1,2,3,4,5 ) , what is the score that user gave the app
    * @property {GUID} esi - null
    * @property {boolean} has_description - Is it only title? or also description?
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} post_type - is a new review post, or a comment on a review
    * @property {string} review_body - review_body
    * @property {GUID} review_id - what is the id of the review
    * @property {string} review_title - title of the review given by the user that post the review
    * @property {string} tag_type - tag_type
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Post App Review. Evid: 106.
     * Event description: Posting an app review.
    
     * actionType - Type: string. Desc: add_review, edit_review
     *
     * appId - Type: guid. Desc: app_id
     *
     * appScore - Type: string. Desc: ( 1,2,3,4,5 ) , what is the score that user gave the app
     *
     * esi - Type: guid.
     *
     * has_description - Type: bool. Desc: Is it only title? or also description?
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * post_type - Type: string. Desc: is a new review post, or a comment on a review
     *
     * review_body - Type: string. Desc: review_body
     *
     * review_id - Type: guid. Desc: what is the id of the review
     *
     * review_title - Type: string. Desc: title of the review given by the user that post the review
     *
     * tag_type - Type: string. Desc: tag_type
     *
     * vertical - Type: string.
     * @param {appMarketPostAppReviewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPostAppReview = function (params) {
        return this.bi.log(__assign({ evid: 106 }, params));
    };
    /**
    * @typedef {Object} wishlistWishlistClickParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {number} num_results - {0,1,2,3..}
    * @property {string} origin - {search, ...}
    * @property {string} search_term - [search_term]
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Wishlist - wishlist click. Evid: 51.
     * Event description: wishlist -> wishlist click.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * num_results - Type: numeric. Desc: {0,1,2,3..}
     *
     * origin - Type: string. Desc: {search, ...}
     *
     * search_term - Type: string. Desc: [search_term]
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {wishlistWishlistClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistWishlistClick = function (params) {
        return this.bi.log(__assign({ evid: 51 }, params));
    };
    /**
    * @typedef {Object} __deprecated__66Params
    * @property {string} app_id - app_id
    * @property {GUID} esi - esi
    * @property {string} market - editor, dashboard etc.
    * @property {string} vertical - null
    **/
    /**
     * Name: Business Manager App Market - Delete App Click (not in use). Evid: 66.
     * Event description: Business Manager App Market - Delete App Click.
    
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid. Desc: esi
     *
     * market - Type: string. Desc: editor, dashboard etc.
     *
     * vertical - Type: string.
     * @param {__deprecated__66Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__66 = function (params) {
        return this.bi.log(__assign({ evid: 66 }, params));
    };
    /**
    * @typedef {Object} __deprecated__47Params
    * @property {GUID} app_id - app_id
    * @property {string} button_text - button_text
    * @property {GUID} esi - null
    * @property {string} market - {standalone,...}
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {featured, new, search....}
    * @property {number} sites_count - {1,2,3...}
    * @property {string} title - title
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 47.
     * Event description: site selector -> site selector loaded.
    
     * app_id - Type: guid. Desc: app_id
     *
     * button_text - Type: string. Desc: button_text
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {standalone,...}
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {featured, new, search....}
     *
     * sites_count - Type: numeric. Desc: {1,2,3...}
     *
     * title - Type: string. Desc: title
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__47Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__47 = function (params) {
        return this.bi.log(__assign({ evid: 47 }, params));
    };
    /**
    * @typedef {Object} __deprecated__91Params
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - market = 'new' if new market, else null
    * @property {GUID} msid - msid
    * @property {string} pending_source - {unification_modal, pending_hybrid, cart}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Manage Apps - Install Pending App. Evid: 91.
     * Event description: unification -> (server) app added to pending.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: market = 'new' if new market, else null
     *
     * msid - Type: guid. Desc: msid
     *
     * pending_source - Type: string. Desc: {unification_modal, pending_hybrid, cart}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__91Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__91 = function (params) {
        return this.bi.log(__assign({ evid: 91 }, params));
    };
    /**
    * @typedef {Object} appMarketPendingForDeleteModalCloseModalParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Pending for Delete Modal - close modal. Evid: 124.
     * Event description: when user is trying to delete an editor component app from the BM , he will get this modal to ask him to move to Editor.closing this modal will send this bi event.
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketPendingForDeleteModalCloseModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPendingForDeleteModalCloseModal = function (params) {
        return this.bi.log(__assign({ evid: 124 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1101Params
    * @property {GUID} esi - Session ID
    * @property {string} search_term - The string the user searched
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1101.
     * Event description: Type in a search string in the search bar.
    
     * esi - Type: guid. Desc: Session ID
     *
     * search_term - Type: string. Desc: The string the user searched
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1101Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1101 = function (params) {
        return this.bi.log(__assign({ evid: 1101 }, params));
    };
    /**
    * @typedef {Object} appMarketMobileAlertForInstallMoveToDesktopParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Mobile alert for install - move to desktop. Evid: 129.
     * Event description: User try to install an app from the  mobile standalone appmarket and we open a modal to tell him to move to desktop..
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketMobileAlertForInstallMoveToDesktopParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketMobileAlertForInstallMoveToDesktop = function (params) {
        return this.bi.log(__assign({ evid: 129 }, params));
    };
    /**
    * @typedef {Object} appMarketSortReviewsParams
    * @property {GUID} appId - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} value - {most_recent, most_liked, highest_rate, lowest_rate}
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Sort Reviews. Evid: 109.
     * Event description: Sorting apps reviews.
    
     * appId - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * value - Type: string. Desc: {most_recent, most_liked, highest_rate, lowest_rate}
     *
     * vertical - Type: string.
     * @param {appMarketSortReviewsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSortReviews = function (params) {
        return this.bi.log(__assign({ evid: 109 }, params));
    };
    /**
    * @typedef {Object} searchAutocompleteClickParams
    * @property {GUID} app_id - app_id
    * @property {string} auto_search_term - auto_search_term
    * @property {string} category - category
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} search_term - search_term
    * @property {GUID} site_id - site_id
    * @property {string} type - {search_term, app, category}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - search autocomplete click. Evid: 29.
     * Event description: search autocomplete click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * auto_search_term - Type: string. Desc: auto_search_term
     *
     * category - Type: string. Desc: category
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * search_term - Type: string. Desc: search_term
     *
     * site_id - Type: guid. Desc: site_id
     *
     * type - Type: string. Desc: {search_term, app, category}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {searchAutocompleteClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.searchAutocompleteClick = function (params) {
        return this.bi.log(__assign({ evid: 29 }, params));
    };
    /**
    * @typedef {Object} collectionOverrideSiteProfileParams
    * @property {string} cat - {design, accommodation, business...}
    * @property {GUID} esi - null
    * @property {string} market - {editor, dashboard, standalone, etc.)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - override site category. Evid: 45.
     * Event description: override site profile, when choosing a site profile in the appmarket (e.g online-store, photography , music etc) - this will affect the default apps presented in the home page and collection order..
    
     * cat - Type: string. Desc: {design, accommodation, business...}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor, dashboard, standalone, etc.)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {collectionOverrideSiteProfileParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.collectionOverrideSiteProfile = function (params) {
        return this.bi.log(__assign({ evid: 45 }, params));
    };
    /**
    * @typedef {Object} appMarketSpotlightArticleParams
    * @property {string} action_cta - cta action (claim app, upgradde app, add info, etc)
    * @property {GUID} app_id - null
    * @property {GUID} esi - null
    * @property {string} market - market (dashboard, editor standalone
    * @property {GUID} msid - msid
    * @property {Url} url - article url
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Manage Apps - Action Required Impression. Evid: 114.
     * Event description: In the Manage Apps tab, when user is exposed to an action requirement of an app..
    
     * action_cta - Type: string. Desc: cta action (claim app, upgradde app, add info, etc)
     *
     * app_id - Type: guid.
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market (dashboard, editor standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * url - Type: url. Desc: article url
     *
     * vertical - Type: string.
     * @param {appMarketSpotlightArticleParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSpotlightArticle = function (params) {
        return this.bi.log(__assign({ evid: 114 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1020Params
    * @property {GUID} esi - session id
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1020.
     * Event description: Get ready for app proposal page loaded.
    
     * esi - Type: guid. Desc: session id
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1020Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1020 = function (params) {
        return this.bi.log(__assign({ evid: 1020 }, params));
    };
    /**
    * @typedef {Object} appMarketSupportMailModalClosedXParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {GUID} instance_id - instance_id
    * @property {boolean} is_app_installed - true or false
    * @property {string} market - editor or dashboard
    * @property {string} marketVersion - send 'new' for new app market, else null
    * @property {GUID} msid - msid
    * @property {string} origin - origin
    * @property {string} tag_type - app page or manage apps etc
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Support Mail - Modal Closed [x]. Evid: 701.
     * Event description: Support Modal Opened.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * is_app_installed - Type: bool. Desc: true or false
     *
     * market - Type: string. Desc: editor or dashboard
     *
     * marketVersion - Type: string. Desc: send 'new' for new app market, else null
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin
     *
     * tag_type - Type: string. Desc: app page or manage apps etc
     *
     * vertical - Type: string.
     * @param {appMarketSupportMailModalClosedXParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSupportMailModalClosedX = function (params) {
        return this.bi.log(__assign({ evid: 701 }, params));
    };
    /**
    * @typedef {Object} appMarketTerminatorLearnHowClickParams
    * @property {GUID} esi - null
    * @property {string} experiment_name - what is the subject / name of experiment
    * @property {string} market - market (editor or dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} search_term - the keyword that was searched
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - 'Terminator' - 'Learn How' Click. Evid: 169.
     * Event description: When user clicks on 'learn how' after terminator box suggested a feature outside of app market..
    
     * esi - Type: guid.
     *
     * experiment_name - Type: string. Desc: what is the subject / name of experiment
     *
     * market - Type: string. Desc: market (editor or dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * search_term - Type: string. Desc: the keyword that was searched
     *
     * vertical - Type: string.
     * @param {appMarketTerminatorLearnHowClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketTerminatorLearnHowClick = function (params) {
        return this.bi.log(__assign({ evid: 169 }, params));
    };
    /**
    * @typedef {Object} externalPpCheckoutFailedParams
    * @property {GUID} appId - app id
    * @property {string} billing_flow - where the billing took place? (external, internal)
    * @property {number} payment_cycle - cycle_id = 3 is monthly, 6 is yearly etc.
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vendorProductId - vendor product id
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - App Upgrade - Checkout Failed. Evid: 79.
     * Event description: Checkout failed Package Picker.
    
     * appId - Type: guid. Desc: app id
     *
     * billing_flow - Type: string. Desc: where the billing took place? (external, internal)
     *
     * payment_cycle - Type: numeric. Desc: cycle_id = 3 is monthly, 6 is yearly etc.
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vendorProductId - Type: string. Desc: vendor product id
     *
     * vertical - Type: string.
     * @param {externalPpCheckoutFailedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.externalPpCheckoutFailed = function (params) {
        return this.bi.log(__assign({ evid: 79 }, params));
    };
    /**
    * @typedef {Object} appMarketAppPageClickOnReviewsNumberParams
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - editor, dashboard, standalone
    * @property {GUID} msid - msid of site
    * @property {string} tag_name - name of the tag
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - App Page - Click on Reviews Number. Evid: 170.
     * Event description: App Market - App Page - Click on Reviews Number.
    
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor, dashboard, standalone
     *
     * msid - Type: guid. Desc: msid of site
     *
     * tag_name - Type: string. Desc: name of the tag
     *
     * vertical - Type: string.
     * @param {appMarketAppPageClickOnReviewsNumberParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppPageClickOnReviewsNumber = function (params) {
        return this.bi.log(__assign({ evid: 170 }, params));
    };
    /**
    * @typedef {Object} __deprecated__71Params
    * @property {string} addition_method - {direct_add, modal}
    * @property {GUID} app_id - app_id
    * @property {string} category - {featured, featured_carousel, business_tools_carousel....}
    * @property {GUID} esi - null
    * @property {string} market - {premium_cart}
    * @property {string} modal_tab_name - {overview, demo...}
    * @property {GUID} msid - msid
    * @property {string} referral_info - {email_1, email_2,ed_market, da_NF, da_market, domain}
    * @property {string} referral_info_category - {[ed category], [da category]...}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 71.
     * Event description: premium cart -> add app to cart click.
    
     * addition_method - Type: string. Desc: {direct_add, modal}
     *
     * app_id - Type: guid. Desc: app_id
     *
     * category - Type: string. Desc: {featured, featured_carousel, business_tools_carousel....}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {premium_cart}
     *
     * modal_tab_name - Type: string. Desc: {overview, demo...}
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {email_1, email_2,ed_market, da_NF, da_market, domain}
     *
     * referral_info_category - Type: string. Desc: {[ed category], [da category]...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__71Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__71 = function (params) {
        return this.bi.log(__assign({ evid: 71 }, params));
    };
    /**
    * @typedef {Object} appMarketDeleteModalDeleteAppApprovedParams
    * @property {GUID} app_id - app id
    * @property {string} delete_details - Delete reason explained by user (optional)
    * @property {string} delete_reason - what is the chosen reason to delete
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - market version (new or null)
    * @property {GUID} msid - msid
    * @property {string} origin - click origin from? ('context_menu' etc)
    * @property {number} reason_index - the position of the reason in the list
    * @property {string} tag_type - Where did the delete take place from?
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Delete Modal - Delete App Approved. Evid: 7.
     * Event description: User clicks on Delete App call to action button.
    
     * app_id - Type: guid. Desc: app id
     *
     * delete_details - Type: string. Desc: Delete reason explained by user (optional)
     *
     * delete_reason - Type: string. Desc: what is the chosen reason to delete
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: market version (new or null)
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: click origin from? ('context_menu' etc)
     *
     * reason_index - Type: numeric. Desc: the position of the reason in the list
     *
     * tag_type - Type: string. Desc: Where did the delete take place from?
     *
     * vertical - Type: string.
     * @param {appMarketDeleteModalDeleteAppApprovedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDeleteModalDeleteAppApproved = function (params) {
        return this.bi.log(__assign({ evid: 7 }, params));
    };
    /**
    * @typedef {Object} __deprecated__68Params
    * @property {string} app_id - app_id
    * @property {string} clickType - what was clicked? 'exit','ok'
    * @property {GUID} esi - esi
    * @property {string} market - editor, dashboard etc.
    * @property {string} vertical - null
    **/
    /**
     * Name: Delete App - Prompt Click (not in use). Evid: 68.
     * Event description: Choosing what to do when getting explanation window after clicking 'delete app' (trash can symbol).
    
     * app_id - Type: string. Desc: app_id
     *
     * clickType - Type: string. Desc: what was clicked? 'exit','ok'
     *
     * esi - Type: guid. Desc: esi
     *
     * market - Type: string. Desc: editor, dashboard etc.
     *
     * vertical - Type: string.
     * @param {__deprecated__68Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__68 = function (params) {
        return this.bi.log(__assign({ evid: 68 }, params));
    };
    /**
    * @typedef {Object} appMarketConnectDomainClickParams
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - determines which market initiated this event (editor or dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Connect Domain Click. Evid: 74.
     * Event description: Clicking on "Connect Domain".
    
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: determines which market initiated this event (editor or dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketConnectDomainClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketConnectDomainClick = function (params) {
        return this.bi.log(__assign({ evid: 74 }, params));
    };
    /**
    * @typedef {Object} appMarketToastClosedXParams
    * @property {string} action_cta - action required
    * @property {string} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - dashboard, editor etc
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Toast - Closed [x]. Evid: 152.
     * Event description: user closes the toast presented.
    
     * action_cta - Type: string. Desc: action required
     *
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: dashboard, editor etc
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketToastClosedXParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketToastClosedX = function (params) {
        return this.bi.log(__assign({ evid: 152 }, params));
    };
    /**
    * @typedef {Object} appMarketSupportMailModalOpenedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {GUID} instance_id - instance_id
    * @property {boolean} is_app_installed - true or false
    * @property {string} market - editor or dashboard
    * @property {string} marketVersion - send 'new' for new app market, else null
    * @property {GUID} msid - msid
    * @property {string} origin - origin in tag_type
    * @property {string} tag_type - tag of page - app page, manage apps etc.
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Support Mail - Modal Opened. Evid: 669.
     * Event description: Support Modal Opened.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * is_app_installed - Type: bool. Desc: true or false
     *
     * market - Type: string. Desc: editor or dashboard
     *
     * marketVersion - Type: string. Desc: send 'new' for new app market, else null
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: origin in tag_type
     *
     * tag_type - Type: string. Desc: tag of page - app page, manage apps etc.
     *
     * vertical - Type: string.
     * @param {appMarketSupportMailModalOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSupportMailModalOpened = function (params) {
        return this.bi.log(__assign({ evid: 669 }, params));
    };
    /**
    * @typedef {Object} appModalAppModalOpenedParams
    * @property {GUID} app_id - app_id
    * @property {string} category - {add_panel: text, image..., market: featured, new, search, pending, all_carousel....}
    * @property {string} component_type - {tpa,ed_component,list,blog...}
    * @property {GUID} esi - null
    * @property {number} item_position - {1,2,3,...}
    * @property {string} market - {editor,dashboard,standalone, da_widget, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {[add panel 'view more apps' category], [sa category], [cart category]...}
    * @property {string} search_term - {html, analytics,...}
    * @property {string} section - {related_apps.......}
    * @property {GUID} site_id - site_id
    * @property {number} ts - market loading time in ms
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: App Market - App Modal Opened. Evid: 22.
     * Event description: When a user clicks on an App in the App Market, a modal will be opened to present data about the App (overview, pricing, reviews, developer info..
    
     * app_id - Type: guid. Desc: app_id
     *
     * category - Type: string. Desc: {add_panel: text, image..., market: featured, new, search, pending, all_carousel....}
     *
     * component_type - Type: string. Desc: {tpa,ed_component,list,blog...}
     *
     * esi - Type: guid.
     *
     * item_position - Type: numeric. Desc: {1,2,3,...}
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {[add panel 'view more apps' category], [sa category], [cart category]...}
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * section - Type: string. Desc: {related_apps.......}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * ts - Type: numeric. Desc: market loading time in ms
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {appModalAppModalOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appModalAppModalOpened = function (params) {
        return this.bi.log(__assign({ evid: 22 }, params));
    };
    /**
    * @typedef {Object} tpaNewPremiumFlowPpOpenedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} app_site_id - app_site_id. the instance id. key for app in msid
    * @property {GUID} esi - null
    * @property {string} market - source of click (editor, dashboard)
    * @property {GUID} msid - msid
    * @property {number} num_of_packages - num_of_packages presented in the PP
    * @property {string} pp_origin - pp_origin {settings,GFPP,BM}
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Open Package Picker. Evid: 400.
     * Event description: Event is triggered whenever the PP is opened.
    
     * app_id - Type: guid. Desc: app_id
     *
     * app_site_id - Type: guid. Desc: app_site_id. the instance id. key for app in msid
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: source of click (editor, dashboard)
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_packages - Type: numeric. Desc: num_of_packages presented in the PP
     *
     * pp_origin - Type: string. Desc: pp_origin {settings,GFPP,BM}
     *
     * vertical - Type: string.
     * @param {tpaNewPremiumFlowPpOpenedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.tpaNewPremiumFlowPpOpened = function (params) {
        return this.bi.log(__assign({ evid: 400 }, params));
    };
    /**
    * @typedef {Object} collectionNewSiteCategorySelectedParams
    * @property {string} category - {[market]_collection}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {ed_home}
    * @property {string} origin_category - {[market]_collection}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Site Category Select. Evid: 40.
     * Event description: click on View Apps button in Site Category pop up.
    
     * category - Type: string. Desc: {[market]_collection}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {ed_home}
     *
     * origin_category - Type: string. Desc: {[market]_collection}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {collectionNewSiteCategorySelectedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.collectionNewSiteCategorySelected = function (params) {
        return this.bi.log(__assign({ evid: 40 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1030Params
    * @property {GUID} esi - session id
    * @property {string} phaseName - '1_company_info', '2_intro', '3_details', '4_app_value', '5_pricing'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1030.
     * Event description: App proposal page loaded. phase_name indicates the step number in the app proposal flow.
    
     * esi - Type: guid. Desc: session id
     *
     * phaseName - Type: string. Desc: '1_company_info', '2_intro', '3_details', '4_app_value', '5_pricing'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1030Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1030 = function (params) {
        return this.bi.log(__assign({ evid: 1030 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1035Params
    * @property {string} app_uniqueness - What makes the app unique
    * @property {GUID} esi - session id
    * @property {string} how_can_app_help_users - How can the app help Wix users
    * @property {string} phaseName - '4_app_value'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {string} similar_apps - Similar apps in the Market
    * @property {string} target_audience - Target audience for the app
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1035.
     * Event description: Click next in the "app value" phase of the app proposal flow.
    
     * app_uniqueness - Type: string. Desc: What makes the app unique
     *
     * esi - Type: guid. Desc: session id
     *
     * how_can_app_help_users - Type: string. Desc: How can the app help Wix users
     *
     * phaseName - Type: string. Desc: '4_app_value'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * similar_apps - Type: string. Desc: Similar apps in the Market
     *
     * target_audience - Type: string. Desc: Target audience for the app
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1035Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1035 = function (params) {
        return this.bi.log(__assign({ evid: 1035 }, params));
    };
    /**
    * @typedef {Object} appMarketPostConsentLoadedParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - for new market = 'new', else null
    * @property {GUID} msid - msid
    * @property {string} post_consent_type - type of the post conten
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Post Consent - Loaded. Evid: 121.
     * Event description: After Consent flow for app install is finished, user will be prompt to take action in some cases. when presented to so , this event will be sent..
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: for new market = 'new', else null
     *
     * msid - Type: guid. Desc: msid
     *
     * post_consent_type - Type: string. Desc: type of the post conten
     *
     * vertical - Type: string.
     * @param {appMarketPostConsentLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPostConsentLoaded = function (params) {
        return this.bi.log(__assign({ evid: 121 }, params));
    };
    /**
    * @typedef {Object} appModalTabClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} tab_name - {demo, reviews, reviews_link}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - app modal tab click. Evid: 23.
     * Event description: Inside an app modal, clicking on tabs (pricing, reviews, developer info, demo etc).
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * tab_name - Type: string. Desc: {demo, reviews, reviews_link}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {appModalTabClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appModalTabClick = function (params) {
        return this.bi.log(__assign({ evid: 23 }, params));
    };
    /**
    * @typedef {Object} __deprecated__84Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 84.
     * Event description: review system -> cancel click.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__84Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__84 = function (params) {
        return this.bi.log(__assign({ evid: 84 }, params));
    };
    /**
    * @typedef {Object} ssrLoadedParams
    * @property {GUID} esi - null
    * @property {boolean} is_first - (per user per site) not used
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {string} referral_info_category - {[add panel 'view more apps' category], [sa category], [cart category]...} not used
    * @property {GUID} site_id - site_id
    * @property {number} ts - loading time in ms (some browsers don't support timing API, then 0 is send)
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - SSR Loaded. Evid: 46.
     * Event description: SSR loaded, ssr means - Server Side Loading. when loading the app market, first the "looks" is loaded, then the images, than the links..
    
     * esi - Type: guid.
     *
     * is_first - Type: bool. Desc: (per user per site) not used
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * referral_info_category - Type: string. Desc: {[add panel 'view more apps' category], [sa category], [cart category]...} not used
     *
     * site_id - Type: guid. Desc: site_id
     *
     * ts - Type: numeric. Desc: loading time in ms (some browsers don't support timing API, then 0 is send)
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {ssrLoadedParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.ssrLoaded = function (params) {
        return this.bi.log(__assign({ evid: 46 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1034Params
    * @property {string} app_description - Description of app
    * @property {string} app_feature_1 - App feature no. 1
    * @property {string} app_feature_2 - App feature no. 2
    * @property {string} app_feature_3 - App feature no. 3
    * @property {GUID} esi - session id
    * @property {string} needed_data - Data needed from Wix for the app to work
    * @property {string} phaseName - '3_details'
    * @property {GUID} proposal_id - Unique ID for each proposal
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1034.
     * Event description: Click next in the "details" phase of the app proposal flow.
    
     * app_description - Type: string. Desc: Description of app
     *
     * app_feature_1 - Type: string. Desc: App feature no. 1
     *
     * app_feature_2 - Type: string. Desc: App feature no. 2
     *
     * app_feature_3 - Type: string. Desc: App feature no. 3
     *
     * esi - Type: guid. Desc: session id
     *
     * needed_data - Type: string. Desc: Data needed from Wix for the app to work
     *
     * phaseName - Type: string. Desc: '3_details'
     *
     * proposal_id - Type: guid. Desc: Unique ID for each proposal
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1034Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1034 = function (params) {
        return this.bi.log(__assign({ evid: 1034 }, params));
    };
    /**
    * @typedef {Object} appModalDevNameLinkClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {header, dev_info}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Developer Name link click. Evid: 24.
     * Event description: app modal -> dev name link click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {header, dev_info}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {appModalDevNameLinkClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appModalDevNameLinkClick = function (params) {
        return this.bi.log(__assign({ evid: 24 }, params));
    };
    /**
    * @typedef {Object} appMarketPageScrollParams
    * @property {GUID} esi - null
    * @property {string} market - dashboard, editor, standalone
    * @property {string} marketVersion - market version = 'new'
    * @property {GUID} msid - msid
    * @property {string} pageType - Type of page viewed ( Homepage, App page, Developer page , collection page, category etc)
    * @property {number} pixels_scrolled - amount of pixels scrolled down from page start
    * @property {string} tag_name - name of tag, if exists (category - video, music etc. collection - must have apps, free apps ... etc)
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Page Scroll. Evid: 119.
     * Event description: How much did the user scrolled down while browsing different pages in the App Market..
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: dashboard, editor, standalone
     *
     * marketVersion - Type: string. Desc: market version = 'new'
     *
     * msid - Type: guid. Desc: msid
     *
     * pageType - Type: string. Desc: Type of page viewed ( Homepage, App page, Developer page , collection page, category etc)
     *
     * pixels_scrolled - Type: numeric. Desc: amount of pixels scrolled down from page start
     *
     * tag_name - Type: string. Desc: name of tag, if exists (category - video, music etc. collection - must have apps, free apps ... etc)
     *
     * vertical - Type: string.
     * @param {appMarketPageScrollParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPageScroll = function (params) {
        return this.bi.log(__assign({ evid: 119 }, params));
    };
    /**
    * @typedef {Object} __deprecated__34Params
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {dashboard}
    * @property {GUID} msid - msid
    * @property {string} origin - {my_apps,...}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 34.
     * Event description: dashboard apps -> remove dashboard app click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {dashboard}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {my_apps,...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__34Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__34 = function (params) {
        return this.bi.log(__assign({ evid: 34 }, params));
    };
    /**
    * @typedef {Object} appMarketAppPageClickReadMoreDescriptionParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - What market? (dashboard, editor, standalone etc)
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket- App Page - Click Read More Description. Evid: 134.
     * Event description: when a user clicks on the "Read More" button (app description), from the app page in the app market..
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: What market? (dashboard, editor, standalone etc)
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketAppPageClickReadMoreDescriptionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppPageClickReadMoreDescription = function (params) {
        return this.bi.log(__assign({ evid: 134 }, params));
    };
    /**
    * @typedef {Object} __deprecated__63Params
    * @property {GUID} esi - null
    * @property {string} market - market (dashboard, editor etc)
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Help  Button [?] (not in use). Evid: 63.
     * Event description: App Market - Help  Button [?].
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market (dashboard, editor etc)
     *
     * vertical - Type: string.
     * @param {__deprecated__63Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__63 = function (params) {
        return this.bi.log(__assign({ evid: 63 }, params));
    };
    /**
    * @typedef {Object} appMarketSiteRequirementsTagClickParams
    * @property {GUID} app_id - guid
    * @property {GUID} esi - null
    * @property {string} market - editor dashboard
    * @property {string} marketVersion - 'new' else null
    * @property {GUID} msid - msid
    * @property {GUID} required_app_id - required_app_id of tagged app (not the app_id of the app page!)
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market -  Site Requirements Tag - Click. Evid: 703.
     * Event description: user clicks on site requirements.
    
     * app_id - Type: guid. Desc: guid
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor dashboard
     *
     * marketVersion - Type: string. Desc: 'new' else null
     *
     * msid - Type: guid. Desc: msid
     *
     * required_app_id - Type: guid. Desc: required_app_id of tagged app (not the app_id of the app page!)
     *
     * vertical - Type: string.
     * @param {appMarketSiteRequirementsTagClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSiteRequirementsTagClick = function (params) {
        return this.bi.log(__assign({ evid: 703 }, params));
    };
    /**
    * @typedef {Object} externalPpMoreAppsWhenSuccessParams
    * @property {GUID} appId - app id
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vendorProductId - vendor product id
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - External PP - View Your Apps (When success). Evid: 88.
     * Event description: Dev Center - when Checkout succeeded External Package Picker - user clicked on 'view more apps'.
    
     * appId - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vendorProductId - Type: string. Desc: vendor product id
     *
     * vertical - Type: string.
     * @param {externalPpMoreAppsWhenSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.externalPpMoreAppsWhenSuccess = function (params) {
        return this.bi.log(__assign({ evid: 88 }, params));
    };
    /**
    * @typedef {Object} searchSearchResultsParams
    * @property {GUID} esi - null
    * @property {GUID} first_result_app_id - [first_result_app_id]
    * @property {string} market - {editor,dashboard,standalone}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {number} num_results - {0,1,2,...}
    * @property {string} search_term - {html, analytics,...}
    * @property {string} search_type - autocomplete , trending, recommended
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Search Results Page. Evid: 15.
     * Event description: User interact with the search bar in the AppMarket. after typing a search term user will either: hit 'enter', choose an 'Autocomplete' option from search results, 'exit' the search..
    
     * esi - Type: guid.
     *
     * first_result_app_id - Type: guid. Desc: [first_result_app_id]
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * num_results - Type: numeric. Desc: {0,1,2,...}
     *
     * search_term - Type: string. Desc: {html, analytics,...}
     *
     * search_type - Type: string. Desc: autocomplete , trending, recommended
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {searchSearchResultsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.searchSearchResults = function (params) {
        return this.bi.log(__assign({ evid: 15 }, params));
    };
    /**
    * @typedef {Object} appMarketConsentPageAllowAndInstall115Params
    * @property {GUID} app_id - app_id
    * @property {GUID} collimp_id - collection impression guid
    * @property {string} consentVersion - new consent, old consent
    * @property {GUID} esi - null
    * @property {string} flow_type - consent or update_app_version
    * @property {string} market - editor, dashboard market?
    * @property {string} marketVersion - new market or old market
    * @property {GUID} msid - msid
    * @property {number} num_of_permissions - number of permissions requested by the installer
    * @property {string} referral_info - referral_info
    * @property {string} vertical - what is the vertical of the site
    **/
    /**
     * Name: AppMarket - Modal Page - Allow Permissions. Evid: 115.
     * Event description: User allows permission to app requests, and proceeds to install app.
    
     * app_id - Type: guid. Desc: app_id
     *
     * collimp_id - Type: guid. Desc: collection impression guid
     *
     * consentVersion - Type: string. Desc: new consent, old consent
     *
     * esi - Type: guid.
     *
     * flow_type - Type: string. Desc: consent or update_app_version
     *
     * market - Type: string. Desc: editor, dashboard market?
     *
     * marketVersion - Type: string. Desc: new market or old market
     *
     * msid - Type: guid. Desc: msid
     *
     * num_of_permissions - Type: numeric. Desc: number of permissions requested by the installer
     *
     * referral_info - Type: string. Desc: referral_info
     *
     * vertical - Type: string. Desc: what is the vertical of the site
     * @param {appMarketConsentPageAllowAndInstall115Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketConsentPageAllowAndInstall115 = function (params) {
        return this.bi.log(__assign({ evid: 115 }, params));
    };
    /**
    * @typedef {Object} appMarketToastClickOnCtaParams
    * @property {string} action_cta - action required
    * @property {string} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - dashboard, editor etc
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Toast Click on CTA. Evid: 151.
    
    
     * action_cta - Type: string. Desc: action required
     *
     * app_id - Type: string. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: dashboard, editor etc
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketToastClickOnCtaParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketToastClickOnCta = function (params) {
        return this.bi.log(__assign({ evid: 151 }, params));
    };
    /**
    * @typedef {Object} appMarketUpdateAppApproveUpdateParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {GUID} instance_id - instance_id
    * @property {string} market - market
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Update App - Approve Update (Not In Use!) Merged. Evid: 133.
     * Event description: User approve update in the update modal.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * market - Type: string. Desc: market
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketUpdateAppApproveUpdateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketUpdateAppApproveUpdate = function (params) {
        return this.bi.log(__assign({ evid: 133 }, params));
    };
    /**
    * @typedef {Object} appMarketTerminatorPresenteToUserParams
    * @property {GUID} esi - null
    * @property {string} experiment_name - what is the subject / name of experiment
    * @property {string} market - market (editor or dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} search_term - the keyword that was searched
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - 'Terminator' - Presented to user. Evid: 69.
     * Event description: Wix 'Terminator' is an option that opens when a user is searching the app market for a feature that exists in wix , but not as an app. this will.
    
     * esi - Type: guid.
     *
     * experiment_name - Type: string. Desc: what is the subject / name of experiment
     *
     * market - Type: string. Desc: market (editor or dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * search_term - Type: string. Desc: the keyword that was searched
     *
     * vertical - Type: string.
     * @param {appMarketTerminatorPresenteToUserParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketTerminatorPresenteToUser = function (params) {
        return this.bi.log(__assign({ evid: 69 }, params));
    };
    /**
    * @typedef {Object} appMarketAppPageReadMoreReviewsClickParams
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - editor, dashboard, standalone
    * @property {string} marketVersion - new
    * @property {GUID} msid - msid of site
    * @property {string} tag_name - name of the tag
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - App Page - Read More Reviews Click. Evid: 171.
     * Event description: App Market - App Page - Click on Reviews Number.
    
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor, dashboard, standalone
     *
     * marketVersion - Type: string. Desc: new
     *
     * msid - Type: guid. Desc: msid of site
     *
     * tag_name - Type: string. Desc: name of the tag
     *
     * vertical - Type: string.
     * @param {appMarketAppPageReadMoreReviewsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppPageReadMoreReviewsClick = function (params) {
        return this.bi.log(__assign({ evid: 171 }, params));
    };
    /**
    * @typedef {Object} appmarketPackagePickerToggleCycleClickParams
    * @property {GUID} app_id - app_id
    * @property {string} cycle_click - what cycle did the user clicked on
    * @property {GUID} esi - null
    * @property {string} market - editor, dashboard etc
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMArket - Package Picker - Toggle Cycle Click. Evid: 402.
     * Event description: Event is triggered whenever the user toggles between the cycles shown..
    
     * app_id - Type: guid. Desc: app_id
     *
     * cycle_click - Type: string. Desc: what cycle did the user clicked on
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: editor, dashboard etc
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appmarketPackagePickerToggleCycleClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appmarketPackagePickerToggleCycleClick = function (params) {
        return this.bi.log(__assign({ evid: 402 }, params));
    };
    /**
    * @typedef {Object} wishlistSuccessMessageCloseParams
    * @property {string} closing_method - {x, done, click_out}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Wishlist - success message closed. Evid: 56.
     * Event description: wishlist -> success message -> close.
    
     * closing_method - Type: string. Desc: {x, done, click_out}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {wishlistSuccessMessageCloseParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistSuccessMessageClose = function (params) {
        return this.bi.log(__assign({ evid: 56 }, params));
    };
    /**
    * @typedef {Object} appMarketClickOnAppReviewsParams
    * @property {GUID} app_id - app id
    * @property {string} category - what is the apps category? {featured, new, search, home, must-have-apps....}
    * @property {GUID} esi - null
    * @property {string} market - What market? (dashboard, editor, standalone etc)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - what is the site postreg? {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - App Rating Score - Click. Evid: 89.
     * Event description: user clicks on app review images in the market, could be the 'star' image or the 'comments' image..
    
     * app_id - Type: guid. Desc: app id
     *
     * category - Type: string. Desc: what is the apps category? {featured, new, search, home, must-have-apps....}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: What market? (dashboard, editor, standalone etc)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string. Desc: what is the site postreg? {general, online_store, music...}
     * @param {appMarketClickOnAppReviewsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketClickOnAppReviews = function (params) {
        return this.bi.log(__assign({ evid: 89 }, params));
    };
    /**
    * @typedef {Object} appMarketDashboardWidgetExploreMoreAppsClickParams
    * @property {GUID} esi - null
    * @property {string} marketVersion - if new market = 'new' else null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Dashboard Widget - Explore More Apps Click. Evid: 165.
     * Event description: User clicks on explore more apps in the business manager widget panel..
    
     * esi - Type: guid.
     *
     * marketVersion - Type: string. Desc: if new market = 'new' else null
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketDashboardWidgetExploreMoreAppsClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketDashboardWidgetExploreMoreAppsClick = function (params) {
        return this.bi.log(__assign({ evid: 165 }, params));
    };
    /**
    * @typedef {Object} appMarketOpenManageAppsParams
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - 'new' for new market
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Open Manage Apps. Evid: 4.
     * Event description: when user is opening the manage apps window.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: 'new' for new market
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketOpenManageAppsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketOpenManageApps = function (params) {
        return this.bi.log(__assign({ evid: 4 }, params));
    };
    /**
    * @typedef {Object} __deprecated__67Params
    * @property {GUID} esi - null
    * @property {string} market - {standalone,...}
    * @property {string} referral_info - {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 67.
     * Event description: standalone -> new to wix banner click.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {standalone,...}
     *
     * referral_info - Type: string. Desc: {email_1, email_2, google, ed_market_button, ed_add_panel, da_NF, da_market, da_widget, da_in_app, sa_explore, sa_footer, premium_cart.}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__67Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__67 = function (params) {
        return this.bi.log(__assign({ evid: 67 }, params));
    };
    /**
    * @typedef {Object} appMarketAppPageScrollPageParams
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - dashboard, editor, standalone
    * @property {string} marketVersion - new
    * @property {GUID} msid - msid
    * @property {string} page_part - what is the part in the page that was exposed ( reviews, pricing plans, overview etc)
    * @property {number} page_part_index - the order of the part from top to bottom (1, 2, ,3 ...)
    * @property {string} tag_name - name of tag, if exists (category - video, music etc. collection - must have apps, free apps ... etc)
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - App Page - Scroll Page. Evid: 130.
     * Event description: How much did the user scrolled down while browsing the app page in the App Market..
    
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: dashboard, editor, standalone
     *
     * marketVersion - Type: string. Desc: new
     *
     * msid - Type: guid. Desc: msid
     *
     * page_part - Type: string. Desc: what is the part in the page that was exposed ( reviews, pricing plans, overview etc)
     *
     * page_part_index - Type: numeric. Desc: the order of the part from top to bottom (1, 2, ,3 ...)
     *
     * tag_name - Type: string. Desc: name of tag, if exists (category - video, music etc. collection - must have apps, free apps ... etc)
     *
     * vertical - Type: string.
     * @param {appMarketAppPageScrollPageParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppPageScrollPage = function (params) {
        return this.bi.log(__assign({ evid: 130 }, params));
    };
    /**
    * @typedef {Object} appMarketReviewAppNotInstalledAlertParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Review - App Not Installed Alert. Evid: 403.
     * Event description: App Market - Review - App Not Installed Alert.
    user attempt to review an app that has never been previously installed by that user - and will be blocked from posting a review..
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketReviewAppNotInstalledAlertParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketReviewAppNotInstalledAlert = function (params) {
        return this.bi.log(__assign({ evid: 403 }, params));
    };
    /**
    * @typedef {Object} __deprecated__1000Params
    * @property {GUID} esi - session id
    * @property {Url} referral_url - URL from which the visitor reached the page
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: not in use. Evid: 1000.
     * Event description: Homepage loaded for the new Dev Center..
    
     * esi - Type: guid. Desc: session id
     *
     * referral_url - Type: url. Desc: URL from which the visitor reached the page
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__1000Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__1000 = function (params) {
        return this.bi.log(__assign({ evid: 1000 }, params));
    };
    /**
    * @typedef {Object} clickOnMenuParams
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} page_id - {home_page/search}
    * @property {GUID} site_id - site_id
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - click on menu. Evid: 101.
     * Event description: click on menu.
    
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * page_id - Type: string. Desc: {home_page/search}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {clickOnMenuParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnMenu = function (params) {
        return this.bi.log(__assign({ evid: 101 }, params));
    };
    /**
    * @typedef {Object} appMarketAppInstallationFailedClientParams
    * @property {GUID} app_id - app_id
    * @property {string} app_subcategory - what is the app sub-category of the category
    * @property {GUID} esi - null
    * @property {string} fail_reason - fail reason of installation
    * @property {number} index - When apps are loaded on the screen for a user, what is the ranking order that the app was given
    * @property {string} installType - What type of install? (API, App Builder, Share URL, normal, other)
    * @property {GUID} instance_id - app instance id
    * @property {string} market - editor, dashboard, adi, add-panel
    * @property {GUID} msid - msid
    * @property {string} tag_name - what is the specific tag from which the app was installed from
    * @property {string} tag_type - what is the type of app tag? category, collection etc
    * @property {string} version_of_app - app version
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - App Installation Failed (Client). Evid: 998.
     * Event description: App Installation Failed , Client BI for rich data..
    
     * app_id - Type: guid. Desc: app_id
     *
     * app_subcategory - Type: string. Desc: what is the app sub-category of the category
     *
     * esi - Type: guid.
     *
     * fail_reason - Type: string. Desc: fail reason of installation
     *
     * index - Type: numeric. Desc: When apps are loaded on the screen for a user, what is the ranking order that the app was given
     *
     * installType - Type: string. Desc: What type of install? (API, App Builder, Share URL, normal, other)
     *
     * instance_id - Type: guid. Desc: app instance id
     *
     * market - Type: string. Desc: editor, dashboard, adi, add-panel
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_name - Type: string. Desc: what is the specific tag from which the app was installed from
     *
     * tag_type - Type: string. Desc: what is the type of app tag? category, collection etc
     *
     * version_of_app - Type: string. Desc: app version
     *
     * vertical - Type: string.
     * @param {appMarketAppInstallationFailedClientParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppInstallationFailedClient = function (params) {
        return this.bi.log(__assign({ evid: 998 }, params));
    };
    /**
    * @typedef {Object} appMarketUpdateAppClickUpdateParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {GUID} instance_id - instance_id
    * @property {string} market - market
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Update App - Click Update. Evid: 131.
     * Event description: user click on upgrade app.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * market - Type: string. Desc: market
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketUpdateAppClickUpdateParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketUpdateAppClickUpdate = function (params) {
        return this.bi.log(__assign({ evid: 131 }, params));
    };
    /**
    * @typedef {Object} categoryClickParams
    * @property {string} category - {new, my_apps,...}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {welcome_screen, direct,...}
    * @property {GUID} site_id - site_id
    * @property {string} subcategory_name - subcategory name
    * @property {string} tag_name - tag_name
    * @property {string} tag_type - tag type
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    * @property {string} widget_name - null
    **/
    /**
     * Name: AppMarket - Click to See More Apps of Category/Collection. Evid: 12.
     * Event description: Choosing an app category from the categories menu in the app market.
    
     * category - Type: string. Desc: {new, my_apps,...}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {welcome_screen, direct,...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * subcategory_name - Type: string. Desc: subcategory name
     *
     * tag_name - Type: string. Desc: tag_name
     *
     * tag_type - Type: string. Desc: tag type
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     *
     * widget_name - Type: string.
     * @param {categoryClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.categoryClick = function (params) {
        return this.bi.log(__assign({ evid: 12 }, params));
    };
    /**
    * @typedef {Object} wishlistSentParams
    * @property {string} description - description
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {number} num_results - {0,1,2,3..}
    * @property {string} origin - {search, success message ...}
    * @property {string} search_term - [search_term]
    * @property {GUID} site_id - site_id
    * @property {string} title - title
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Wishlist - sent. Evid: 55.
     * Event description: wishlist -> sent.
    
     * description - Type: string. Desc: description
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * num_results - Type: numeric. Desc: {0,1,2,3..}
     *
     * origin - Type: string. Desc: {search, success message ...}
     *
     * search_term - Type: string. Desc: [search_term]
     *
     * site_id - Type: guid. Desc: site_id
     *
     * title - Type: string. Desc: title
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {wishlistSentParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.wishlistSent = function (params) {
        return this.bi.log(__assign({ evid: 55 }, params));
    };
    /**
    * @typedef {Object} appMarketBackToManageApps5Params
    * @property {string} click_origin - origin of click "back to manage app"
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - 'new' for new market, else null
    * @property {GUID} msid - msid
    * @property {string} referral_name - what is the referral name? 'manage_apps' , 'finance'
    * @property {string} tag_name - tag name
    * @property {string} tag_type - tag type
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Back to Referral Page. Evid: 5.
     * Event description: back to manage apps click.
    
     * click_origin - Type: string. Desc: origin of click "back to manage app"
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: 'new' for new market, else null
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_name - Type: string. Desc: what is the referral name? 'manage_apps' , 'finance'
     *
     * tag_name - Type: string. Desc: tag name
     *
     * tag_type - Type: string. Desc: tag type
     *
     * vertical - Type: string.
     * @param {appMarketBackToManageApps5Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketBackToManageApps5 = function (params) {
        return this.bi.log(__assign({ evid: 5 }, params));
    };
    /**
    * @typedef {Object} appMarketAddEditAppReviewClickParams
    * @property {string} actionType - add_review, edit_review
    * @property {GUID} appId - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} post_type - is a new review post, or a comment on a review
    * @property {string} tag_type - tag_type
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Open App Review Modal. Evid: 107.
     * Event description: User opens the review modal of an app..
    
     * actionType - Type: string. Desc: add_review, edit_review
     *
     * appId - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * post_type - Type: string. Desc: is a new review post, or a comment on a review
     *
     * tag_type - Type: string. Desc: tag_type
     *
     * vertical - Type: string.
     * @param {appMarketAddEditAppReviewClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAddEditAppReviewClick = function (params) {
        return this.bi.log(__assign({ evid: 107 }, params));
    };
    /**
    * @typedef {Object} unificationCloseUnificationModalClickParams
    * @property {GUID} app_id - app_id
    * @property {string} closing_method - {x, later}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {unification_modal...}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} value - {search_term}
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - unification - close unification modal click. Evid: 92.
     * Event description: unification -> close unification modal click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * closing_method - Type: string. Desc: {x, later}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {unification_modal...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * value - Type: string. Desc: {search_term}
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {unificationCloseUnificationModalClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.unificationCloseUnificationModalClick = function (params) {
        return this.bi.log(__assign({ evid: 92 }, params));
    };
    /**
    * @typedef {Object} appMarketCollectionsPillsParams
    * @property {GUID} collimp_id - collection impression id (guid)
    * @property {GUID} esi - null
    * @property {number} index - what is the index of the collection in the flow (from top to bottom)
    * @property {string} market - dashboard, editor, standalone
    * @property {GUID} msid - null
    * @property {string} slug_id - null
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Collections Pills. Evid: 137.
     * Event description: In the Home page ----> discovery flow, each pill is collection..
    
     * collimp_id - Type: guid. Desc: collection impression id (guid)
     *
     * esi - Type: guid.
     *
     * index - Type: numeric. Desc: what is the index of the collection in the flow (from top to bottom)
     *
     * market - Type: string. Desc: dashboard, editor, standalone
     *
     * msid - Type: guid.
     *
     * slug_id - Type: string.
     *
     * vertical - Type: string.
     * @param {appMarketCollectionsPillsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketCollectionsPills = function (params) {
        return this.bi.log(__assign({ evid: 137 }, params));
    };
    /**
    * @typedef {Object} __deprecated__104Params
    * @property {string} category - {new, my_apps,...}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {string} origin - {menu}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 104.
     * Event description: category click from menu.
    
     * category - Type: string. Desc: {new, my_apps,...}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {menu}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__104Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__104 = function (params) {
        return this.bi.log(__assign({ evid: 104 }, params));
    };
    /**
    * @typedef {Object} appMarketCloseDialogBoxOfUpgradeWixXParams
    * @property {string} app_id - app id
    * @property {GUID} esi - null
    * @property {string} market - determines which market initiated this event (editor or dashboard)
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Close Dialog Box of Upgrade Wix [x]. Evid: 73.
     * Event description: When trying to install Apps that require premium wix site, prompt will be opened, This BI event is sent when box is closed..
    
     * app_id - Type: string. Desc: app id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: determines which market initiated this event (editor or dashboard)
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketCloseDialogBoxOfUpgradeWixXParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketCloseDialogBoxOfUpgradeWixX = function (params) {
        return this.bi.log(__assign({ evid: 73 }, params));
    };
    /**
    * @typedef {Object} appMarketUpdateAppOpenUpdateModalParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {GUID} instance_id - instance_id
    * @property {string} market - market
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Update App - Open Update Modal (Not In Use!) Merged. Evid: 132.
     * Event description: Update Modal - Modal Opened after user clicked on 'update app'.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * instance_id - Type: guid. Desc: instance_id
     *
     * market - Type: string. Desc: market
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketUpdateAppOpenUpdateModalParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketUpdateAppOpenUpdateModal = function (params) {
        return this.bi.log(__assign({ evid: 132 }, params));
    };
    /**
    * @typedef {Object} __deprecated__35Params
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {dashboard}
    * @property {GUID} msid - msid
    * @property {string} origin - {my_apps,...}
    * @property {GUID} site_id - site_id
    * @property {string} step_type - {standard, premium, hybrid}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 35.
     * Event description: dashboard apps -> remove dashboard app 2nd step click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {dashboard}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {my_apps,...}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * step_type - Type: string. Desc: {standard, premium, hybrid}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__35Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__35 = function (params) {
        return this.bi.log(__assign({ evid: 35 }, params));
    };
    /**
    * @typedef {Object} appMarketPostConsentActionParams
    * @property {string} action - what is the action that the user clicked on
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - market
    * @property {string} marketVersion - for new market = 'new', else null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: AppMarket - Post Consent - Action. Evid: 122.
     * Event description: After Consent flow for app install is finished, user will be prompt to take action in some cases. when user is taking action in this window, this event will be sent..
    
     * action - Type: string. Desc: what is the action that the user clicked on
     *
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: market
     *
     * marketVersion - Type: string. Desc: for new market = 'new', else null
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketPostConsentActionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPostConsentAction = function (params) {
        return this.bi.log(__assign({ evid: 122 }, params));
    };
    /**
    * @typedef {Object} permissionsModalAddAppClickParams
    * @property {GUID} app_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, da_widget}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {string} message_type - {default, unlisted_app_warning}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - Consent Page - Add App Click. Evid: 43.
     * Event description: permissions modal -> add app click.
    
     * app_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, da_widget}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * message_type - Type: string. Desc: {default, unlisted_app_warning}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {permissionsModalAddAppClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.permissionsModalAddAppClick = function (params) {
        return this.bi.log(__assign({ evid: 43 }, params));
    };
    /**
    * @typedef {Object} __deprecated__19Params
    * @property {string} closing_method - {x, other}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone}
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - null
    **/
    /**
     * Name: Not in use. Evid: 19.
     * Event description: welcome screen -> close.
    
     * closing_method - Type: string. Desc: {x, other}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone}
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string.
     * @param {__deprecated__19Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__19 = function (params) {
        return this.bi.log(__assign({ evid: 19 }, params));
    };
    /**
    * @typedef {Object} appMarketSubCategoryHoverParams
    * @property {string} category_name - name of category page
    * @property {GUID} esi - null
    * @property {string} loaction - from where the user reached to the page, and then hovered on the sub category- side menu and etc
    * @property {string} market - dashboard, editor, standalone
    * @property {GUID} msid - msid
    * @property {string} subcategory_name - name of sub-category hovered
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Sub-Category Hover. Evid: 142.
     * Event description: User hovers on a sub-category tag, to filter in (or out) the apps that are presented in a category page..
    
     * category_name - Type: string. Desc: name of category page
     *
     * esi - Type: guid.
     *
     * loaction - Type: string. Desc: from where the user reached to the page, and then hovered on the sub category- side menu and etc
     *
     * market - Type: string. Desc: dashboard, editor, standalone
     *
     * msid - Type: guid. Desc: msid
     *
     * subcategory_name - Type: string. Desc: name of sub-category hovered
     *
     * vertical - Type: string.
     * @param {appMarketSubCategoryHoverParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketSubCategoryHover = function (params) {
        return this.bi.log(__assign({ evid: 142 }, params));
    };
    /**
    * @typedef {Object} appMarketAppInstallationSuccessParams
    * @property {GUID} app_id - app_id
    * @property {string} app_subcategory - what is the app sub-category of the category
    * @property {GUID} collimp_id - collection impression guid
    * @property {GUID} esi - null
    * @property {GUID} impression_id - Impression id - unique for which impression
    * @property {number} index - app index number when presented
    * @property {string} installation_source - null
    * @property {GUID} instance_id - app instance id
    * @property {string} market - editor, dashboard, adi, add-panel
    * @property {string} marketVersion - version of app market
    * @property {GUID} msid - msid
    * @property {string} referral_info - referral_info (correct, no typo)
    * @property {number} referral_section_index - what is the index number of the app box that was clicked in previous page
    * @property {string} referral_section_name - what is the section name that was clicked in previous page
    * @property {string} referral_tag_name - what is the tag_name that referred to this install
    * @property {string} search_term - word used for search term, led to search result, led to app page and install
    * @property {string} section - In which section is that app located?
    * @property {string} slug_id - id of consistent set of apps
    * @property {string} tag_name - what is the specific tag from which the app was installed from
    * @property {string} tag_type - what is the type of app tag? category, collection etc
    * @property {string} version_of_app - app version
    * @property {string} vertical - null
    * @property {string} widget_referral - is flow referred from widget
    **/
    /**
     * Name: AppMarket - App Installation Success. Evid: 2.
     * Event description: App Install was successful, Client BI for rich data..
    
     * app_id - Type: guid. Desc: app_id
     *
     * app_subcategory - Type: string. Desc: what is the app sub-category of the category
     *
     * collimp_id - Type: guid. Desc: collection impression guid
     *
     * esi - Type: guid.
     *
     * impression_id - Type: guid. Desc: Impression id - unique for which impression
     *
     * index - Type: numeric. Desc: app index number when presented
     *
     * installation_source - Type: string.
     *
     * instance_id - Type: guid. Desc: app instance id
     *
     * market - Type: string. Desc: editor, dashboard, adi, add-panel
     *
     * marketVersion - Type: string. Desc: version of app market
     *
     * msid - Type: guid. Desc: msid
     *
     * referral_info - Type: string. Desc: referral_info (correct, no typo)
     *
     * referral_section_index - Type: numeric. Desc: what is the index number of the app box that was clicked in previous page
     *
     * referral_section_name - Type: string. Desc: what is the section name that was clicked in previous page
     *
     * referral_tag_name - Type: string. Desc: what is the tag_name that referred to this install
     *
     * search_term - Type: string. Desc: word used for search term, led to search result, led to app page and install
     *
     * section - Type: string. Desc: In which section is that app located?
     *
     * slug_id - Type: string. Desc: id of consistent set of apps
     *
     * tag_name - Type: string. Desc: what is the specific tag from which the app was installed from
     *
     * tag_type - Type: string. Desc: what is the type of app tag? category, collection etc
     *
     * version_of_app - Type: string. Desc: app version
     *
     * vertical - Type: string.
     *
     * widget_referral - Type: string. Desc: is flow referred from widget
     * @param {appMarketAppInstallationSuccessParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketAppInstallationSuccess = function (params) {
        return this.bi.log(__assign({ evid: 2 }, params));
    };
    /**
    * @typedef {Object} appMarketPendingForDeleteModalGoToEditorClickParams
    * @property {GUID} app_id - app id
    * @property {GUID} esi - null
    * @property {GUID} msid - msid
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Pending for Delete Modal - Go To Editor Click. Evid: 120.
     * Event description: when user is trying to delete an editor component app from the BM , he will get this modal to ask him to move to Editor. clicking on action button will send this bi.
    
     * app_id - Type: guid. Desc: app id
     *
     * esi - Type: guid.
     *
     * msid - Type: guid. Desc: msid
     *
     * vertical - Type: string.
     * @param {appMarketPendingForDeleteModalGoToEditorClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketPendingForDeleteModalGoToEditorClick = function (params) {
        return this.bi.log(__assign({ evid: 120 }, params));
    };
    /**
    * @typedef {Object} appMarketBackButtonClickParams
    * @property {GUID} appId - null if not in app_id
    * @property {GUID} esi - null
    * @property {string} market - what is the market
    * @property {GUID} msid - msid
    * @property {string} tag_name - tag name
    * @property {string} tag_type - (homepage, app page, collection etc)
    * @property {string} vertical - null
    **/
    /**
     * Name: App Market - Back Button Click. Evid: 135.
     * Event description: User clicks to go back from where he is..
    
     * appId - Type: guid. Desc: null if not in app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: what is the market
     *
     * msid - Type: guid. Desc: msid
     *
     * tag_name - Type: string. Desc: tag name
     *
     * tag_type - Type: string. Desc: (homepage, app page, collection etc)
     *
     * vertical - Type: string.
     * @param {appMarketBackButtonClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.appMarketBackButtonClick = function (params) {
        return this.bi.log(__assign({ evid: 135 }, params));
    };
    /**
    * @typedef {Object} __deprecated__82Params
    * @property {GUID} product_id - app_id
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {string} origin - {tab,link}
    * @property {GUID} site_id - site_id
    * @property {string} type - {post,edit}
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: not in use. Evid: 82.
     * Event description: review system -> add_edit review click.
    
     * product_id - Type: guid. Desc: app_id
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {tab,link}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * type - Type: string. Desc: {post,edit}
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__82Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__82 = function (params) {
        return this.bi.log(__assign({ evid: 82 }, params));
    };
    /**
    * @typedef {Object} hoverOnCategoryParams
    * @property {string} category - the category name from the appstore categories
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {GUID} site_id - site_id
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - hover over apps category. Evid: 103.
     * Event description: hover on category.
    
     * category - Type: string. Desc: the category name from the appstore categories
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * site_id - Type: guid. Desc: site_id
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {hoverOnCategoryParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.hoverOnCategory = function (params) {
        return this.bi.log(__assign({ evid: 103 }, params));
    };
    /**
    * @typedef {Object} collectionCloseSiteCategoryPopUpParams
    * @property {string} category - {[market]_collection}
    * @property {string} closing_method - {x, cancel, outside}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {string} marketVersion - For new App Market version, what version of market this BI was sent from
    * @property {GUID} msid - msid
    * @property {string} origin - {ed_home}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: AppMarket - close site category pop up. Evid: 36.
     * Event description: click on close site category pop up (the pop up that is opened in order to choose what site category is used - e.g business, store, photography etc).
    
     * category - Type: string. Desc: {[market]_collection}
     *
     * closing_method - Type: string. Desc: {x, cancel, outside}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * marketVersion - Type: string. Desc: For new App Market version, what version of market this BI was sent from
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {ed_home}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {collectionCloseSiteCategoryPopUpParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.collectionCloseSiteCategoryPopUp = function (params) {
        return this.bi.log(__assign({ evid: 36 }, params));
    };
    /**
    * @typedef {Object} __deprecated__16Params
    * @property {string} category - {[market]_collection}
    * @property {GUID} esi - null
    * @property {string} market - {editor,dashboard,standalone, premium_cart}
    * @property {GUID} msid - msid
    * @property {string} origin - {ed_home}
    * @property {GUID} site_id - site_id
    * @property {GUID} uuid - uuid
    * @property {string} vertical - {general, online_store, music...}
    **/
    /**
     * Name: Not in use. Evid: 16.
     * Event description: click on close collection view.
    
     * category - Type: string. Desc: {[market]_collection}
     *
     * esi - Type: guid.
     *
     * market - Type: string. Desc: {editor,dashboard,standalone, premium_cart}
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: {ed_home}
     *
     * site_id - Type: guid. Desc: site_id
     *
     * uuid - Type: guid. Desc: uuid
     *
     * vertical - Type: string. Desc: {general, online_store, music...}
     * @param {__deprecated__16Params} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.__deprecated__16 = function (params) {
        return this.bi.log(__assign({ evid: 16 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 24,
        endpoint: 'market',
    };
}
//# sourceMappingURL=index.js.map