import { truncateNumber, addGroupSeperator, decodeHtml, SYSTEM_DECIMAL_SEPERATOR, DEFAULT_GROUP_SEPERATOR, CURRENCY_PLACEHOLDER } from './formattersCommon';

function getTemplateParts(template, symbol) {
  if (template.length === 0) {
    return [];
  }

  if (template === CURRENCY_PLACEHOLDER) {
    return [{
      type: 'currency',
      value: symbol
    }];
  }

  return template.split(CURRENCY_PLACEHOLDER).map(function (str) {
    return str.length === 0 ? {
      type: 'currency',
      value: symbol
    } : {
      type: 'literal',
      value: str
    };
  });
}

export function formatCurrencyToParts(inputFloat, _ref) {
  var symbolHtml = _ref.symbol,
      _ref$decimalSep = _ref.decimalSep,
      decimalSep = _ref$decimalSep === void 0 ? SYSTEM_DECIMAL_SEPERATOR : _ref$decimalSep,
      _ref$groupSep = _ref.groupSep,
      groupSep = _ref$groupSep === void 0 ? DEFAULT_GROUP_SEPERATOR : _ref$groupSep,
      _ref$posPrefix = _ref.posPrefix,
      posPrefix = _ref$posPrefix === void 0 ? '' : _ref$posPrefix,
      _ref$posSuffix = _ref.posSuffix,
      posSuffix = _ref$posSuffix === void 0 ? '' : _ref$posSuffix,
      _ref$fractionSize = _ref.fractionSize,
      fractionSize = _ref$fractionSize === void 0 ? '' : _ref$fractionSize;
  var result = [];
  var symbol = decodeHtml(symbolHtml);
  result.push.apply(result, getTemplateParts(posPrefix, symbol));
  var truncatedNumber = truncateNumber(inputFloat, fractionSize);

  var _truncatedNumber$spli = truncatedNumber.split(SYSTEM_DECIMAL_SEPERATOR),
      integer = _truncatedNumber$spli[0],
      fraction = _truncatedNumber$spli[1];

  addGroupSeperator(groupSep, integer.toString()).split(groupSep).forEach(function (currentGroup, index, groups) {
    result.push({
      type: 'integer',
      value: currentGroup
    });

    if (groups[index + 1]) {
      result.push({
        type: 'group',
        value: groupSep
      });
    }
  });

  if (fraction) {
    result.push({
      type: 'decimal',
      value: decimalSep
    });
    result.push({
      type: 'fraction',
      value: fraction
    });
  }

  var suffixTemplateParts = getTemplateParts(posSuffix, symbol);
  result.push.apply(result, suffixTemplateParts);
  return result;
}