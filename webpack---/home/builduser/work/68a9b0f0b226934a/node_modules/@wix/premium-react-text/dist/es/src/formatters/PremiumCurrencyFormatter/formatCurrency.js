import { truncateNumber, addGroupSeperator, decodeHtml, SYSTEM_DECIMAL_SEPERATOR, DEFAULT_GROUP_SEPERATOR, CURRENCY_PLACEHOLDER } from './formattersCommon';

function isPositive(inputFloat, inputString) {
  return inputFloat >= 0 || inputString.match(/^0(\.0+)?$/);
}

function getNumberTemplate(inputFloat, inputString, posPrefix, posSuffix, negPrefix, negSuffix) {
  return isPositive(inputFloat, inputString) ? posPrefix + inputString + posSuffix : negPrefix + inputString + negSuffix;
}

var haveZeroDecimals = function haveZeroDecimals(inputFloat) {
  return Number(inputFloat) % 1 === 0;
};

export function formatCurrency(inputFloat, _ref, formatConfig) {
  var symbolHtml = _ref.symbol,
      _ref$decimalSep = _ref.decimalSep,
      decimalSep = _ref$decimalSep === void 0 ? SYSTEM_DECIMAL_SEPERATOR : _ref$decimalSep,
      _ref$groupSep = _ref.groupSep,
      groupSep = _ref$groupSep === void 0 ? DEFAULT_GROUP_SEPERATOR : _ref$groupSep,
      _ref$posPrefix = _ref.posPrefix,
      posPrefix = _ref$posPrefix === void 0 ? '' : _ref$posPrefix,
      _ref$posSuffix = _ref.posSuffix,
      posSuffix = _ref$posSuffix === void 0 ? '' : _ref$posSuffix,
      _ref$negPrefix = _ref.negPrefix,
      negPrefix = _ref$negPrefix === void 0 ? '' : _ref$negPrefix,
      _ref$negSuffix = _ref.negSuffix,
      negSuffix = _ref$negSuffix === void 0 ? '' : _ref$negSuffix,
      _ref$fractionSize = _ref.fractionSize,
      fractionSize = _ref$fractionSize === void 0 ? '' : _ref$fractionSize;

  if (formatConfig && formatConfig.hideZeroDecimals && haveZeroDecimals(inputFloat)) {
    fractionSize = '0';
  }

  var truncatedNumber = truncateNumber(inputFloat, fractionSize);
  truncatedNumber = truncatedNumber.replace(SYSTEM_DECIMAL_SEPERATOR, decimalSep);
  truncatedNumber = addGroupSeperator(groupSep, truncatedNumber);
  var template = getNumberTemplate(inputFloat, truncatedNumber, posPrefix, posSuffix, negPrefix, negSuffix);
  var symbol = decodeHtml(symbolHtml);
  return template.replace(CURRENCY_PLACEHOLDER, symbol);
}