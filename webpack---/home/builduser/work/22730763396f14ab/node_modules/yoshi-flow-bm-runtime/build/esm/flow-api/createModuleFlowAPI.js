import { BrowserClient } from '@sentry/browser';
import { kebabCase, once } from 'lodash';
import { assertEnabledApi } from '../util/assert-enabled-api';
import { createSentryOptions } from '../sentry-config';
export function createModuleFlowAPI({ module, flowAPIInstancesOrGet, bmModule, optionalDeps, useEssentials, }) {
    const { config } = module;
    const { sentry: sentryConfig, appDefId } = config;
    const { HttpClient, loadOptionalFlowAPIDeps } = optionalDeps;
    const sentry = (sentryConfig === null || sentryConfig === void 0 ? void 0 : sentryConfig.DSN) ? useEssentials
        ? bmModule._essentials.createSentryLogger(Object.assign(Object.assign({}, createSentryOptions()), { dsn: sentryConfig.DSN }))
        : new BrowserClient(Object.assign(Object.assign({}, createSentryOptions()), { dsn: sentryConfig.DSN }))
        : undefined;
    const httpClient = HttpClient ? new HttpClient(appDefId) : undefined;
    const getModuleFedopsLogger = once(async () => {
        const { createFedopsLogger } = await loadOptionalFlowAPIDeps();
        assertEnabledApi(createFedopsLogger, 'getModuleFedopsLogger');
        return createFedopsLogger(kebabCase(module.moduleId), Object.assign({}, module.config.fedops));
    });
    const getI18n = once(async () => {
        const { i18nOrGet } = flowAPIInstancesOrGet;
        const i18n = typeof i18nOrGet === 'function' ? await i18nOrGet() : i18nOrGet;
        assertEnabledApi(i18n, 'i18n');
        if (!i18n.isInitialized) {
            await i18n.init();
        }
        return i18n;
    });
    const getBILogger = once(async () => {
        const { biLoggerOrGet } = flowAPIInstancesOrGet;
        const biLogger = typeof biLoggerOrGet === 'function'
            ? await biLoggerOrGet()
            : biLoggerOrGet;
        assertEnabledApi(biLogger, 'biLogger');
        return biLogger;
    });
    const getExperiments = once(async () => {
        var _a;
        const { experimentsOrGet } = await flowAPIInstancesOrGet;
        const experiments = typeof experimentsOrGet === 'function'
            ? await experimentsOrGet()
            : experimentsOrGet;
        assertEnabledApi(experiments, 'experiments');
        const scopes = (_a = config.experiments) === null || _a === void 0 ? void 0 : _a.scopes;
        if (scopes != null) {
            await Promise.all(scopes.map((scope) => experiments.load(scope)));
        }
        return experiments;
    });
    return {
        getBILogger,
        getI18n,
        getExperiments,
        getModuleFedopsLogger,
        module: bmModule,
        get moduleParams() {
            return bmModule.moduleParams;
        },
        sentry: sentry,
        get httpClient() {
            assertEnabledApi(httpClient, 'httpClient');
            return httpClient;
        },
        moduleInfo: module.config,
    };
}
//# sourceMappingURL=createModuleFlowAPI.js.map