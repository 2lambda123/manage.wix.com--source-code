var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = { endpoint: 'more-than-widget' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 5 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'more-than-widget' });
    }
    ;
    /**
    * @typedef {Object} assetViewParams
    * @property {GUID} assetCampaignGuid - deprecated
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} bannerLocationOnPage - deprecated
    * @property {string} asset_location_on_page - 0,1,2,3 ../hover/bubble (progress bar)
    * @property {string} group_id - id of category in setup widget
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - --
    * @property {string} item_mode - skipped , open . complete
    * @property {GUID} msid - site guid
    * @property {string} offeringGuid - deprecated
    * @property {string} offering_guid - offer guid
    * @property {string} premium_badge - the item requires upgrade
    * @property {string} promotionAssetType - deprecated
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    * @property {string} visibility_trigger - normal/step_completed/scrolling to view/ arrow
    **/
    /**
     * Name: Biz Manager - dashboard asset shown. Evid: 590.
     * Event description: what's next asset shown.
    
     * assetCampaignGuid - Type: guid. Desc: deprecated
     *
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * bannerLocationOnPage - Type: string. Desc: deprecated
     *
     * asset_location_on_page - Type: string. Desc: 0,1,2,3 ../hover/bubble (progress bar)
     *
     * group_id - Type: string. Desc: id of category in setup widget
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: --
     *
     * item_mode - Type: string. Desc: skipped , open . complete
     *
     * msid - Type: guid. Desc: site guid
     *
     * offeringGuid - Type: string. Desc: deprecated
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * premium_badge - Type: string. Desc: the item requires upgrade
     *
     * promotionAssetType - Type: string. Desc: deprecated
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     *
     * visibility_trigger - Type: string. Desc: normal/step_completed/scrolling to view/ arrow
     * @param {assetViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.assetView = function (params) {
        return this.bi.log(__assign({ evid: 590 }, params));
    };
    /**
    * @typedef {Object} viewInDashboardParams
    * @property {string} hosting - ma
    * @property {GUID} msid - --
    * @property {string} name - item name
    * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
    **/
    /**
     * Name: dashboard > item shown in dashboard. Evid: 1172.
     * Event description: when a specific item is shown to the user (for example the feature modal step in setup widget).
    
     * hosting - Type: string. Desc: ma
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: item name
     *
     * widget_name - Type: string. Desc: the widget name in dashboard (this field added only in new dashboard)
     * @param {viewInDashboardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.viewInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 1172 }, params));
    };
    /**
    * @typedef {Object} assetClickParams
    * @property {GUID} assetCampaignGuid - deprecated
    * @property {string} asset_campaign_guid - ids to be consistent with premium events
    * @property {string} asset_campaign_id - ids to be consistent with premium events
    * @property {number} asset_location_from_group_list - item location inside the category
    * @property {string} bannerLocationOnPage - deprecated
    * @property {string} asset_location_on_page - (0,1,2,3)
    * @property {string} clickType - deprecated
    * @property {string} click_type - close/ click/activate/skip
    * @property {string} group_id - id of category in setup widget
    * @property {string} hosting - ADI/MA/editor
    * @property {GUID} item_id - assets guid
    * @property {GUID} msid - site guid
    * @property {string} offeringGuid - deprecated
    * @property {string} offering_guid - offer guid
    * @property {string} premium_badge - the item requires upgrade
    * @property {string} promotionAssetType - deprecated
    * @property {string} promotion_asset_type - bizMgrNavigation / video / externalUrl
    * @property {string} visibility_trigger - normal/step_completed
    **/
    /**
     * Name: Biz Manager - dashboard asset click. Evid: 591.
     * Event description: what's next asset clicked.
    
     * assetCampaignGuid - Type: guid. Desc: deprecated
     *
     * asset_campaign_guid - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_campaign_id - Type: string. Desc: ids to be consistent with premium events
     *
     * asset_location_from_group_list - Type: numeric. Desc: item location inside the category
     *
     * bannerLocationOnPage - Type: string. Desc: deprecated
     *
     * asset_location_on_page - Type: string. Desc: (0,1,2,3)
     *
     * clickType - Type: string. Desc: deprecated
     *
     * click_type - Type: string. Desc: close/ click/activate/skip
     *
     * group_id - Type: string. Desc: id of category in setup widget
     *
     * hosting - Type: string. Desc: ADI/MA/editor
     *
     * item_id - Type: guid. Desc: assets guid
     *
     * msid - Type: guid. Desc: site guid
     *
     * offeringGuid - Type: string. Desc: deprecated
     *
     * offering_guid - Type: string. Desc: offer guid
     *
     * premium_badge - Type: string. Desc: the item requires upgrade
     *
     * promotionAssetType - Type: string. Desc: deprecated
     *
     * promotion_asset_type - Type: string. Desc: bizMgrNavigation / video / externalUrl
     *
     * visibility_trigger - Type: string. Desc: normal/step_completed
     * @param {assetClickParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.assetClick = function (params) {
        return this.bi.log(__assign({ evid: 591 }, params));
    };
    /**
    * @typedef {Object} clickInDashboardParams
    * @property {string} hosting - ma
    * @property {string} item_status_desc - deprecated
    * @property {GUID} msid - --
    * @property {string} name - the site details' item: Connect Domain, Manage Plan...
    * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
    **/
    /**
     * Name: dashboard > click in dashboard. Evid: 195.
     * Event description: Click on the action in dashboard widgets. (in the beginning this event was only for site details and in the new dashboard we added other clicks in different widgets.).
    
     * hosting - Type: string. Desc: ma
     *
     * item_status_desc - Type: string. Desc: deprecated
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: the site details' item: Connect Domain, Manage Plan...
     *
     * widget_name - Type: string. Desc: the widget name in dashboard (this field added only in new dashboard)
     * @param {clickInDashboardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 195 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 5,
        endpoint: 'more-than-widget',
    };
}
//# sourceMappingURL=index.js.map