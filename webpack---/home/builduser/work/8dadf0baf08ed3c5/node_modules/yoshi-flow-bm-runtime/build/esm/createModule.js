import { BusinessManagerModule, registerModule, registerPageComponentMonitors, } from '@wix/business-manager-api';
import { ModuleRegistry } from 'react-module-container';
import { createLazyComponent } from './createLazyComponent';
import { FlowAPIDelegate } from './flow-api/flowAPIDelegate';
export default function createModule({ module: { module, configHook, initHook }, pages, exportedComponents, methods, optionalDeps, useEssentials, }) {
    const { config, moduleId } = module;
    const { moduleConfigurationId } = config;
    class Module extends BusinessManagerModule {
        constructor(moduleId) {
            super(moduleId);
            this.state = {};
            this.setState = (newState) => (this.state = newState);
            if (moduleConfigurationId) {
                this.setModuleConfigurationId(moduleConfigurationId);
            }
            this.flowAPIDelegate = new FlowAPIDelegate({
                useEssentials,
                bmModule: this,
                module,
                optionalDeps,
            });
        }
        register(moduleParams) {
            this.moduleParams = moduleParams;
            const { flowAPIDelegate } = this;
            const { moduleFlowAPI } = flowAPIDelegate;
            const { sentry } = moduleFlowAPI;
            pages.forEach((component) => {
                const { component: { componentId, componentName }, } = component;
                if (sentry) {
                    registerPageComponentMonitors(componentId, {
                        sentryClient: sentry,
                    });
                }
                this.registerPageComponent(componentName, createLazyComponent(component, {
                    module,
                    flowAPIDelegate,
                }));
            });
            exportedComponents.forEach((component) => {
                const { component: { componentId }, } = component;
                this.registerComponentWithModuleParams(componentId, createLazyComponent(component, {
                    module,
                    flowAPIDelegate,
                }));
            });
            methods.forEach(({ method, fn }) => {
                ModuleRegistry.registerMethod(method.methodId, () => fn().bind(this, flowAPIDelegate.createBMMethodFlowAPI(method)));
            });
        }
        get _essentials() {
            if (!useEssentials) {
                throw new Error("Cannot access Essentials when env var `YOSHI_BM_ESSENTIALS=true` isn't provided!");
            }
            return this.appEssentials;
        }
        init(_) {
            const { flowAPIDelegate } = this;
            if (initHook) {
                initHook.call(this, flowAPIDelegate.moduleFlowAPI);
            }
        }
        config(sourceModule, configPayload) {
            const { flowAPIDelegate } = this;
            if (configHook) {
                configHook.call(this, flowAPIDelegate.moduleFlowAPI, sourceModule, configPayload);
            }
        }
        prefetchFlowAPI() {
            var _a, _b;
            const { flowAPIDelegate } = this;
            return Promise.all([
                (_b = (_a = flowAPIDelegate.optionalDeps).asyncMessagesLoader) === null || _b === void 0 ? void 0 : _b.call(_a, flowAPIDelegate.bmModule.moduleParams.accountLanguage),
                flowAPIDelegate.optionalDeps.loadOptionalFlowAPIDeps(),
            ]);
        }
        prefetchComponent(componentId) {
            const flowAPIPrefetchPromise = this.prefetchFlowAPI();
            const component = exportedComponents.find(({ component }) => component.componentId === componentId);
            if (component == null) {
                return;
            }
            return Promise.all([
                flowAPIPrefetchPromise,
                component.loadReactComponent(),
            ]);
        }
    }
    registerModule(moduleId, Module);
}
//# sourceMappingURL=createModule.js.map