import { once } from 'lodash';
import { createFlowAPIInstances } from './createFlowAPIInstances';
import { createModuleFlowAPI } from './createModuleFlowAPI';
export class FlowAPIDelegate {
    constructor(params) {
        this.module = params.module;
        this.optionalDeps = params.optionalDeps;
        this.bmModule = params.bmModule;
        this.useEssentials = params.useEssentials;
    }
    get getFlowAPIInstances() {
        const { optionalDeps, useEssentials } = this;
        if (this._getFlowAPIInstances == null) {
            this._getFlowAPIInstances = once(async () => createFlowAPIInstances({
                flowAPIDeps: await optionalDeps.loadOptionalFlowAPIDeps(),
                bmModule: this.bmModule,
                module: this.module,
                useEssentials,
            }));
        }
        return this._getFlowAPIInstances;
    }
    get moduleFlowAPI() {
        const { bmModule, module, optionalDeps } = this;
        if (this._moduleFlowAPI == null) {
            this._moduleFlowAPI = createModuleFlowAPI({
                module,
                bmModule,
                optionalDeps,
                getFlowAPIInstances: this.getFlowAPIInstances,
                useEssentials: this.useEssentials,
            });
        }
        return this._moduleFlowAPI;
    }
    createGetFedopsLogger(appName) {
        return once(async () => {
            const flowAPIDeps = await this.optionalDeps.loadOptionalFlowAPIDeps();
            return this.getFedopsLoggerSync(appName, flowAPIDeps);
        });
    }
    getFedopsLoggerSync(appName, flowAPIDeps) {
        const { createFedopsLogger } = this.useEssentials
            ? this.bmModule._essentials
            : flowAPIDeps;
        return createFedopsLogger === null || createFedopsLogger === void 0 ? void 0 : createFedopsLogger(appName, Object.assign({}, this.module.config.fedops));
    }
    createGetI18nInstance(asyncMessagesLoader) {
        return once(async () => {
            const flowAPIDeps = await this.optionalDeps.loadOptionalFlowAPIDeps();
            return this.getComponentI18nInstanceSync(asyncMessagesLoader, flowAPIDeps);
        });
    }
    getComponentI18nInstanceSync(asyncMessagesLoader, flowAPIDeps) {
        var _a, _b;
        const { initI18n } = flowAPIDeps;
        return initI18n === null || initI18n === void 0 ? void 0 : initI18n({
            locale: this.bmModule.moduleParams.accountLanguage,
            asyncMessagesLoader,
            useSuspense: (_b = (_a = this.module.config.translations) === null || _a === void 0 ? void 0 : _a.suspense) !== null && _b !== void 0 ? _b : true,
            disableAutoInit: true,
        });
    }
    createBMMethodFlowAPI(method) {
        return Object.assign(Object.assign({}, this.moduleFlowAPI), { getFedopsLogger: this.createGetFedopsLogger(method.methodId) });
    }
    getComponentHooksFlowAPI(component, { getFedopsLogger, getI18nInstance, }) {
        const { moduleFlowAPI } = this;
        const getI18n = getI18nInstance
            ? async () => {
                const i18n = await getI18nInstance();
                if (!i18n.isInitialized) {
                    await i18n.init();
                }
                return i18n;
            }
            : moduleFlowAPI.getI18n;
        return {
            module: moduleFlowAPI.module,
            moduleInfo: moduleFlowAPI.moduleInfo,
            get httpClient() {
                return moduleFlowAPI.httpClient;
            },
            get sentry() {
                return moduleFlowAPI.sentry;
            },
            get moduleParams() {
                return moduleFlowAPI.moduleParams;
            },
            getModuleFedopsLogger: moduleFlowAPI.getModuleFedopsLogger,
            getI18n,
            getExperiments: moduleFlowAPI.getExperiments,
            getBILogger: moduleFlowAPI.getBILogger,
            componentInfo: {
                componentId: component.componentId,
                type: component.componentType,
            },
            getFedopsLogger,
        };
    }
    _createBMComponentAPISync(component, { fedopsLogger, flowAPIDeps, i18n, }) {
        const { moduleFlowAPI, module, bmModule, useEssentials } = this;
        const flowAPIInstances = createFlowAPIInstances({
            flowAPIDeps,
            module,
            bmModule,
            useEssentials,
        });
        return {
            module: moduleFlowAPI.module,
            moduleInfo: moduleFlowAPI.moduleInfo,
            get httpClient() {
                return moduleFlowAPI.httpClient;
            },
            get sentry() {
                return moduleFlowAPI.sentry;
            },
            get moduleParams() {
                return moduleFlowAPI.moduleParams;
            },
            get biLogger() {
                return flowAPIInstances.biLogger;
            },
            get i18n() {
                return i18n !== null && i18n !== void 0 ? i18n : flowAPIInstances.i18n;
            },
            get experiments() {
                return flowAPIInstances.experiments;
            },
            get reactProviders() {
                return flowAPIDeps;
            },
            componentInfo: {
                componentId: component.componentId,
                type: component.componentType,
            },
            fedopsLogger,
        };
    }
    createBMComponentAPISync({ component, asyncMessagesLoader }, flowAPIDeps) {
        const fedopsLogger = this.getFedopsLoggerSync(component.componentId, flowAPIDeps);
        const i18n = asyncMessagesLoader != null
            ? this.getComponentI18nInstanceSync(asyncMessagesLoader, flowAPIDeps)
            : null;
        return this._createBMComponentAPISync(component, {
            flowAPIDeps,
            i18n,
            fedopsLogger,
        });
    }
    async prefetchTranslations(asyncMessagesLoader) {
        const { optionalDeps, bmModule } = this;
        const { moduleParams: { accountLanguage }, } = bmModule;
        if (asyncMessagesLoader != null) {
            await asyncMessagesLoader(accountLanguage);
        }
        else if (optionalDeps.asyncMessagesLoader != null) {
            await optionalDeps.asyncMessagesLoader(accountLanguage);
        }
    }
    async createBMComponentAPI(component, { getFedopsLogger, getI18nInstance, }) {
        const { optionalDeps } = this;
        const flowAPIDeps = await optionalDeps.loadOptionalFlowAPIDeps();
        return this._createBMComponentAPISync(component, {
            flowAPIDeps,
            fedopsLogger: await getFedopsLogger(),
            i18n: await (getI18nInstance === null || getI18nInstance === void 0 ? void 0 : getI18nInstance()),
        });
    }
}
//# sourceMappingURL=flowAPIDelegate.js.map