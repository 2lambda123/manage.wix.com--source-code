var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useMemo, useState } from 'react';
import { configModule, getCurrentInstance, registerToInstanceChanges, } from '@wix/business-manager-api';
import ModuleProvider from './hooks/ModuleProvider';
import { BusinessManagerAPIProvider } from './hooks/useBusinessManagerAPI';
import ComponentInfoProvider from './hooks/ComponentInfoProvider';
import ModuleInfoProvider from './hooks/ModuleInfoProvider';
export default function wrapComponent(Component, module, flowAPI) {
    const { I18nextProvider, HttpProvider, SentryProvider, FedopsProvider, BILoggerProvider, PureExperimentsProvider, } = flowAPI.reactProviders;
    return (props) => {
        var _a;
        const { routeBaseName, router, metaSiteId, children, config, accountLanguage, brand, coBranding, debug, instance, instanceId, liveSite, locale, primarySiteLocale, siteName, userId, userPermissions, userRole, viewMode } = props, restProps = __rest(props, ["routeBaseName", "router", "metaSiteId", "children", "config", "accountLanguage", "brand", "coBranding", "debug", "instance", "instanceId", "liveSite", "locale", "primarySiteLocale", "siteName", "userId", "userPermissions", "userRole", "viewMode"]);
        const [businessManagerAPI] = useState(() => ({
            getCurrentInstance,
            registerToInstanceChanges,
            configModule,
        }));
        const moduleParams = useMemo(() => ({
            routeBaseName,
            router,
            metaSiteId,
            config,
            accountLanguage,
            brand,
            coBranding,
            debug,
            instance,
            instanceId,
            liveSite,
            locale,
            primarySiteLocale,
            siteName,
            userId,
            userPermissions,
            userRole,
            viewMode,
        }), [
            routeBaseName,
            router,
            metaSiteId,
            config,
            accountLanguage,
            brand,
            coBranding,
            debug,
            instance,
            instanceId,
            liveSite,
            locale,
            primarySiteLocale,
            siteName,
            userId,
            userPermissions,
            userRole,
            viewMode,
        ]);
        useState(() => {
            if (I18nextProvider != null) {
                const { i18n } = flowAPI;
                if (i18n != null && !i18n.isInitialized) {
                    i18n.init();
                }
            }
        });
        useState(() => {
            var _a;
            if (PureExperimentsProvider != null) {
                const { experiments } = flowAPI;
                const scopes = (_a = module.config.experiments) === null || _a === void 0 ? void 0 : _a.scopes;
                if (scopes) {
                    scopes.forEach((scope) => experiments.load(scope));
                }
            }
        });
        let provider = (React.createElement(Component, Object.assign({}, restProps), children));
        if (HttpProvider != null) {
            provider = (React.createElement(HttpProvider, { client: flowAPI.httpClient }, provider));
        }
        if (SentryProvider != null) {
            provider = (React.createElement(SentryProvider, { client: flowAPI.sentry }, provider));
        }
        if (I18nextProvider != null) {
            provider = (React.createElement(I18nextProvider, { i18n: flowAPI.i18n }, provider));
        }
        if (FedopsProvider != null) {
            provider = (React.createElement(FedopsProvider, { value: flowAPI.fedopsLogger }, provider));
        }
        if (((_a = module.config.experiments) === null || _a === void 0 ? void 0 : _a.scopes) != null &&
            PureExperimentsProvider != null) {
            provider = (React.createElement(PureExperimentsProvider, { experiments: flowAPI.experiments }, provider));
        }
        if (BILoggerProvider != null) {
            provider = (React.createElement(BILoggerProvider, { logger: flowAPI.biLogger }, provider));
        }
        return (React.createElement(BusinessManagerAPIProvider, { value: businessManagerAPI },
            React.createElement(ModuleProvider, { moduleParams: moduleParams },
                React.createElement(ModuleInfoProvider, { moduleInfo: flowAPI.moduleInfo },
                    React.createElement(ComponentInfoProvider, { componentInfo: flowAPI.componentInfo }, provider)))));
    };
}
//# sourceMappingURL=wrapComponent.js.map