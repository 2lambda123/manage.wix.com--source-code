import React, { Suspense, useState } from 'react';
import { ReactLoadableComponent } from 'react-module-container';
import { FlowAPIDelegate } from './flow-api/flowAPIDelegate';
export function createLazyComponent(requireableBMComponent, { flowAPIDelegate }) {
    const { component, asyncMessagesLoader, loadReactComponent, filesHook, resolveHook, } = requireableBMComponent;
    const createStandaloneComponentFlowAPI = (flowAPIDeps) => {
        const standaloneFlowAPIDelegate = new FlowAPIDelegate(Object.assign(Object.assign({}, flowAPIDelegate), { optionalDeps: Object.assign(Object.assign({}, flowAPIDelegate.optionalDeps), { loadOptionalFlowAPIDeps: async () => flowAPIDeps }) }));
        return standaloneFlowAPIDelegate.createBMComponentAPISync(requireableBMComponent, flowAPIDeps);
    };
    return (props) => {
        const [error, setError] = useState();
        const [getFedopsLogger] = useState(() => flowAPIDelegate.createGetFedopsLogger(component.componentId));
        const [getI18nInstance] = useState(() => asyncMessagesLoader != null
            ? flowAPIDelegate.createGetI18nInstance(asyncMessagesLoader)
            : null);
        const [componentHooksFlowAPI] = useState(() => flowAPIDelegate.getComponentHooksFlowAPI(component, {
            getFedopsLogger,
            getI18nInstance,
        }));
        const [Component] = useState(() => {
            return ReactLoadableComponent(component.componentId, async () => {
                try {
                    flowAPIDelegate.prefetchTranslations(asyncMessagesLoader);
                    const resolveDataPromise = resolveHook === null || resolveHook === void 0 ? void 0 : resolveHook.call(flowAPIDelegate.bmModule, componentHooksFlowAPI);
                    const componentFlowAPIPromise = flowAPIDelegate.createBMComponentAPI(component, {
                        getFedopsLogger,
                        getI18nInstance,
                    });
                    const reactComponentPromise = loadReactComponent();
                    const [resolvedData, reactComponent, componentFlowAPI,] = await Promise.all([
                        resolveDataPromise,
                        reactComponentPromise,
                        componentFlowAPIPromise,
                    ]);
                    const resolveComponentFlowAPI = (maybeSyncFlowAPIDeps) => maybeSyncFlowAPIDeps
                        ? createStandaloneComponentFlowAPI(maybeSyncFlowAPIDeps)
                        : componentFlowAPI;
                    return Object.assign({ default: reactComponent(resolveComponentFlowAPI) }, resolvedData);
                }
                catch (e) {
                    setError(e);
                    throw e;
                }
            }, filesHook === null || filesHook === void 0 ? void 0 : filesHook.call(flowAPIDelegate.bmModule, componentHooksFlowAPI));
        });
        if (error) {
            throw error;
        }
        return (React.createElement(Suspense, { fallback: null },
            React.createElement(Component, Object.assign({}, props))));
    };
}
//# sourceMappingURL=createLazyComponent.js.map