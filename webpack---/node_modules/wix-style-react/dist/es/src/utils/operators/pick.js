import _defineProperty from "@babel/runtime/helpers/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import isObject from './isObject';
export default function pick(obj) {
  var paths = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (!isObject(obj)) {
    return {};
  }

  var pathsArr;

  if (typeof paths === 'string') {
    pathsArr = [paths];
  } else if (!Array.isArray(paths)) {
    pathsArr = [];
  } else {
    pathsArr = paths;
  }

  return Object.keys(obj).reduce(function (acc, key) {
    if (pathsArr.indexOf(key) !== -1) {
      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, obj[key]));
    }

    return acc;
  }, {});
}