import _pickBy from 'lodash/pickBy';
import _isEmpty from 'lodash/isEmpty';
import _get from 'lodash/get';
import { default_lastReadMessageSequence } from '../../defaults/defaults';
import * as constants from '../../constants/constants';
export var filterChatrooms = function (chatrooms, filter, unreadFilteredRoomsIds) {
    return _pickBy(chatrooms, function (room) { return shouldFilterChatroom(room, filter, unreadFilteredRoomsIds); });
};
var isUnreadFilterEnabled = function () {
    var chatSdk = require('../../api/chat-sdk').chatSdk;
    return chatSdk.isExperimentOn(constants.experiments.FilterByUnread);
};
export function shouldFilterChatroom(chatroom, filter, unreadFilteredRoomsIds) {
    if (!filter || _isEmpty(filter)) {
        return !chatroom.isArchived;
    }
    var roomIsCurrentlyFilteredByUnread = unreadFilteredRoomsIds === null || unreadFilteredRoomsIds === void 0 ? void 0 : unreadFilteredRoomsIds.includes(chatroom.id);
    if (isUnreadFilterEnabled() && roomIsCurrentlyFilteredByUnread && shouldFilterArchived(chatroom, filter)) {
        return true;
    }
    var filters = [
        shouldFilterArchived,
        shouldFilterByParticipantId,
        shouldFilterByParticipantType,
        shouldFilterByLabelId,
        shouldFilterUnread,
    ];
    return filters.every(function (f) { return f(chatroom, filter); });
}
function shouldFilterArchived(chatroom, filter) {
    if (filter.isArchived) {
        return !!chatroom.isArchived;
    }
    else {
        return !chatroom.isArchived;
    }
}
function shouldFilterUnread(chatroom, filter) {
    if (!isUnreadFilterEnabled()) {
        return true;
    }
    if (filter.isUnread) {
        return !!isChatroomUnread(chatroom);
    }
    else {
        return true;
    }
}
function shouldFilterByParticipantId(chatroom, filter) {
    var _a;
    if ((_a = filter.participantIds) === null || _a === void 0 ? void 0 : _a.length) {
        return filter.participantIds.some(function (pid) { return pid === chatroom.participantId; });
    }
    else {
        return true;
    }
}
function shouldFilterByParticipantType(chatroom, filter) {
    if (filter.participantType === 'business') {
        var isCurrentUserContributor = chatroom.participantId === _get(chatroom, 'businessContext.id');
        return isCurrentUserContributor && chatroom.pluginName === 'Engage';
    }
    else if (filter.participantType === 'siteMember') {
        var isCurrentUserMember = chatroom.participantId !== _get(chatroom, 'businessContext.id');
        return chatroom.pluginName === 'Social' || (chatroom.pluginName === 'Engage' && isCurrentUserMember);
    }
    else {
        return true;
    }
}
function shouldFilterByLabelId(chatroom, filter) {
    if (filter.labelIds && filter.labelIds.length && chatroom.labelIds) {
        return filter.labelIds.some(function (labelId) { return chatroom.labelIds.includes(labelId); });
    }
    else {
        return true;
    }
}
export function isChatroomUnread(chatroom) {
    var lastMessage = chatroom.lastMessage, _a = chatroom.lastReadMessageSequence, lastReadMessageSequence = _a === void 0 ? default_lastReadMessageSequence : _a;
    if (!lastMessage) {
        return undefined;
    }
    return lastReadMessageSequence < lastMessage.sequence;
}
