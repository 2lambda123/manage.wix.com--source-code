import { __awaiter, __extends, __generator } from "tslib";
import * as chatEventEmitter from '../../services/chat-event-emitter.service';
import { chatRoomDbScheme } from './dbSchemes';
import { promiseTimeout } from '../../utils/utils.index';
var BaseModel = /** @class */ (function () {
    function BaseModel() {
    }
    Object.defineProperty(BaseModel.prototype, "_ormModelWrapper", {
        get: function () {
            return this.getDBModel()._ormModelWrapper;
        },
        enumerable: false,
        configurable: true
    });
    BaseModel.prototype.getSource = function (methodName) {
        return this.constructor.name + "." + methodName;
    };
    BaseModel.prototype.clear = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryAndReport(this.getDBModel().clear(), this.getSource('clear'))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BaseModel.prototype.delete = function (list) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryAndReport(this.getDBModel().delete(list), this.getSource('delete'))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BaseModel.prototype.loadAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryAndReport(this.getDBModel().loadAll(), this.getSource('loadAll'))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    BaseModel.prototype.query = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryAndReport(this.getDBModel().query(), this.getSource('query'))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    BaseModel.prototype.rawQuery = function (query, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.tryAndReport(this.getDBModel().rawQuery(query, params), this.getSource('rawQuery'))];
            });
        });
    };
    BaseModel.prototype.serializeNonRelationalValues = function (value) {
        return this.getDBModel().serializeNonRelationalValues(value);
    };
    BaseModel.prototype._typeormQuery = function () {
        return this.getDBModel()._typeormQuery();
    };
    BaseModel.prototype.splitToBatches = function (data) {
        var columnsNumber = Object.keys(this.getDBModel()._ormModelWrapper.columns).length;
        if (data.length * columnsNumber >= 999) {
            var batches = [];
            var batchSize = Math.floor(998 / columnsNumber);
            var numberOfSplits = Math.floor(data.length / batchSize) + 1;
            for (var currentBatchCount = 0; currentBatchCount < numberOfSplits; currentBatchCount++) {
                var batchBeginning = currentBatchCount * batchSize;
                var batchEnd = batchBeginning + batchSize;
                var currentBatch = data.slice(batchBeginning, batchEnd);
                batches.push(currentBatch);
            }
            return batches;
        }
        else {
            return [data];
        }
    };
    BaseModel.prototype.save = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var batches;
            var _this = this;
            return __generator(this, function (_a) {
                batches = this.splitToBatches(data);
                return [2 /*return*/, this.tryAndReport(Promise.all(batches.map(function (batch) { return _this.saveBatch(batch); })), this.getSource('save'))];
            });
        });
    };
    BaseModel.prototype.saveBatch = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var serializedValues, tQuery, _a, query, parameters, newQuery;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        serializedValues = this.getDBModel().serializeNonRelationalValues(data);
                        return [4 /*yield*/, this.getDBModel()._typeormQuery()];
                    case 1:
                        tQuery = _b.sent();
                        _a = tQuery.insert().values(serializedValues).getQueryAndParameters(), query = _a[0], parameters = _a[1];
                        newQuery = query.replace(/INSERT/, 'INSERT OR REPLACE');
                        return [4 /*yield*/, this.getDBModel().rawQuery(newQuery, parameters)];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BaseModel.prototype.update = function (list) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.tryAndReport(this.getDBModel().update(list), this.getSource('update'))];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    BaseModel.prototype.tryAndReport = function (promise, source) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, promiseTimeout(promise, 10000, source)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        console.warn("Error in DB Storage " + source + ": '" + error_1 + "'");
                        chatEventEmitter.emit(chatEventEmitter.CHAT_EVENTS.BI_ERROR, {
                            tag: 'db-storage',
                            description: source,
                            errorName: error_1,
                        });
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return BaseModel;
}());
var MessageModel = /** @class */ (function (_super) {
    __extends(MessageModel, _super);
    function MessageModel(dbStorageEngine) {
        var _this = _super.call(this) || this;
        _this.model = dbStorageEngine.getModel('chat', 'message'); // these strings should come from outside
        return _this;
    }
    MessageModel.prototype.getDBModel = function () {
        return this.model;
    };
    return MessageModel;
}(BaseModel));
export { MessageModel };
var ChatroomModel = /** @class */ (function (_super) {
    __extends(ChatroomModel, _super);
    function ChatroomModel(dbStorageEngine) {
        var _this = _super.call(this) || this;
        var properties = chatRoomDbScheme.properties;
        _this.id = properties.id;
        _this.isArchived = properties.isArchived;
        _this.isTemporary = properties.isTemporary;
        _this.participantId = properties.participantId;
        _this.isPrivate = properties.isPrivate;
        _this.cursor = properties.cursor;
        _this.lastMessage = properties.lastMessage;
        _this.lastMessages = properties.lastMessages;
        _this.lastReadMessageSequence = properties.lastReadMessageSequence;
        _this.lastSeenMessageSequence = properties.lastSeenMessageSequence;
        _this.unreadCount = properties.unreadCount;
        _this.offlineChannels = properties.offlineChannels;
        _this.displayData = properties.displayData;
        _this.status = properties.status;
        _this.sortRank = properties.sortRank;
        _this.participantCount = properties.participantCount;
        _this.clientReference = properties.clientReference;
        _this.clientReferenceType = properties.clientReferenceType;
        _this.createdAt = properties.createdAt;
        _this.createdBy = properties.createdBy;
        _this.businessContext = properties.businessContext;
        _this.pluginName = properties.pluginName;
        _this.enrichedChatroomLoaded = properties.enrichedChatroomLoaded;
        _this.labelIds = properties.labelIds;
        _this.messageDeliveryError = properties.messageDeliveryError;
        _this.model = dbStorageEngine.getModel('chat', 'chatroom');
        return _this;
    }
    ChatroomModel.prototype.getDBModel = function () {
        return this.model;
    };
    return ChatroomModel;
}(BaseModel));
export { ChatroomModel };
