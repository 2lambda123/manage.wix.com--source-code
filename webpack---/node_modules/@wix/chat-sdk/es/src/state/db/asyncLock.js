import { __awaiter, __generator } from "tslib";
var AsyncLock = /** @class */ (function () {
    function AsyncLock() {
        this.queue = Promise.resolve();
        this.setInitialState();
    }
    AsyncLock.prototype.setInitialState = function () {
        this.queue = Promise.resolve();
    };
    AsyncLock.prototype.addToQueue = function (func) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.queue = this.queue.then(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, func()];
                            case 1: return [2 /*return*/, _a.sent()];
                        }
                    });
                }); });
                return [2 /*return*/, this.queue];
            });
        });
    };
    AsyncLock.prototype.reset = function () {
        this.setInitialState();
    };
    return AsyncLock;
}());
export default AsyncLock;
