import { __awaiter, __generator } from "tslib";
import _get from 'lodash/get';
import _isEqual from 'lodash/isEqual';
import { promiseTimeout, stateObjToArray } from '../../utils/utils.index';
import AsyncLock from './asyncLock';
import { ChatroomModel, MessageModel } from './state-to-db.model';
var StateToDbService = /** @class */ (function () {
    function StateToDbService(dbStorageEngine) {
        this.previousState = undefined;
        this.initStore = this.initStore.bind(this);
        this.loadChatrooms = this.loadChatrooms.bind(this);
        this.loadMessages = this.loadMessages.bind(this);
        this.updateModel = this.updateModel.bind(this);
        this.updateChatroomsInDB = this.updateChatroomsInDB.bind(this);
        this.updateMessagesInDB = this.updateMessagesInDB.bind(this);
        this.clearAll = this.clearAll.bind(this);
        this.dbStorageEngine = dbStorageEngine;
        this.asyncLock = new AsyncLock();
        this.initModel();
    }
    StateToDbService.prototype.initModel = function () {
        this.messageModel = new MessageModel(this.dbStorageEngine);
        this.chatroomModel = new ChatroomModel(this.dbStorageEngine);
        this.models = [this.messageModel.getDBModel(), this.chatroomModel.getDBModel()];
        this.stateListeners = [
            {
                onStateChange: this.updateChatroomsInDB,
                path: 'chatrooms.byId',
            },
            {
                onStateChange: this.updateMessagesInDB,
                path: 'messages.byId',
            },
        ];
    };
    StateToDbService.prototype.getStoreListener = function (store) {
        var _this = this;
        return function () {
            var currentState = store.getState();
            _this.stateListeners.forEach(function (listener) {
                var currentPartialState = _get(currentState, listener.path);
                var previousPartialState = _get(_this.previousState, listener.path);
                if (!_isEqual(currentPartialState, previousPartialState)) {
                    listener.onStateChange(currentPartialState, previousPartialState);
                }
            });
            _this.previousState = currentState;
        };
    };
    StateToDbService.prototype.initStore = function (store) {
        var storeListener = this.getStoreListener(store);
        store.subscribe(storeListener);
    };
    StateToDbService.prototype.loadChatrooms = function (_a) {
        var _this = this;
        var filter = _a.filter, pageSize = _a.pageSize;
        // FIXME this actually returns a State chatrooms
        return function () { return __awaiter(_this, void 0, void 0, function () {
            var query, chatroomsObj, chatroomsArray, result;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.chatroomModel.query()];
                    case 1:
                        query = (_a.sent()).orderBy('sortRank', 'DESC');
                        if (filter && filter.isArchived !== undefined) {
                            query.where({ param: 'isArchived', value: filter.isArchived, operator: '=' });
                        }
                        // TODO: query where participantId=filter.participantIds[0] OR participantId=filter.participantIds[1]
                        // if (filter && filter.participantIds && filter.participantIds[0]) {
                        //   query.where('participantId', filter.participantIds[0]);
                        // }
                        // TODO: Implement paging
                        // if (nextPointer) {
                        //   query.where({param: 'sortRank', value: nextPointer, operator: '<'})
                        // }
                        if (pageSize && pageSize > 0) {
                            query.limit(pageSize);
                        }
                        return [4 /*yield*/, this.asyncLock.addToQueue(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                return [2 /*return*/, promiseTimeout(query.fetch(), 10000, 'loadChatrooms')];
                            }); }); })];
                    case 2:
                        chatroomsObj = _a.sent();
                        chatroomsArray = stateObjToArray(chatroomsObj);
                        result = {
                            chatrooms: {
                                items: chatroomsArray,
                            },
                            unreadChatroomCount: 0,
                            unreadChatroomIds: [],
                        };
                        return [2 /*return*/, result];
                }
            });
        }); };
    };
    StateToDbService.prototype.loadMessages = function (_a) {
        var _this = this;
        var chatroomId = _a.chatroomId, pageSize = _a.pageSize;
        return function () { return __awaiter(_this, void 0, void 0, function () {
            var query, messagesObj, messagesArray;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.messageModel.query()];
                    case 1:
                        query = (_a.sent()).orderBy('sequence', 'DESC');
                        if (chatroomId) {
                            query.where({ param: 'chatroomId', value: chatroomId, operator: '=' });
                        }
                        if (pageSize && pageSize > 0) {
                            query.limit(pageSize);
                        }
                        return [4 /*yield*/, query.fetch()];
                    case 2:
                        messagesObj = _a.sent();
                        messagesArray = stateObjToArray(messagesObj);
                        return [2 /*return*/, {
                                items: messagesArray,
                            }];
                }
            });
        }); };
    };
    StateToDbService.prototype.updateModel = function (model, newObj, oldObj) {
        return __awaiter(this, void 0, void 0, function () {
            var deletedList, updateList;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!oldObj || oldObj === {}) {
                            return [2 /*return*/];
                        }
                        deletedList = this.getDeleted(oldObj, newObj);
                        if (!(deletedList.length > 0)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.asyncLock.addToQueue(function () { return __awaiter(_this, void 0, void 0, function () {
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, model._typeormQuery()];
                                        case 1: return [4 /*yield*/, (_a.sent())
                                                .delete()
                                                .whereInIds(deletedList.map(function (item) { return item.id; }))
                                                .execute()];
                                        case 2: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        updateList = stateObjToArray(newObj);
                        if (!(updateList.length > 0)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.asyncLock.addToQueue(function () { return model.save(updateList); })];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    // TODO add type!
    StateToDbService.prototype.updateChatroomsInDB = function (newChatroomsObj, oldChatroomsObj) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateModel(this.chatroomModel, newChatroomsObj, oldChatroomsObj)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    StateToDbService.prototype.updateMessagesInDB = function (newMessagesObj, oldMessagesObj) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.updateModel(this.messageModel, newMessagesObj, oldMessagesObj)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    StateToDbService.prototype.getDeleted = function (oldObj, newObj) {
        var deleted = [];
        if (oldObj && newObj) {
            Object.keys(oldObj).forEach(function (id) {
                if (!newObj[id]) {
                    deleted.push(oldObj[id]);
                }
            });
        }
        return deleted;
    };
    StateToDbService.prototype.clearAll = function () {
        if (this.models) {
            this.models.forEach(function (model) { return model.clear(); });
        }
    };
    return StateToDbService;
}());
export default StateToDbService;
