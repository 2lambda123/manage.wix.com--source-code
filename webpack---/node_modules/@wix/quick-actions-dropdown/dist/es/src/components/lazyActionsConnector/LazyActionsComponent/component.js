import { __assign, __extends } from "tslib";
import * as React from 'react';
import { sendSiteActionsBI, setLoggerDefaults } from '../../../services/BIService';
import { BIEvents } from '../../../consts/bi';
import { ModuleRegistry } from 'react-module-container';
import { getRequestedDialogFromUrl } from '../helpers/get-requested-dialog-from-url';
import { create } from '@wix/fedops-logger';
export function sendOpenDialogBI(dialogBiName, metaSiteId, origin) {
    sendSiteActionsBI({
        evid: BIEvents.quickActionClicked,
        name: dialogBiName,
        msid: metaSiteId,
        origin: origin,
        hosting: 'MA'
    });
}
var LazyActionsComponent = /** @class */ (function (_super) {
    __extends(LazyActionsComponent, _super);
    function LazyActionsComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.fedopsLogger = create('site-actions-service');
        _this.onNavigationCompleted = function (location) {
            _this.setState(function (prevState) {
                var openedDialog = getRequestedDialogFromUrl();
                if (openedDialog && openedDialog !== prevState.openedDialog) {
                    return {
                        openedDialog: openedDialog
                    };
                }
            });
        };
        _this.closeAllDialogs = function () {
            _this.setState(function (state) { return (__assign(__assign({}, state), { openedDialog: null })); });
            var onDialogActionClose = _this.props.onDialogActionClose;
            if (onDialogActionClose) {
                onDialogActionClose();
            }
        };
        _this.onOpenDialogRequest = function (dialog) {
            _this.sendOpenDialogBI(dialog.biName);
            _this.fedopsLogger.interactionStarted(dialog.dialogName + "-dialog-open");
            _this.openDialog(dialog.dialogName);
        };
        _this.openDialog = function (dialogNameToOpen) {
            _this.setState(function (state) { return (__assign(__assign({}, state), { openedDialog: dialogNameToOpen })); });
        };
        _this.state = {
            dealerData: {
                userIsRegisteredToEditorX: false,
            },
            componentIsReady: false,
            isI18NLoaded: false,
            openedDialog: getRequestedDialogFromUrl(),
        };
        return _this;
    }
    LazyActionsComponent.prototype.componentDidMount = function () {
        this.updateStateAndBIDefaults();
        this.moduleRegistrySubscription = ModuleRegistry.addListener('businessManager.onNavigationCompleted', this.onNavigationCompleted);
    };
    LazyActionsComponent.prototype.componentWillUnmount = function () {
        if (this.moduleRegistrySubscription) {
            this.moduleRegistrySubscription.remove();
        }
    };
    LazyActionsComponent.prototype.updateStateAndBIDefaults = function () {
        var _a = this.props, metaSiteId = _a.metaSiteId, origin = _a.origin;
        setLoggerDefaults({ msid: metaSiteId, origin: origin });
    };
    LazyActionsComponent.prototype.sendOpenDialogBI = function (dialogBiName) {
        sendOpenDialogBI(dialogBiName, this.props.metaSiteId, this.props.origin);
    };
    return LazyActionsComponent;
}(React.PureComponent));
export { LazyActionsComponent };
//# sourceMappingURL=component.js.map