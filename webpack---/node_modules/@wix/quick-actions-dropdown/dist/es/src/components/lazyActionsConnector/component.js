import { __assign, __extends } from "tslib";
import * as React from 'react';
import { I18nextProvider } from 'react-i18next';
import { LazyDialogs } from './LazyDialogs/component';
import { LazyActionsComponent } from './LazyActionsComponent/component';
import { getSiteActions } from './getSiteActions/getSiteActions';
import { TOrigin } from '../../types';
import { canDisplayDialog } from './helpers/dialogPermissionHandler';
import i18nClient from '../../i18n/root-i18n';
import { DealerOffersServingService } from '@wix/ambassador-dealer-offers-serving-service/http';
import { DEALER_SERVICE_URL, REAL_ESTATE_ID } from '../../consts/dealer';
export function lazyActionsConnector(WrappedComponent) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1(props) {
            var _this = _super.call(this, props) || this;
            _this.isDealerDataFromSitesList = function () {
                var _a = _this.props, experiments = _a.experiments, origin = _a.origin;
                var moveDealerCallToSitesListEnabled = experiments && experiments['specs.wossm.MoveDealerCallToSitesList'] === 'true';
                return moveDealerCallToSitesListEnabled && origin === TOrigin.mySites;
            };
            _this.onI18nFinishedLoading = function () {
                _this.t = _this.i18n.t.bind(_this.i18n);
                _this.setState({
                    isI18NLoaded: true
                });
            };
            _this.assignDealerDataToSiteActions = function () {
                var _a = _this.props, externalApiData = _a.externalApiData, experiments = _a.experiments;
                var dealerData = _this.state.dealerData;
                var enableMigrateToEditorX = experiments && experiments['specs.wos1.EnableMigrateToEditorX'] === 'true';
                return enableMigrateToEditorX && _this.isDealerDataFromSitesList() ? externalApiData === null || externalApiData === void 0 ? void 0 : externalApiData.dealerData : dealerData;
            };
            var locale = props.locale, experiments = props.experiments, siteActionsDropdownTranslationsStaticsUrl = props.topology.siteActionsDropdownTranslationsStaticsUrl;
            _this.i18n = i18nClient({
                locale: locale,
                translationsBaseUrl: siteActionsDropdownTranslationsStaticsUrl,
                experiments: experiments,
                callback: _this.onI18nFinishedLoading
            });
            return _this;
        }
        class_1.prototype.componentDidMount = function () {
            if (this.isDealerDataFromSitesList()) {
                this.setState({ componentIsReady: true });
            }
            else {
                this.getDealerDataFromServer();
            }
        };
        class_1.prototype.getDealerDataFromServer = function () {
            var _this = this;
            var experiments = this.props.experiments;
            var enableMigrateToEditorX = experiments && experiments['specs.wos1.EnableMigrateToEditorX'] === 'true';
            if (enableMigrateToEditorX) {
                var dealerService = DealerOffersServingService(DEALER_SERVICE_URL).DealerOffersServing();
                dealerService().listOffers({
                    realEstateId: REAL_ESTATE_ID,
                }).then(function (_a) {
                    var offers = _a.offers;
                    var userIsRegisteredToEditorX = Array.isArray(offers) && offers.length > 0;
                    _this.setState({
                        componentIsReady: true,
                        dealerData: {
                            userIsRegisteredToEditorX: userIsRegisteredToEditorX,
                        }
                    });
                }).catch(function () { return _this.setState({ componentIsReady: true }); });
            }
            else {
                this.setState({ componentIsReady: true });
            }
        };
        class_1.prototype.render = function () {
            var _this = this;
            var onDialogActionComplete = this.props.onDialogActionComplete || (function () { return 0; });
            var openDialog = function (dialog) { return function () { return _this.onOpenDialogRequest(dialog); }; };
            // Todo: once both projects pass false by default, "true" as default can be deprecated
            var _a = this.props, quickActionsData = _a.quickActionsData, experiments = _a.experiments, dataSourceReady = _a.dataSourceReady, origin = _a.origin;
            var _b = this.state, openedDialog = _b.openedDialog, isI18NLoaded = _b.isI18NLoaded, componentIsReady = _b.componentIsReady;
            var siteActions = [];
            if (isI18NLoaded && componentIsReady) {
                siteActions = getSiteActions({
                    t: this.t,
                    ready: dataSourceReady,
                    openDialog: openDialog,
                    quickActionsData: quickActionsData,
                    onDialogActionComplete: onDialogActionComplete,
                    experiments: experiments,
                    dealerData: this.assignDealerDataToSiteActions(),
                    origin: origin
                });
                if (dataSourceReady) {
                    var isPermitted = canDisplayDialog({
                        quickActionsData: quickActionsData,
                        requestedDialogName: openedDialog,
                        onDialogActionComplete: onDialogActionComplete,
                        origin: origin,
                        siteActions: siteActions
                    });
                    if (openedDialog && !isPermitted) {
                        this.closeAllDialogs();
                    }
                }
            }
            return (React.createElement(I18nextProvider, { i18n: this.i18n },
                React.createElement("span", null,
                    React.createElement(LazyDialogs, __assign({}, this.props, { closeAllDialogs: this.closeAllDialogs, experiments: experiments, openedDialog: openedDialog, siteActions: siteActions })),
                    React.createElement(WrappedComponent, __assign({ siteActions: siteActions }, this.props)))));
        };
        return class_1;
    }(LazyActionsComponent));
}
//# sourceMappingURL=component.js.map