import { __assign, __extends } from "tslib";
import * as React from 'react';
import { PureComponent } from 'react';
import { isActionWithDialog } from '../../../types';
import { prefetchDialogsInBundle } from './dialog-bundle-mapping';
var LazyDialogs = /** @class */ (function (_super) {
    __extends(LazyDialogs, _super);
    function LazyDialogs(props) {
        var _this = _super.call(this, props) || this;
        _this.alreadyRendered = {};
        _this.renderDialog = function (dialogName, dialogElement) {
            var openedDialog = _this.props.openedDialog;
            if (openedDialog === dialogName || _this.alreadyRendered[dialogName]) {
                _this.alreadyRendered[dialogName] = true;
                return dialogElement;
            }
        };
        _this.processActionDialogResult = function (actionName) { return function (dialogResult) {
            var _a = _this.props, metaSiteId = _a.metaSiteId, onDialogActionComplete = _a.onDialogActionComplete, closeAllDialogs = _a.closeAllDialogs;
            dialogResult.actionName = dialogResult.actionName || actionName;
            dialogResult.metaSiteId = dialogResult.metaSiteId || metaSiteId;
            if (onDialogActionComplete) {
                onDialogActionComplete(dialogResult);
            }
            closeAllDialogs();
        }; };
        _this.invokeActionDialogComplete = function (actionName, result) {
            _this.processActionDialogResult(actionName)({ result: result, metaSiteId: null });
        };
        _this.onOkHandler = function (dialogName) {
            return function (result) { return _this.invokeActionDialogComplete(dialogName, result); };
        };
        _this.renderDialogFromSiteAction = function (openedDialog) { return function (_a) {
            var actionName = _a.actionName, _b = _a.dialog, dialogName = _b.dialogName, component = _b.component;
            var ComponentName = component;
            var componentProps = __assign({ isOpen: openedDialog === dialogName, onOkHandler: _this.onOkHandler(dialogName), processDialogResult: _this.processActionDialogResult(actionName) }, _this.props);
            return _this.renderDialog(dialogName, React.createElement(ComponentName, __assign({ key: dialogName }, componentProps)));
        }; };
        if (props.prefetchBundle) {
            prefetchDialogsInBundle(props.prefetchBundle, props.topology, props.debug);
        }
        return _this;
    }
    LazyDialogs.prototype.render = function () {
        var _a = this.props, siteActions = _a.siteActions, openedDialog = _a.openedDialog;
        var dialogs = siteActions
            .filter(isActionWithDialog)
            .map(this.renderDialogFromSiteAction(openedDialog));
        return (React.createElement(React.Fragment, null, dialogs));
    };
    return LazyDialogs;
}(PureComponent));
export { LazyDialogs };
//# sourceMappingURL=component.js.map