/* eslint-disable */
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentDashboardWeb = void 0;
var json_proto_serializer_1 = require("@wix/json-proto-serializer");
var http_1 = require("@wix/ambassador/runtime/http");
var PaymentDashboardWeb = function (baseUrl, httpClientConfig) {
    var httpClient = new http_1.AmbassadorHTTPClient(baseUrl, httpClientConfig);
    return {
        BoPaymentDashboardService: function () {
            return function (headers) {
                var service = {
                    get: function (boGetPaymentRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/bo/v1/payments/{id}', boGetPaymentRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getDetailedList: function (boExportPaymentsRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/bo/v1/payments/export', boExportPaymentsRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getFilters: function (boGetFiltersRequest) { return httpClient.invoke('GET', '/bo/v1/filters', boGetFiltersRequest, headers); },
                    getList: function (boGetPaymentsListRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/bo/v1/payments', boGetPaymentsListRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [{ typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'createdDate'] }];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getTotals: function (boGetPaymentsTotalRequest) {
                        return httpClient.invoke('GET', '/bo/v1/payments/totals', boGetPaymentsTotalRequest, headers);
                    },
                };
                service.get.__http_method = 'GET';
                service.get.__http_url = '/bo/v1/payments/{id}';
                service.getDetailedList.__http_method = 'GET';
                service.getDetailedList.__http_url = '/bo/v1/payments/export';
                service.getFilters.__http_method = 'GET';
                service.getFilters.__http_url = '/bo/v1/filters';
                service.getList.__http_method = 'GET';
                service.getList.__http_url = '/bo/v1/payments';
                service.getTotals.__http_method = 'GET';
                service.getTotals.__http_url = '/bo/v1/payments/totals';
                return service;
            };
        },
        DisputeCasesService: function () {
            return function (headers) {
                var service = {
                    addEvidenceToDisputeCase: function (addEvidenceToDisputeCaseRequest) {
                        return httpClient.invoke('POST', '/v1/dispute-cases/{dispute_case_id}/evidences', addEvidenceToDisputeCaseRequest, headers);
                    },
                    attachUploadedEvidenceDocument: function (attachUploadedEvidenceDocumentRequest) {
                        return httpClient.invoke('POST', '/v1/dispute-cases/{dispute_case_id}/evidence/{evidence_id}/attach-uploaded-document', attachUploadedEvidenceDocumentRequest, headers);
                    },
                    clearEvidenceDocument: function (clearEvidenceDocumentRequest) {
                        return httpClient.invoke('POST', '/v1/dispute-cases/{dispute_case_id}/evidence/{evidence_id}/clear-document', clearEvidenceDocumentRequest, headers);
                    },
                    createDisputeCase: function (createDisputeCaseRequest) {
                        return httpClient.invoke('POST', '/v1/dispute-cases', createDisputeCaseRequest, headers);
                    },
                    deleteDisputeCase: function (deleteDisputeCaseRequest) {
                        return httpClient.invoke('DELETE', '/v1/dispute-cases/{dispute_case_id}', deleteDisputeCaseRequest, headers);
                    },
                    generateEvidenceUploadUrl: function (generateEvidenceUploadUrlRequest) {
                        return httpClient.invoke('POST', '/v1/dispute-cases/{dispute_case_id}/evidences/{evidence_id}/generate-upload-url', generateEvidenceUploadUrlRequest, headers);
                    },
                    getCompiledEvidenceDocument: function (getCompiledEvidenceDocumentRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/v1/dispute-cases/{dispute_case_id}/compiled-evidence-document', getCompiledEvidenceDocumentRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [{ typeName: 'google.protobuf.Timestamp', pathInPayload: ['document', 'urlExpirationDate'] }];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getDisputeCase: function (getDisputeCaseRequest) {
                        return httpClient.invoke('GET', '/v1/dispute-cases/{dispute_case_id}', getDisputeCaseRequest, headers);
                    },
                    getEvidenceDocuments: function (getEvidenceDocumentsRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('POST', '/v1/dispute-cases/{dispute_case_id}/evidence-documents', getEvidenceDocumentsRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [{ typeName: 'google.protobuf.Timestamp', pathInPayload: ['documents', 'urlExpirationDate'] }];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    removeEvidenceFromDisputeCase: function (removeEvidenceFromDisputeCaseRequest) {
                        return httpClient.invoke('DELETE', '/v1/dispute-cases/{dispute_case_id}/evidences/{evidence_id}', removeEvidenceFromDisputeCaseRequest, headers);
                    },
                    updateDisputeCase: function (updateDisputeCaseRequest) {
                        return httpClient.invoke('PATCH', '/v1/dispute-cases/{dispute_case.id}', updateDisputeCaseRequest, headers);
                    },
                    updateDisputeCaseEvidence: function (updateDisputeCaseEvidenceRequest) {
                        return httpClient.invoke('PATCH', '/v1/dispute-cases/{dispute_case_id}/evidence/{evidence.id}', updateDisputeCaseEvidenceRequest, headers);
                    },
                };
                service.addEvidenceToDisputeCase.__http_method = 'POST';
                service.addEvidenceToDisputeCase.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidences';
                service.attachUploadedEvidenceDocument.__http_method = 'POST';
                service.attachUploadedEvidenceDocument.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidence/{evidence_id}/attach-uploaded-document';
                service.clearEvidenceDocument.__http_method = 'POST';
                service.clearEvidenceDocument.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidence/{evidence_id}/clear-document';
                service.createDisputeCase.__http_method = 'POST';
                service.createDisputeCase.__http_url = '/v1/dispute-cases';
                service.deleteDisputeCase.__http_method = 'DELETE';
                service.deleteDisputeCase.__http_url = '/v1/dispute-cases/{dispute_case_id}';
                service.generateEvidenceUploadUrl.__http_method = 'POST';
                service.generateEvidenceUploadUrl.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidences/{evidence_id}/generate-upload-url';
                service.getCompiledEvidenceDocument.__http_method = 'GET';
                service.getCompiledEvidenceDocument.__http_url = '/v1/dispute-cases/{dispute_case_id}/compiled-evidence-document';
                service.getDisputeCase.__http_method = 'GET';
                service.getDisputeCase.__http_url = '/v1/dispute-cases/{dispute_case_id}';
                service.getEvidenceDocuments.__http_method = 'POST';
                service.getEvidenceDocuments.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidence-documents';
                service.removeEvidenceFromDisputeCase.__http_method = 'DELETE';
                service.removeEvidenceFromDisputeCase.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidences/{evidence_id}';
                service.updateDisputeCase.__http_method = 'PATCH';
                service.updateDisputeCase.__http_url = '/v1/dispute-cases/{dispute_case.id}';
                service.updateDisputeCaseEvidence.__http_method = 'PATCH';
                service.updateDisputeCaseEvidence.__http_url = '/v1/dispute-cases/{dispute_case_id}/evidence/{evidence.id}';
                return service;
            };
        },
        PaymentDashboardService: function () {
            return function (headers) {
                var service = {
                    get: function (getPaymentRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/api/merchant/v3/payments/{id}', getPaymentRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getApplicationsMetadata: function (getApplicationsMetadataRequest) {
                        return httpClient.invoke('GET', '/api/internal/merchant/v3/applications/metadata', getApplicationsMetadataRequest, headers);
                    },
                    getDetailedList: function (exportPaymentsRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/api/merchant/v3/payments/export', exportPaymentsRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getDisputeDetails: function (getDisputeDetailsRequest) {
                        return httpClient.invoke('GET', '/api/merchant/v3/payments/dispute-details', getDisputeDetailsRequest, headers);
                    },
                    getFilters: function (getFiltersRequest) { return httpClient.invoke('GET', '/api/merchant/v3/filters', getFiltersRequest, headers); },
                    getList: function (getPaymentsListRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/api/merchant/v3/payments', getPaymentsListRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [{ typeName: 'google.protobuf.Timestamp', pathInPayload: ['payments', 'createdDate'] }];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    getTotals: function (getPaymentsTotalRequest) {
                        return httpClient.invoke('GET', '/api/merchant/v3/payments/totals', getPaymentsTotalRequest, headers);
                    },
                };
                service.get.__http_method = 'GET';
                service.get.__http_url = '/api/merchant/v3/payments/{id}';
                service.getApplicationsMetadata.__http_method = 'GET';
                service.getApplicationsMetadata.__http_url = '/api/internal/merchant/v3/applications/metadata';
                service.getDetailedList.__http_method = 'GET';
                service.getDetailedList.__http_url = '/api/merchant/v3/payments/export';
                service.getDisputeDetails.__http_method = 'GET';
                service.getDisputeDetails.__http_url = '/api/merchant/v3/payments/dispute-details';
                service.getFilters.__http_method = 'GET';
                service.getFilters.__http_url = '/api/merchant/v3/filters';
                service.getList.__http_method = 'GET';
                service.getList.__http_url = '/api/merchant/v3/payments';
                service.getTotals.__http_method = 'GET';
                service.getTotals.__http_url = '/api/merchant/v3/payments/totals';
                return service;
            };
        },
        PaymentDashboardWixpayService: function () {
            return function (headers) {
                var service = {
                    acceptDispute: function (acceptDisputeRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('POST', '/api/merchant/v3/payments/{id}/dispute/accept', acceptDisputeRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    estimateImageSize: function (estimateImageSizeRequest) {
                        return httpClient.invoke('GET', '/api/internal/merchant/v3/payments/document/size', estimateImageSizeRequest, headers);
                    },
                    initiateTopUp: function (initiateTopUpTransactionRequest) {
                        return httpClient.invoke('POST', '/api/internal/merchant/v3/topup', initiateTopUpTransactionRequest, headers);
                    },
                    refund: function (refundRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('POST', '/api/merchant/v3/payments/{id}/refund', refundRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    uploadDocuments: function (uploadDocumentsRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('POST', '/api/merchant/v3/payments/{id}/dispute/documents', uploadDocumentsRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'authorization', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'captures', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'refunds', 'updatedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'openedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'submitDisputeDeadline'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'evidenceSubmittedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'dispute', 'resolvedDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'chargeback', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'method', 'boleto', 'expirationDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['payment', 'summary', 'updatedDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                };
                service.acceptDispute.__http_method = 'POST';
                service.acceptDispute.__http_url = '/api/merchant/v3/payments/{id}/dispute/accept';
                service.estimateImageSize.__http_method = 'GET';
                service.estimateImageSize.__http_url = '/api/internal/merchant/v3/payments/document/size';
                service.initiateTopUp.__http_method = 'POST';
                service.initiateTopUp.__http_url = '/api/internal/merchant/v3/topup';
                service.refund.__http_method = 'POST';
                service.refund.__http_url = '/api/merchant/v3/payments/{id}/refund';
                service.uploadDocuments.__http_method = 'POST';
                service.uploadDocuments.__http_url = '/api/merchant/v3/payments/{id}/dispute/documents';
                return service;
            };
        },
        WixPaymentsAccountDashboardService: function () {
            return function (headers) {
                var service = {
                    listSites: function (listSitesRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/api/merchant/v3/sites', listSitesRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['sites', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['sites', 'accounts', 'createdDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                    query: function (querySitesRequest) { return __awaiter(void 0, void 0, void 0, function () {
                        var response, responseTransformations, deSerializedResponse;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, httpClient.invoke('GET', '/api/merchant/v3/sites/query', querySitesRequest, headers)];
                                case 1:
                                    response = _a.sent();
                                    responseTransformations = [
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['sites', 'createdDate'] },
                                        { typeName: 'google.protobuf.Timestamp', pathInPayload: ['sites', 'accounts', 'createdDate'] },
                                    ];
                                    deSerializedResponse = json_proto_serializer_1.batchFromJson(response, responseTransformations);
                                    return [2 /*return*/, deSerializedResponse];
                            }
                        });
                    }); },
                };
                service.listSites.__http_method = 'GET';
                service.listSites.__http_url = '/api/merchant/v3/sites';
                service.query.__http_method = 'GET';
                service.query.__http_url = '/api/merchant/v3/sites/query';
                return service;
            };
        },
    };
};
exports.PaymentDashboardWeb = PaymentDashboardWeb;
exports.PaymentDashboardWeb.__transport = 'http';
__exportStar(require("./types"), exports);
//# sourceMappingURL=http.js.map