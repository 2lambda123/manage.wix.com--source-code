"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.configureGQLClient = void 0;
var tslib_1 = require("tslib");
var lodash_1 = tslib_1.__importDefault(require("lodash"));
var ServiceInterceptor_1 = require("@wix/multilingual-interceptor/dist/src/ServiceInterceptor");
var apollo_client_1 = tslib_1.__importStar(require("apollo-client"));
var http_1 = require("../common/http");
var constants_1 = require("../constants");
var cookies_1 = require("../utils/cookies");
var graphqlResponsesCompareService_1 = require("../graphqlResponsesCompareService/graphqlResponsesCompareService");
var topology_1 = require("../dashboard/topology");
var multiCurrencyGQLInterceptor_1 = require("./multiCurrencyGQLInterceptor");
function getApolloClient(options, uri) {
    var csrfToken = cookies_1.getCsrfToken();
    function getInstance() {
        return options.instanceResolver
            ? options.instanceResolver.getInstance()
            : options.instance || options.hostingService.getInstance();
    }
    function getHeaders() {
        var instance = getInstance();
        var headers = http_1.getHttpCommonHeaders(instance);
        if (csrfToken) {
            headers[constants_1.CSRF_HEADER_NAME] = csrfToken;
        }
        return headers;
    }
    var networkInterface = !lodash_1.default.isUndefined(options.networkInterface)
        ? options.networkInterface
        : apollo_client_1.createNetworkInterface({
            uri: uri,
            opts: {
                credentials: 'include',
            },
        });
    if (networkInterface.use) {
        var middleWares = [
            {
                applyMiddleware: function (req, next) {
                    req.options.headers = getHeaders();
                    req.request.source = req.request.source || 'WixStoresWebClient';
                    next();
                },
            },
            ServiceInterceptor_1.multilingualGQLInterceptor({
                param: ServiceInterceptor_1.getUrlParameterFromUrl('lang', window.location.search),
                instance: getInstance(),
                locale: ServiceInterceptor_1.getUrlParameterFromUrl('dateNumberFormat', window.location.search),
                isPrimary: ServiceInterceptor_1.getUrlParameterFromUrl('isPrimaryLanguage', window.location.search),
            }),
        ];
        if (options.shouldAddMultiCurrencyHeader) {
            middleWares.push(multiCurrencyGQLInterceptor_1.multiCurrencyGQLInterceptor({
                currentCurrency: ServiceInterceptor_1.getUrlParameterFromUrl('currentCurrency', window.location.search),
            }));
        }
        networkInterface.use(middleWares);
    }
    return new apollo_client_1.default(tslib_1.__assign({ addTypename: !lodash_1.default.isUndefined(options.addTypename) ? options.addTypename : true, networkInterface: networkInterface }, (!lodash_1.default.isUndefined(options.dataIdFromObject) && { dataIdFromObject: options.dataIdFromObject })));
}
function comapreQueryResponses(options, scalaApolloClient, nodeApolloClient) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var gqlNodePromise, gqlScalaPromise, diff;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    gqlNodePromise = nodeApolloClient.query(tslib_1.__assign({}, options));
                    gqlScalaPromise = scalaApolloClient.query(tslib_1.__assign({}, options));
                    return [4 /*yield*/, graphqlResponsesCompareService_1.graphqlResponsesCompareService(gqlScalaPromise, gqlNodePromise)];
                case 1:
                    diff = _a.sent();
                    return [2 /*return*/, diff.length === 0 ? gqlNodePromise : gqlScalaPromise];
            }
        });
    });
}
exports.configureGQLClient = function (configOptions) {
    var scalaApolloClient = getApolloClient(configOptions, topology_1.GRAPHQL_ENDPOINT);
    if (configOptions.isCompartGqlResponses) {
        var nodeApolloClient_1 = getApolloClient(configOptions, topology_1.GRAPHQL_NODE_ENDPOINT);
        return {
            query: function (options) { return comapreQueryResponses(options, scalaApolloClient, nodeApolloClient_1); },
        };
    }
    if (configOptions.shouldUseNodeGql) {
        return getApolloClient(configOptions, topology_1.GRAPHQL_NODE_ENDPOINT);
    }
    return scalaApolloClient;
};
//# sourceMappingURL=graphql-client.js.map