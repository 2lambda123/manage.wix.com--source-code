"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphqlResponsesCompareService = exports.queryGql = void 0;
var tslib_1 = require("tslib");
var flat_1 = require("flat");
var lodash_1 = require("lodash");
var topology_1 = require("../dashboard/topology");
var sentry = window.__SENTRY__;
var hub = false && sentry ? sentry.hub : { captureMessage: lodash_1.noop };
exports.queryGql = function (httpClient, body) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var gqlNodePromise, gqlScalaPromise, diff;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                gqlNodePromise = httpClient.post(topology_1.GRAPHQL_NODE_ENDPOINT, body);
                gqlScalaPromise = httpClient.post(topology_1.GRAPHQL_ENDPOINT, body);
                return [4 /*yield*/, exports.graphqlResponsesCompareService(gqlScalaPromise, gqlNodePromise)];
            case 1:
                diff = _a.sent();
                return [2 /*return*/, diff.length === 0 ? gqlNodePromise : gqlScalaPromise];
        }
    });
}); };
exports.graphqlResponsesCompareService = function (gqlScalaPromise, gqlNodePromise) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var gqlNode, gqlScala, e_1, nodeResponse, scalaResponse, nodeResponseFlat, scalaResponseFlat, diff;
    var _a;
    return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _b.trys.push([0, 2, , 3]);
                return [4 /*yield*/, Promise.all([gqlNodePromise, gqlScalaPromise])];
            case 1:
                _a = tslib_1.__read.apply(void 0, [_b.sent(), 2]), gqlNode = _a[0], gqlScala = _a[1];
                return [3 /*break*/, 3];
            case 2:
                e_1 = _b.sent();
                /* istanbul ignore next */
                console.error('bad Node GQL response', e_1);
                /* istanbul ignore next */
                return [2 /*return*/, [e_1.toString()]];
            case 3:
                if (!gqlNode || !gqlNode.data || !gqlScala || !gqlScala.data) {
                    return [2 /*return*/, []];
                }
                nodeResponse = gqlNode.data;
                scalaResponse = gqlScala.data;
                nodeResponseFlat = flat_1.flatten(nodeResponse, {
                    safe: true,
                });
                scalaResponseFlat = flat_1.flatten(scalaResponse, {
                    safe: true,
                });
                diff = tslib_1.__spread(Object.keys(nodeResponseFlat), Object.keys(scalaResponseFlat)).filter(function (elem, pos, arr) { return arr.indexOf(elem) === pos; })
                    .reduce(function (differences, path) {
                    var nodeEntry = nodeResponseFlat[path];
                    var scalaEntry = scalaResponseFlat[path];
                    if (typeof nodeEntry === 'undefined') {
                        return differences.concat("GQL-COMPARE - " + path + " does not exist on node response");
                    }
                    if (typeof scalaEntry === 'undefined') {
                        return differences.concat("GQL-COMPARE - " + path + " does not exist on scala response");
                    }
                    // compare array content
                    if (Array.isArray(scalaEntry) && Array.isArray(nodeEntry)) {
                        if (scalaEntry.length === 0 && nodeEntry.length === 0) {
                            return differences;
                        }
                        var scalaItems = lodash_1.differenceBy(scalaEntry, nodeEntry, JSON.stringify).map(function (item) { return JSON.stringify(item); });
                        var nodeItems = lodash_1.differenceBy(nodeEntry, scalaEntry, JSON.stringify).map(function (item) { return JSON.stringify(item); });
                        return differences.concat(scalaItems.length === 0 ? [] : "GQL-COMPARE - array " + path + " in scala contains additional items", nodeItems.length === 0 ? [] : "GQL-COMPARE - array " + path + " in node contains additional items");
                    }
                    // ignore empty objects
                    if (scalaEntry &&
                        scalaEntry.constructor === Object &&
                        Object.keys(scalaEntry).length === 0 &&
                        nodeEntry &&
                        nodeEntry.constructor === Object &&
                        Object.keys(nodeEntry).length === 0) {
                        return differences;
                    }
                    if (scalaEntry !== nodeEntry) {
                        /* istanbul ignore next */
                        return differences.concat("GQL-COMPARE - " + path + " on node response is " + nodeEntry + " but on scala response its " + scalaEntry);
                    }
                    return differences;
                }, []);
                diff.map(function (dif) {
                    hub.captureMessage(dif);
                    console.error(diff);
                });
                return [2 /*return*/, diff];
        }
    });
}); };
//# sourceMappingURL=graphqlResponsesCompareService.js.map