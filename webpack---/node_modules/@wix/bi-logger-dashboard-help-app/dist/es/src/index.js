var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
 * @typedef {string} Url
 */
/**
 * @typedef {string} GUID
 */
/**
 * @typedef {number} DateTime
 */
var dummy;
var defaultConfig = { endpoint: 'dashboard-help-app' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 4 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'dashboard-help-app' });
    }
    ;
    /**
    * @typedef {Object} pageViewParams
    * @property {string} category - null
    * @property {string} editor_working_mode - editor mode {desktop, mobile}
    * @property {string} faq_type - null
    * @property {string} item_id - null
    * @property {string} item_name - null
    * @property {string} item_url - null
    * @property {string} lang - null
    * @property {string} origin - the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
    * @property {string} selectedCompType - the editor component the widget was opened from
    * @property {string} panel_name - the editor component the widget was opened from {header settings, add a button...}
    * @property {string} referral_name - null
    * @property {Url} referral_url - null
    * @property {string} source_name - null
    * @property {string} submit_mode - null
    **/
    /**
     * Name: page view. Evid: 531.
    
    
     * category - Type: string.
     *
     * editor_working_mode - Type: string. Desc: editor mode {desktop, mobile}
     *
     * faq_type - Type: string.
     *
     * item_id - Type: string.
     *
     * item_name - Type: string.
     *
     * item_url - Type: string.
     *
     * lang - Type: lng.
     *
     * origin - Type: string. Desc: the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
     *
     * selectedCompType - Type: string. Desc: the editor component the widget was opened from
     *
     * panel_name - Type: string. Desc: the editor component the widget was opened from {header settings, add a button...}
     *
     * referral_name - Type: string.
     *
     * referral_url - Type: url.
     *
     * source_name - Type: string.
     *
     * submit_mode - Type: string.
     * @param {pageViewParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.pageView = function (params) {
        return this.bi.log(__assign({ evid: 531 }, params));
    };
    /**
    * @typedef {Object} askingAQuestionParams
    * @property {DateTime} action_date - null
    * @property {string} dashboard_hosting - null
    * @property {string} editor_working_mode - editor mode {desktop, mobile}
    * @property {string} first_answer - null
    * @property {boolean} has_related - null
    * @property {string} lang - null
    * @property {GUID} msid - msid
    * @property {string} origin - the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
    * @property {string} selectedCompType - the editor component the widget was opened from
    * @property {string} panel_name - the editor component the widget was opened from {header settings, add a button...}
    * @property {string} question - null
    * @property {string} referral_name - null
    * @property {string} related_item - null
    * @property {string} source_name - null
    * @property {string} source_url - null
    **/
    /**
     * Name: asking a question. Evid: 520.
     * Event description: Like evid 2005 from src 77 however only for Wix tenant.
    
     * action_date - Type: datetime.
     *
     * dashboard_hosting - Type: string.
     *
     * editor_working_mode - Type: string. Desc: editor mode {desktop, mobile}
     *
     * first_answer - Type: string.
     *
     * has_related - Type: bool.
     *
     * lang - Type: lng.
     *
     * msid - Type: guid. Desc: msid
     *
     * origin - Type: string. Desc: the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
     *
     * selectedCompType - Type: string. Desc: the editor component the widget was opened from
     *
     * panel_name - Type: string. Desc: the editor component the widget was opened from {header settings, add a button...}
     *
     * question - Type: string.
     *
     * referral_name - Type: string.
     *
     * related_item - Type: string.
     *
     * source_name - Type: string.
     *
     * source_url - Type: string.
     * @param {askingAQuestionParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.askingAQuestion = function (params) {
        return this.bi.log(__assign({ evid: 520 }, params));
    };
    /**
    * @typedef {Object} gotNoAnswerParams
    * @property {string} dashboard_hosting - null
    * @property {string} editor_working_mode - editor mode {desktop, mobile}
    * @property {string} lang - null
    * @property {GUID} msid - null
    * @property {string} origin - the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
    * @property {string} selectedCompType - the editor component the widget was opened from
    * @property {string} panel_name - the editor component the widget was opened from {header settings, add a button...}
    * @property {string} question - null
    * @property {string} referral_name - null
    * @property {string} source_name - null
    * @property {string} source_url - null
    **/
    /**
     * Name: got no answer. Evid: 537.
    
    
     * dashboard_hosting - Type: string.
     *
     * editor_working_mode - Type: string. Desc: editor mode {desktop, mobile}
     *
     * lang - Type: lng.
     *
     * msid - Type: guid.
     *
     * origin - Type: string. Desc: the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
     *
     * selectedCompType - Type: string. Desc: the editor component the widget was opened from
     *
     * panel_name - Type: string. Desc: the editor component the widget was opened from {header settings, add a button...}
     *
     * question - Type: string.
     *
     * referral_name - Type: string.
     *
     * source_name - Type: string.
     *
     * source_url - Type: string.
     * @param {gotNoAnswerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.gotNoAnswer = function (params) {
        return this.bi.log(__assign({ evid: 537 }, params));
    };
    /**
    * @typedef {Object} clickOnAnswerParams
    * @property {DateTime} action_date - null
    * @property {string} answer - null
    * @property {string} dashboard_hosting - dashboard/onboarding/editor
    * @property {string} editor_working_mode - editor mode {desktop, mobile}
    * @property {boolean} has_related - null
    * @property {boolean} is_related - null
    * @property {string} item_url - null
    * @property {string} lang - null
    * @property {GUID} msid - msid
    * @property {string} order - null
    * @property {string} origin - the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
    * @property {string} selectedCompType - the editor component the widget was opened from
    * @property {string} panel_name - the editor component the widget was opened from {header settings, add a button...}
    * @property {string} question - null
    * @property {string} referral_name - null
    * @property {string} related_item - null
    * @property {string} source_name - null
    * @property {string} source_url - null
    **/
    /**
     * Name: click on answer. Evid: 521.
    
    
     * action_date - Type: datetime.
     *
     * answer - Type: string.
     *
     * dashboard_hosting - Type: string. Desc: dashboard/onboarding/editor
     *
     * editor_working_mode - Type: string. Desc: editor mode {desktop, mobile}
     *
     * has_related - Type: bool.
     *
     * is_related - Type: bool.
     *
     * item_url - Type: string.
     *
     * lang - Type: lng.
     *
     * msid - Type: guid. Desc: msid
     *
     * order - Type: string.
     *
     * origin - Type: string. Desc: the editor component the widget was opened from {gfpp, panel, tool bar, top bar, add menu}
     *
     * selectedCompType - Type: string. Desc: the editor component the widget was opened from
     *
     * panel_name - Type: string. Desc: the editor component the widget was opened from {header settings, add a button...}
     *
     * question - Type: string.
     *
     * referral_name - Type: string.
     *
     * related_item - Type: string.
     *
     * source_name - Type: string.
     *
     * source_url - Type: string.
     * @param {clickOnAnswerParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickOnAnswer = function (params) {
        return this.bi.log(__assign({ evid: 521 }, params));
    };
    /*event 999 on project 'com.wixpress.dashboard-help-app' has no function name set, please set one in BI Catalog.*/
    /*event 1 on project 'com.wixpress.dashboard-help-app' has no function name set, please set one in BI Catalog.*/
    /**
    * @typedef {Object} clickInDashboardParams
    * @property {string} hosting - ma
    * @property {string} item_status_desc - deprecated
    * @property {GUID} msid - --
    * @property {string} name - the site details' item: Connect Domain, Manage Plan...
    * @property {string} widget_name - the widget name in dashboard (this field added only in new dashboard)
    **/
    /**
     * Name: dashboard > click in dashboard. src: 5 Evid: 195.
     * Event description: Click on the action in dashboard widgets. (in the beginning this event was only for site details and in the new dashboard we added other clicks in different widgets.).
    
     * hosting - Type: string. Desc: ma
     *
     * item_status_desc - Type: string. Desc: deprecated
     *
     * msid - Type: guid. Desc: --
     *
     * name - Type: string. Desc: the site details' item: Connect Domain, Manage Plan...
     *
     * widget_name - Type: string. Desc: the widget name in dashboard (this field added only in new dashboard)
     * @param {clickInDashboardParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.clickInDashboard = function (params) {
        return this.bi.log(__assign({ evid: 195, src: 5 }, params));
    };
    /**
    * @typedef {Object} helpWidgetClickOnSeeAllResultsParams
    * @property {string} hosting - ADI/ MA/ editoe
    * @property {GUID} msid - msid
    * @property {string} platform - --
    * @property {string} query - query
    **/
    /**
     * Name: Help Widget -> click on see all results. src: 5 Evid: 5.
     * Event description: when a user has clicked on a "see all result" at the bottom.
    
     * hosting - Type: string. Desc: ADI/ MA/ editoe
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: --
     *
     * query - Type: string. Desc: query
     * @param {helpWidgetClickOnSeeAllResultsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.helpWidgetClickOnSeeAllResults = function (params) {
        return this.bi.log(__assign({ evid: 5, src: 5 }, params));
    };
    /**
    * @typedef {Object} helpWidgetErrorSearchingItemsParams
    * @property {string} hosting - ADI/ MA/ editoe
    * @property {GUID} msid - msid
    * @property {string} platform - --
    * @property {string} query - query
    **/
    /**
     * Name: Help Widget -> error searching items. src: 5 Evid: 6.
     * Event description: When a user has searched a query and there was a search error send event.
    
     * hosting - Type: string. Desc: ADI/ MA/ editoe
     *
     * msid - Type: guid. Desc: msid
     *
     * platform - Type: string. Desc: --
     *
     * query - Type: string. Desc: query
     * @param {helpWidgetErrorSearchingItemsParams} params The parameters for this event.
     * @return {Promise} Promise
    **/
    Logger.prototype.helpWidgetErrorSearchingItems = function (params) {
        return this.bi.log(__assign({ evid: 6, src: 5 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 4,
        endpoint: 'dashboard-help-app',
    };
}
//# sourceMappingURL=index.js.map