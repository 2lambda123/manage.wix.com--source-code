import { __assign, __extends } from "tslib";
import React, { Component } from 'react';
import { chatSdk, Constants, } from '@wix/chat-sdk';
export var withUnseenCount = function (WrappedComponent, filter) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1(props) {
            var _this = _super.call(this, props) || this;
            _this.state = {};
            return _this;
        }
        class_1.prototype.isExperimentOn = function () {
            return chatSdk.isExperimentOn(Constants.experiments.UnseenChatroomCount);
        };
        class_1.prototype.componentDidMount = function () {
            var _this = this;
            if (this.isExperimentOn()) {
                this.subscription = chatSdk.unseenChatroom.subscribeToCount(function (values) { return _this.setState(values); }, filter);
            }
        };
        class_1.prototype.componentWillUnmount = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        class_1.prototype.render = function () {
            var unseenCountProps = this.isExperimentOn()
                ? {
                    unseenCount: this.state.count,
                    unseenOverflow: this.state.overflow,
                }
                : {};
            var mergedProps = __assign(__assign({}, this.props), unseenCountProps);
            return React.createElement(WrappedComponent, __assign({}, mergedProps));
        };
        return class_1;
    }(Component));
};
//# sourceMappingURL=withUnseenCount.js.map