"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContactAvatar = void 0;
var React = require("react");
var avatar_helper_1 = require("./avatar-helper");
var styles = require("./ContactAvatar.scss");
var ContactAvatar = /** @class */ (function (_super) {
    __extends(ContactAvatar, _super);
    function ContactAvatar(props) {
        var _this = _super.call(this, props) || this;
        _this.flagImageAsBroken = function () {
            _this.setState({ isImageBroken: true });
        };
        _this.state = {
            isImageBroken: false,
        };
        return _this;
    }
    ContactAvatar.prototype.render = function () {
        var _a = this.props, initials = _a.initials, pictureUrl = _a.pictureUrl, badgeClassName = _a.badgeClassName, badge = _a.badge, hasShadow = _a.hasShadow, size = _a.size;
        var sizePx = size + "px";
        var fontSize = size / 3 + "px";
        var avatarContainerStyle = {
            height: sizePx,
            width: sizePx,
            lineHeight: sizePx,
            fontSize: fontSize,
            flexShrink: 0,
        };
        var avatarStyle = hasShadow ? styles.avatarInPanel : styles.avatar;
        var contactPicture = pictureUrl && !this.state.isImageBroken ? (React.createElement("img", { className: styles.avatarImage, "data-hook": "avatar-image", src: pictureUrl, onError: this.flagImageAsBroken })) : null;
        var initialsStyle = contactPicture
            ? { backgroundColor: 'transparent' }
            : { backgroundColor: avatar_helper_1.getColorByInitials(initials) };
        var renderedBadge = null;
        if (badge || badgeClassName) {
            var badgeSize = (size * 19) / 40; //default badge size is 19px for 40px avatar
            var clazzName = "" + styles.badge;
            var style = { height: badgeSize, width: badgeSize };
            if (badgeClassName) {
                renderedBadge = (React.createElement("div", { "data-hook": "badge", className: clazzName + " " + badgeClassName, style: style }));
            }
            else {
                renderedBadge = (React.createElement("img", { "data-hook": "badge", className: "" + clazzName, style: style, src: badge }));
            }
        }
        var withInitials = (React.createElement("div", { className: avatarStyle, "data-hook": "avatar-initials", style: initialsStyle },
            React.createElement("span", { className: styles.avatarInitials }, initials),
            contactPicture,
            renderedBadge));
        var withoutInitials = (React.createElement("div", { "data-hook": "empty-avatar", className: styles.avatarEmpty },
            contactPicture,
            renderedBadge));
        return (React.createElement("div", { "data-hook": "avatar-container", style: avatarContainerStyle }, initials ? withInitials : withoutInitials));
    };
    ContactAvatar.defaultProps = {
        size: 50,
        hasShadow: false,
    };
    return ContactAvatar;
}(React.Component));
exports.ContactAvatar = ContactAvatar;
//# sourceMappingURL=ContactAvatar.js.map