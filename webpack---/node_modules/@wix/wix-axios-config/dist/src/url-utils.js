'use strict';

exports.__esModule = true;
var absoluteUrlRegex = /^https?:\/\/|^\/\//i;
var protocolExpression = /^[a-z][a-z0-9.+-]*$/i;

var trimSlashes = function trimSlashes(str) {
  return str.replace(/^\/|\/$/g, '');
};
var isRelativeUrl = exports.isRelativeUrl = function isRelativeUrl(url) {
  return !absoluteUrlRegex.test(url);
};

var joinPath = exports.joinPath = function joinPath() {
  for (var _len = arguments.length, pathParts = Array(_len), _key = 0; _key < _len; _key++) {
    pathParts[_key] = arguments[_key];
  }

  var joinedPath = '';
  pathParts.forEach(function (pathPart) {
    var pathPartWithoutSlashes = pathPart && trimSlashes(pathPart);

    if (pathPartWithoutSlashes) {
      var separator = joinedPath && '/';
      var prefix = joinedPath === '' && /^\//.test(pathPart) ? '/' : '';
      joinedPath = '' + prefix + joinedPath + separator + pathPartWithoutSlashes;
    }
  });

  var lastPart = pathParts[pathParts.length - 1];
  if (lastPart[lastPart.length - 1] === '/') {
    joinedPath += '/';
  }

  return joinedPath;
};

var extractOrigin = exports.extractOrigin = function extractOrigin(location) {
  var extendedProtocolSeperator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  var protocolSeparator = extendedProtocolSeperator ? '://' : '//';
  var protocol = location.protocol,
      hostname = location.hostname,
      port = location.port;

  var host = hostname + (port ? ':' + port : '');
  var origin = [protocol, host].join(protocolSeparator);
  return location.origin || origin;
};

var parseHost = function parseHost(string, parts) {
  string = string.replace(/\\/g, '/');

  // extract host:port
  var pos = string.indexOf('/');

  if (pos === -1) {
    pos = string.length;
  }

  var t = string.substring(0, pos).split(':');
  parts.hostname = t[0] || null;
  parts.port = t[1] || null;

  if (parts.hostname && string.substring(pos).charAt(0) !== '/') {
    pos++;
    string = '/' + string;
  }

  return string.substring(pos) || '/';
};

var parseUrl = exports.parseUrl = function parseUrl(string) {
  var parts = {};
  var pos = void 0;

  // extract fragment
  pos = string.indexOf('#');
  if (pos > -1) {
    parts.fragment = string.substring(pos + 1) || null;
    string = string.substring(0, pos);
  }

  // extract query
  pos = string.indexOf('?');
  if (pos > -1) {
    parts.query = string.substring(pos + 1) || null;
    string = string.substring(0, pos);
  }

  if (string.substring(0, 2) === '//') {
    // relative-scheme
    parts.protocol = null;
    string = string.substring(2);
    // extract "user:pass@host:port"
    string = parseHost(string, parts);
  } else {
    pos = string.indexOf(':');
    if (pos > -1) {
      parts.protocol = string.substring(0, pos) || null;
      if (parts.protocol && !parts.protocol.match(protocolExpression)) {
        // : may be within the path
        parts.protocol = undefined;
      } else if (string.substring(pos + 1, pos + 3) === '//') {
        string = string.substring(pos + 3);

        // extract "user:pass@host:port"
        string = parseHost(string, parts);
      } else {
        string = string.substring(pos + 1);
      }
    }
  }

  parts.path = string;

  return parts;
};