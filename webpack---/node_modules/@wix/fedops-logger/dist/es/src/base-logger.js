'use strict';

exports.__esModule = true;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _dataSource = require('./data-source/data-source');

var _dataSource2 = _interopRequireDefault(_dataSource);

var _performance = require('./performance/performance');

var _performance2 = _interopRequireDefault(_performance);

var _env = require('./env');

var _resourceItem = require('./data-items/resource/resource-item');

var _resourceItem2 = _interopRequireDefault(_resourceItem);

var _biLoadPhaseItem = require('./data-items/app-load/bi-load-phase-item');

var _biLoadPhaseItem2 = _interopRequireDefault(_biLoadPhaseItem);

var _durationItem = require('./data-items/duration/duration-item');

var _durationItem2 = _interopRequireDefault(_durationItem);

var _biErrorItem = require('./data-items/common/bi-error-item');

var _biErrorItem2 = _interopRequireDefault(_biErrorItem);

var _appLoadingPhaseItem = require('./data-items/app-load/app-loading-phase-item');

var _appLoadingPhaseItem2 = _interopRequireDefault(_appLoadingPhaseItem);

var _prefixedAppLoadingPhaseItem = require('./data-items/app-load/prefixed-app-loading-phase-item');

var _prefixedAppLoadingPhaseItem2 = _interopRequireDefault(_prefixedAppLoadingPhaseItem);

var _biLoadFinishItem = require('./data-items/app-load/bi-load-finish-item');

var _biLoadFinishItem2 = _interopRequireDefault(_biLoadFinishItem);

var _biInteractionStartItem = require('./data-items/interaction/bi-interaction-start-item');

var _biInteractionStartItem2 = _interopRequireDefault(_biInteractionStartItem);

var _biInteractionEndItem = require('./data-items/interaction/bi-interaction-end-item');

var _biInteractionEndItem2 = _interopRequireDefault(_biInteractionEndItem);

var _sessionManager = require('./session-manager/session-manager');

var _sessionManager2 = _interopRequireDefault(_sessionManager);

var _loadingPhases = require('./loading-phases/loading-phases');

var _loadingPhases2 = _interopRequireDefault(_loadingPhases);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var callHook = function callHook(hook, hookArgs) {
  if (hook) {
    return hook(hookArgs);
  }
};

/**
 * Base Logger
 * @param appName
 * @param appVersion
 * @param reporter
 *
 * Params object properties:
 * @param baseUrl
 * @param appId
 * @param disableAutoLoadFinish
 * @param disableAutoPhaseFinish
 * @param interactionTimeout
 * @param timeoutHook
 * @param startHook
 * @param endHook
 * Before adding new parameters to the reported events, please make sure the BI schema supports them:
 * http://bo.wix.com/bi-catalog-webapp/#/sources/72
 */

var BaseLogger = function () {
  function BaseLogger(appName, appVersion, reporter, params) {
    _classCallCheck(this, BaseLogger);

    var defaultParams = {
      appId: null,
      metasiteId: null,
      sessionId: _sessionManager2.default.getSessionId(),
      disableAutoLoadFinish: false,
      disableAutoPhaseFinish: false,
      interactionTimeout: null,
      timeoutHook: null,
      startHook: null,
      endHook: null
    };

    var paramsWithDefaults = Object.assign({}, defaultParams, params);
    this.appName = appName;
    this.appVersion = appVersion;
    this.appId = paramsWithDefaults.appId;
    this.metasiteId = paramsWithDefaults.metasiteId;
    this.reporter = reporter;

    this.params = { sessionId: paramsWithDefaults.sessionId };
    this.disableAutoLoadFinish = paramsWithDefaults.disableAutoLoadFinish;

    this.disableAutoPhaseFinish = paramsWithDefaults.disableAutoPhaseFinish;
    this.loadingPhases = new _loadingPhases2.default(appName);
    this.dataSource = new _dataSource2.default({ appName: appName });

    this._outgoingInteractions = {};
    this.interactionTimeout = paramsWithDefaults.interactionTimeout;
    this.timeoutHook = paramsWithDefaults.timeoutHook;
    this.startHook = paramsWithDefaults.startHook;
    this.endHook = paramsWithDefaults.endHook;
  }

  BaseLogger.prototype._report = function _report(dataSource) {
    return this.reporter.report(dataSource.mergeItems());
  };

  BaseLogger.prototype.getAppName = function getAppName() {
    return this.appName;
  };

  BaseLogger.prototype.getAppVersion = function getAppVersion() {
    return this.appVersion;
  };

  BaseLogger.prototype.getReporter = function getReporter() {
    return this.reporter;
  };

  BaseLogger.prototype.getParam = function getParam(paramName) {
    return this.params[paramName];
  };

  BaseLogger.prototype._isDisableAutoLoadFinish = function _isDisableAutoLoadFinish() {
    return this.disableAutoLoadFinish;
  };

  BaseLogger.prototype.isDisableAutoLoadFinish = function isDisableAutoLoadFinish() {
    return this._isDisableAutoLoadFinish();
  };

  BaseLogger.prototype.reportNetworkAnalysis = function reportNetworkAnalysis() {
    var _this = this;

    var resources = _performance2.default.getResources();
    setTimeout(function () {
      try {
        var resourceDataItem = new _resourceItem2.default(_this.sessionId);
        var analysis = resourceDataItem.performNetworkAnalysis(resources);
        if (!analysis) {
          return;
        }
        var dataSource = _this.dataSource.clone().addItem(resourceDataItem).addItem(analysis);
        _this.reporter.useBaseUrl();
        _this._report(dataSource);
      } catch (e) {
        console.error('[fedops] Failed to report resource metrics', e);
      }
    }, 1000);
  };

  /**
   * Final phase.
   * Call this method when your application finishes loading and after all custom phases.
   */


  BaseLogger.prototype.appLoaded = function appLoaded() {
    if (this._appLoadedCalled) {
      return;
    }

    BaseLogger._clearLoadTimeout();
    BaseLogger._markAndMeasureAppLoad();
    this._appLoadedCalled = true;

    this._sendLastAppLoadPhaseIfNeeded();
    var dataSource = this._getAppLoadedDataSource();

    this.reportNetworkAnalysis();
    return this._report(dataSource);
  };

  BaseLogger._clearLoadTimeout = function _clearLoadTimeout() {
    if ((0, _env.env)() && (0, _env.env)().fedops && typeof (0, _env.env)().fedops.clearLoadTimeout === 'function') {
      (0, _env.env)().fedops.clearLoadTimeout();
    }
  };

  BaseLogger.prototype._getAppLoadedDataSource = function _getAppLoadedDataSource() {
    return this.dataSource.clone().addItem(new _biLoadFinishItem2.default(this.sessionId)).addItem(new _durationItem2.default(this.appName).setFirstRequestDuration());
  };

  BaseLogger._markAndMeasureAppLoad = function _markAndMeasureAppLoad() {
    _performance2.default.mark('[fedops] app-loaded');
    _performance2.default.measure('[fedops] app-loaded', 'navigationStart', '[fedops] app-loaded');
  };

  BaseLogger.prototype._sendLastAppLoadPhaseIfNeeded = function _sendLastAppLoadPhaseIfNeeded() {
    var appLoadingPhase = this.loadingPhases.getNextPhaseToReport();
    var shouldReportLastPhase = !this.disableAutoPhaseFinish && appLoadingPhase && appLoadingPhase.name !== _loadingPhases.CODE_PARSING_PHASE_NAME;

    if (shouldReportLastPhase) {
      this.reporter.useBaseUrl();
      this._report(this.dataSource.clone().addItem(new _prefixedAppLoadingPhaseItem2.default(appLoadingPhase)).addItem(new _biLoadPhaseItem2.default(this.sessionId)));
    }
  };

  /**
   * Custom interaction start (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/15)
   * @param {String} interactionName  interaction name
   */


  BaseLogger.prototype.interactionStarted = function interactionStarted(interactionName) {
    var _this2 = this;

    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        interactionTimeout = _ref.interactionTimeout,
        startHook = _ref.startHook,
        timeoutHook = _ref.timeoutHook;

    _performance2.default.mark(interactionName + ' started');
    var scheduleTimeoutEvent = function scheduleTimeoutEvent() {
      if (interactionTimeout || _this2.interactionTimeout) {
        return setTimeout(function () {
          var dataSource = _this2.dataSource.clone().addItem({ interactionName: interactionName }).addItem({ errorType: 'timeout' }).addItem(new _biErrorItem2.default(_this2.sessionId));

          _this2._report(dataSource);
          callHook(timeoutHook || _this2.timeoutHook, {
            name: interactionName,
            timeout: interactionTimeout || _this2.interactionTimeout
          });
        }, interactionTimeout || _this2.interactionTimeout);
      }
    };

    var dataSource = this.dataSource.clone().addItem({ name: interactionName }).addItem(new _biInteractionStartItem2.default(this.sessionId));

    this._outgoingInteractions[interactionName] = {
      timestamp: _performance2.default.now(),
      timeout: interactionTimeout || this.interactionTimeout
    };
    this.reporter.useBaseUrl();
    this._report(dataSource);
    callHook(startHook || this.startHook, { name: interactionName });

    var timeoutId = scheduleTimeoutEvent();
    return {
      timeoutId: timeoutId
    };
  };

  /**
   * Custom interaction end (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/16)
   * @param {String} interactionName  interaction name
   */


  BaseLogger.prototype.interactionEnded = function interactionEnded(interactionName) {
    var _this3 = this;

    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        timeoutId = _ref2.timeoutId,
        endHook = _ref2.endHook;

    _performance2.default.mark(interactionName + ' ended');
    _performance2.default.measure(interactionName + ' duration', interactionName + ' started', interactionName + ' ended');

    if (timeoutId) {
      clearTimeout(timeoutId);
    }

    var actualEnv = (0, _env.env)();
    var getInteractionFromWindowIfPresent = function getInteractionFromWindowIfPresent() {
      return actualEnv.fedops && actualEnv.fedops.apps && actualEnv.fedops.apps[_this3.appName] && actualEnv.fedops.apps[_this3.appName].interactions && actualEnv.fedops.apps[_this3.appName].interactions[interactionName];
    };

    var interaction = this._outgoingInteractions[interactionName] || getInteractionFromWindowIfPresent();
    var duration = interaction ? Math.floor(_performance2.default.now() - interaction.timestamp) : '';

    callHook(endHook || this.endHook, {
      name: interactionName,
      duration: duration,
      timeout: this._outgoingInteractions[interactionName] && this._outgoingInteractions[interactionName].timeout
    });

    var dataSource = this.dataSource.clone().addItem({ name: interactionName }).addItem({ duration: duration }).addItem(new _biInteractionEndItem2.default(this.sessionId));

    delete this._outgoingInteractions[interactionName];

    this.reporter.useBaseUrl();
    this._report(dataSource);
  };

  /**
   * Start of an app loading phase, reports end of previous phase if configured
   * Sends phase event (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/13)
   * @param name of the step
   */


  BaseLogger.prototype.appLoadingPhaseStart = function appLoadingPhaseStart(name) {
    if (this._appLoadedCalled) {
      return;
    }

    this.loadingPhases.saveAppLoadingPhase({ name: name });
    var previousPhase = this.loadingPhases.getPhasePreviousTo(name);

    if (!this.disableAutoPhaseFinish || previousPhase.name === _loadingPhases.CODE_PARSING_PHASE_NAME) {
      var loadingPhaseDataItem = new _prefixedAppLoadingPhaseItem2.default(previousPhase);
      var loadingPhaseBiItem = new _biLoadPhaseItem2.default(this.sessionId);

      var dataSource = this.dataSource.clone().addItem(loadingPhaseDataItem).addItem(loadingPhaseBiItem);

      this.reporter.useBaseUrl();
      return this._report(dataSource);
    }
  };

  /**
   * End of an app loading phase, reports end of previous phase
   * Sends phase event (http://bo.wix.com/bi-catalog-webapp/#/sources/72/events/13)
   * @param name of the step
   */


  BaseLogger.prototype.appLoadingPhaseFinish = function appLoadingPhaseFinish(name) {
    if (this._appLoadedCalled) {
      return;
    }

    if (!this.disableAutoPhaseFinish) {
      throw new Error('To use appLoadingPhaseFinish you must create the logger with the "disableAutoPhaseFinish: true" param');
    }

    var appLoadingPhase = this.loadingPhases.getAppLoadingPhaseData(name);
    if (!appLoadingPhase) {
      throw new Error('Cannot report end of a phase that wasn\'t started. Phase ' + name + ' doesn\'t exist');
    }

    var loadingPhaseDataItem = new _appLoadingPhaseItem2.default(appLoadingPhase);
    var loadingPhaseBiItem = new _biLoadPhaseItem2.default(this.sessionId);

    var dataSource = this.dataSource.clone().addItem(loadingPhaseDataItem).addItem(loadingPhaseBiItem);

    this.reporter.useBaseUrl();
    return this._report(dataSource);
  };

  _createClass(BaseLogger, [{
    key: 'sessionId',
    get: function get() {
      return this.getParam('sessionId');
    }
  }]);

  return BaseLogger;
}();

exports.default = BaseLogger;