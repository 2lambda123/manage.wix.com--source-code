'use strict';

exports.__esModule = true;

var _biBaseItem = require('../common/bi-base-item');

var _biBaseItem2 = _interopRequireDefault(_biBaseItem);

var _platformActions = require('./platform-actions');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents the "load started" bi event:
 * It should be used to monitor the initial application load.
 */
var BiPlatformLoadStartDataItem = function (_BiBaseDataItem) {
  _inherits(BiPlatformLoadStartDataItem, _BiBaseDataItem);

  function BiPlatformLoadStartDataItem(sessionId, appId, widgetId, isServerSide, metasiteId) {
    _classCallCheck(this, BiPlatformLoadStartDataItem);

    var _this = _possibleConstructorReturn(this, _BiBaseDataItem.call(this, 300, sessionId));

    _this.data.actionName = _platformActions.createController;
    _this.data.appId = appId;
    _this.data.widgetId = widgetId;
    _this.data.isServerSide = isServerSide;
    _this.data.msid = metasiteId;

    /*
    actionDurationMs
    actionName
    appId
    isServerSide
    msid
    pageId
    pageUrl
    pn
    postSSR
    requestId
    ts
    tsn
    widgetArray
    widgetId
    */
    return _this;
  }

  return BiPlatformLoadStartDataItem;
}(_biBaseItem2.default);

exports.default = BiPlatformLoadStartDataItem;