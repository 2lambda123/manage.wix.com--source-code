'use strict';

exports.__esModule = true;
exports.CODE_PARSING_PHASE_NAME = undefined;

var _appData = require('../app-data/app-data');

var _appData2 = _interopRequireDefault(_appData);

var _performance = require('../performance/performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var CODE_PARSING_PHASE_NAME = exports.CODE_PARSING_PHASE_NAME = 'codeParsingPhase';

var LoadingPhases = function () {
  function LoadingPhases(appName) {
    _classCallCheck(this, LoadingPhases);

    this.appName = appName;
    this.phases = new Map();
  }

  LoadingPhases.prototype.getAppLoadingPhaseData = function getAppLoadingPhaseData(phaseName) {
    if (phaseName) {
      return this.phases.get(phaseName);
    }
  };

  LoadingPhases.prototype.saveAppLoadingPhase = function saveAppLoadingPhase(_ref) {
    var name = _ref.name;

    this._createCodeParsingPhaseIfNotExist();

    if (!this.phases.has(name)) {
      this.phases.set(name, {
        name: name,
        phaseStartTime: _performance2.default.now(),
        index: this.phases.size
      });
    }
  };

  LoadingPhases.prototype.getNextPhaseToReport = function getNextPhaseToReport() {
    var _this = this;

    this._createCodeParsingPhaseIfNotExist();
    var latestStep = CODE_PARSING_PHASE_NAME;

    this.phases.forEach(function (phase, name) {
      if (phase.index > _this.phases.get(latestStep).index) {
        latestStep = name;
      }
    });

    return this.phases.get(latestStep);
  };

  LoadingPhases.prototype.getPhasePreviousTo = function getPhasePreviousTo(name) {
    var currentPhase = this.phases.get(name);
    var previousPhase = undefined;

    this.phases.forEach(function (phase) {
      if (phase.index === currentPhase.index - 1) {
        previousPhase = phase;
      }
    });

    return previousPhase;
  };

  LoadingPhases.prototype._createCodeParsingPhaseIfNotExist = function _createCodeParsingPhaseIfNotExist() {
    if (!this.phases.has(CODE_PARSING_PHASE_NAME)) {
      this.phases.set(CODE_PARSING_PHASE_NAME, {
        phaseStartTime: _appData2.default.getStartLoadTime(this.appName),
        index: 0,
        name: CODE_PARSING_PHASE_NAME
      });
    }
  };

  return LoadingPhases;
}();

exports.default = LoadingPhases;