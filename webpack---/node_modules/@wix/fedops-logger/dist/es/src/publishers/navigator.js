'use strict';

exports.__esModule = true;
exports.listen = listen;
exports.sendBeacon = sendBeacon;

var _env = require('./env');

function hook(obj, fnName, hook) {
  if (!obj || !obj[fnName]) {
    return;
  }

  var original = obj[fnName];
  obj[fnName] = function () {
    hook.apply(null, arguments);
    return original.apply(obj, arguments);
  };
}

function onLoad(cb) {
  setTimeout(function () {
    return (0, _env.provideBrowsingContext)(function (window) {
      return cb(window.location.href);
    });
  });
}

function onPushState(cb) {
  (0, _env.provideBrowsingContext)(function (_ref) {
    var history = _ref.history;
    return ['pushState', 'replaceState'].forEach(function (fnName) {
      hook(history, fnName, function (_, __, url) {
        return cb(url);
      });
    });
  });
}

function onPopState(cb) {
  (0, _env.provideBrowsingContext)(function (window) {
    return window.addEventListener('popstate', function () {
      return cb(window.location.href);
    });
  });
}

function listen(cb) {
  var fromUrl = '';

  [onLoad, onPushState, onPopState].forEach(function (event) {
    return event(function (toUrl) {
      cb(fromUrl, toUrl);
      fromUrl = toUrl;
    });
  });
}

function sendBeacon(url) {
  if (!(0, _env.hasSendBeacon)()) {
    return false;
  }

  return navigator.sendBeacon(url);
}