'use strict';

exports.__esModule = true;

var _baseLogger = require('./base-logger');

var _baseLogger2 = _interopRequireDefault(_baseLogger);

var _biLoadStartItem = require('./data-items/app-load/bi-load-start-item');

var _biLoadStartItem2 = _interopRequireDefault(_biLoadStartItem);

var _biPlatformLoadStartItem = require('./data-items/app-load/bi-platform-load-start-item');

var _biPlatformLoadStartItem2 = _interopRequireDefault(_biPlatformLoadStartItem);

var _durationItem = require('./data-items/duration/duration-item');

var _durationItem2 = _interopRequireDefault(_durationItem);

var _biPlatformLoadFinishItem = require('./data-items/app-load/bi-platform-load-finish-item');

var _biPlatformLoadFinishItem2 = _interopRequireDefault(_biPlatformLoadFinishItem);

var _time = require('./time/time');

var _time2 = _interopRequireDefault(_time);

var _appData = require('./app-data/app-data');

var _appData2 = _interopRequireDefault(_appData);

var _performance = require('./performance/performance');

var _performance2 = _interopRequireDefault(_performance);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Logs application load phases.
 *
 * Before adding new parameters to the reported events, please make sure the BI schema supports them:
 * http://bo.wix.com/bi-catalog-webapp/#/sources/72
 */
var WidgetLogger = function (_BaseLogger) {
  _inherits(WidgetLogger, _BaseLogger);

  function WidgetLogger(appName, appVersion, reporter, params) {
    _classCallCheck(this, WidgetLogger);

    var _this = _possibleConstructorReturn(this, _BaseLogger.call(this, appName, appVersion, reporter, params));

    _this.widgetId = params.widgetId;
    _this.isServerSide = params.isServerSide !== undefined ? params.isServerSide : null;
    _appData2.default.initApp(_this.appName);
    return _this;
  }

  /**
   * Manual report for widget load start
   * Call this method at the earliest point possible when your widget starts loading
   */


  WidgetLogger.prototype.appLoadStarted = function appLoadStarted() {
    _time2.default.setLoadStarted(this.appName);
    var dataSource = this.dataSource.clone();

    if (this.isServerSide !== null) {
      this.reporter.usePerformanceUrl();
      dataSource.addItem(new _biPlatformLoadStartItem2.default(this.sessionId, this.appId, this.widgetId, this.isServerSide, this.metasiteId));
    } else {
      this.reporter.useBaseUrl();
      dataSource.addItem(new _biLoadStartItem2.default(this.sessionId));
    }

    return this._report(dataSource);
  };

  WidgetLogger.prototype._getAppLoadedDataSource = function _getAppLoadedDataSource() {
    if (this.isServerSide !== null) {
      this.reporter.usePerformanceUrl();
      return this._getPlatformAppLoadedDataSource();
    }

    this.reporter.useBaseUrl();
    return _baseLogger2.default.prototype._getAppLoadedDataSource.call(this);
  };

  WidgetLogger.prototype._getPlatformAppLoadedDataSource = function _getPlatformAppLoadedDataSource() {
    var overrideDurationParamName = 'actionDurationMs';

    return this.dataSource.clone().addItem(new _biPlatformLoadFinishItem2.default(this.sessionId, this.appId, this.widgetId, this.isServerSide, this.metasiteId)).addItem(new _durationItem2.default(this.appName, overrideDurationParamName));
  };

  WidgetLogger.prototype.clearResourceTimings = function clearResourceTimings() {
    _performance2.default.clearResourceTimings();
  };

  return WidgetLogger;
}(_baseLogger2.default);

exports.default = WidgetLogger;