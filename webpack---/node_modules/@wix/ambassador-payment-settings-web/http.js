/* eslint-disable */
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PaymentSettingsWeb = void 0;
var http_1 = require("@wix/ambassador/runtime/http");
var PaymentSettingsWeb = function (baseUrl, httpClientConfig) {
    var httpClient = new http_1.AmbassadorHTTPClient(baseUrl, httpClientConfig);
    return {
        InternalSettingsService: function () {
            return function (headers) {
                var service = {
                    resetWPAccount: function (resetWPAccountRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/_internal/wix-pay', resetWPAccountRequest, headers);
                    },
                    resolveCountry: function (resolveCountryRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/_internal/resolve-country', resolveCountryRequest, headers);
                    },
                    resolveWPAccountId: function (resolveWPAccountIdRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/_internal/wix-pay/account-id', resolveWPAccountIdRequest, headers);
                    },
                };
                service.resetWPAccount.__http_method = 'POST';
                service.resetWPAccount.__http_url = '/api/onboarding/v1/_internal/wix-pay';
                service.resolveCountry.__http_method = 'GET';
                service.resolveCountry.__http_url = '/api/onboarding/v1/_internal/resolve-country';
                service.resolveWPAccountId.__http_method = 'GET';
                service.resolveWPAccountId.__http_url = '/api/onboarding/v1/_internal/wix-pay/account-id';
                return service;
            };
        },
        MerchantBackofficeService: function () {
            return function (headers) {
                var service = {
                    getPaymentMethod: function (backofficeV1GetPaymentMethodRequest) {
                        return httpClient.invoke('GET', '/api/backoffice/v1/payment-methods/{method_id}', backofficeV1GetPaymentMethodRequest, headers);
                    },
                    reconnectWpAccount: function (reconnectWPAccountRequest) {
                        return httpClient.invoke('POST', '/api/backoffice/v1/wix-payments', reconnectWPAccountRequest, headers);
                    },
                    updateCbdFlow: function (backofficeUpdateCbdFlowRequest) {
                        return httpClient.invoke('POST', '/api/backoffice/v1/merchant-info/custom-flows/cbd', backofficeUpdateCbdFlowRequest, headers);
                    },
                    updateRestrictedGoodsFlow: function (backofficeUpdateRestrictedGoodsFlowRequest) {
                        return httpClient.invoke('POST', '/api/backoffice/v1/merchant-info/custom-flows/restricted-goods', backofficeUpdateRestrictedGoodsFlowRequest, headers);
                    },
                };
                service.getPaymentMethod.__http_method = 'GET';
                service.getPaymentMethod.__http_url = '/api/backoffice/v1/payment-methods/{method_id}';
                service.reconnectWpAccount.__http_method = 'POST';
                service.reconnectWpAccount.__http_url = '/api/backoffice/v1/wix-payments';
                service.updateCbdFlow.__http_method = 'POST';
                service.updateCbdFlow.__http_url = '/api/backoffice/v1/merchant-info/custom-flows/cbd';
                service.updateRestrictedGoodsFlow.__http_method = 'POST';
                service.updateRestrictedGoodsFlow.__http_url = '/api/backoffice/v1/merchant-info/custom-flows/restricted-goods';
                return service;
            };
        },
        MerchantInfoService: function () {
            return function (headers) {
                var service = {
                    getMerchantInfo: function (getMerchantInfoRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/merchant-info', getMerchantInfoRequest, headers);
                    },
                    updateCbdFlow: function (updateCbdFlowRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/merchant-info/custom-flows/cbd', updateCbdFlowRequest, headers);
                    },
                    updateCountry: function (updateCountryRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/merchant-info/country', updateCountryRequest, headers);
                    },
                    updatePartnerFlow: function (updatePartnerFlowRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/merchant-info/custom-flows/partner', updatePartnerFlowRequest, headers);
                    },
                    updateRestrictedGoodsFlow: function (updateRestrictedGoodsFlowRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/merchant-info/custom-flows/restricted-goods', updateRestrictedGoodsFlowRequest, headers);
                    },
                };
                service.getMerchantInfo.__http_method = 'GET';
                service.getMerchantInfo.__http_url = '/api/onboarding/v1/merchant-info';
                service.updateCbdFlow.__http_method = 'POST';
                service.updateCbdFlow.__http_url = '/api/onboarding/v1/merchant-info/custom-flows/cbd';
                service.updateCountry.__http_method = 'POST';
                service.updateCountry.__http_url = '/api/onboarding/v1/merchant-info/country';
                service.updatePartnerFlow.__http_method = 'POST';
                service.updatePartnerFlow.__http_url = '/api/onboarding/v1/merchant-info/custom-flows/partner';
                service.updateRestrictedGoodsFlow.__http_method = 'POST';
                service.updateRestrictedGoodsFlow.__http_url = '/api/onboarding/v1/merchant-info/custom-flows/restricted-goods';
                return service;
            };
        },
        MerchantServiceV2: function () {
            return function (headers) {
                var service = {
                    getMerchant: function (getMerchantRequest) { return httpClient.invoke('GET', '/v2/settings/merchant', getMerchantRequest, headers); },
                };
                service.getMerchant.__http_method = 'GET';
                service.getMerchant.__http_url = '/v2/settings/merchant';
                return service;
            };
        },
        PaymentAggregateServiceV2: function () {
            return function (headers) {
                var service = {
                    getPaymentAggregate: function (getPaymentAggregatesRequest) {
                        return httpClient.invoke('GET', '/v2/settings/payment-aggregate', getPaymentAggregatesRequest, headers);
                    },
                };
                service.getPaymentAggregate.__http_method = 'GET';
                service.getPaymentAggregate.__http_url = '/v2/settings/payment-aggregate';
                return service;
            };
        },
        PaymentMethodsService: function () {
            return function (headers) {
                var service = {
                    disablePaymentMethod: function (disablePaymentMethodRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/payment-methods/{method_id}/disable', disablePaymentMethodRequest, headers);
                    },
                    enablePaymentMethod: function (enablePaymentMethodRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/payment-methods/{method_id}/enable', enablePaymentMethodRequest, headers);
                    },
                    getPaymentMethod: function (onboardingV1GetPaymentMethodRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-methods/{method_id}', onboardingV1GetPaymentMethodRequest, headers);
                    },
                    listPaymentMethods: function (listPaymentMethodsRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-methods', listPaymentMethodsRequest, headers);
                    },
                };
                service.disablePaymentMethod.__http_method = 'POST';
                service.disablePaymentMethod.__http_url = '/api/onboarding/v1/payment-methods/{method_id}/disable';
                service.enablePaymentMethod.__http_method = 'POST';
                service.enablePaymentMethod.__http_url = '/api/onboarding/v1/payment-methods/{method_id}/enable';
                service.getPaymentMethod.__http_method = 'GET';
                service.getPaymentMethod.__http_url = '/api/onboarding/v1/payment-methods/{method_id}';
                service.listPaymentMethods.__http_method = 'GET';
                service.listPaymentMethods.__http_url = '/api/onboarding/v1/payment-methods';
                return service;
            };
        },
        PaymentMethodTypesServiceV2: function () {
            return function (headers) {
                var service = {
                    getPaymentMethodType: function (getPaymentMethodTypeRequest) {
                        return httpClient.invoke('GET', '/v2/settings/payment-method-types/{payment_method_type_id}', getPaymentMethodTypeRequest, headers);
                    },
                    listPaymentMethodTypes: function (listPaymentMethodTypesRequest) {
                        return httpClient.invoke('GET', '/v2/settings/payment-method-types', listPaymentMethodTypesRequest, headers);
                    },
                };
                service.getPaymentMethodType.__http_method = 'GET';
                service.getPaymentMethodType.__http_url = '/v2/settings/payment-method-types/{payment_method_type_id}';
                service.listPaymentMethodTypes.__http_method = 'GET';
                service.listPaymentMethodTypes.__http_url = '/v2/settings/payment-method-types';
                return service;
            };
        },
        PaymentProvidersService: function () {
            return function (headers) {
                var service = {
                    connectPaymentProvider: function (connectPaymentProviderRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/payment-providers/{provider_id}/connect', connectPaymentProviderRequest, headers);
                    },
                    disconnectPaymentProvider: function (disconnectPaymentProviderRequest) {
                        return httpClient.invoke('DELETE', '/api/onboarding/v1/payment-providers/{provider_id}', disconnectPaymentProviderRequest, headers);
                    },
                    getAccount: function (getAccountRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-providers/{provider_id}/account', getAccountRequest, headers);
                    },
                    getFee: function (getFeeRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-providers/{provider_id}/fee', getFeeRequest, headers);
                    },
                    getPaymentProvider: function (v1GetPaymentProviderRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-providers/{provider_id}', v1GetPaymentProviderRequest, headers);
                    },
                    listPaymentProviders: function (v1ListPaymentProvidersRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-providers', v1ListPaymentProvidersRequest, headers);
                    },
                    updateAccount: function (updateAccountRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/payment-providers/{provider_id}/account', updateAccountRequest, headers);
                    },
                    updateInstallments: function (updateInstallmentsRequest) {
                        return httpClient.invoke('POST', '/api/onboarding/v1/payment-providers/{provider_id}/update-installments', updateInstallmentsRequest, headers);
                    },
                };
                service.connectPaymentProvider.__http_method = 'POST';
                service.connectPaymentProvider.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}/connect';
                service.disconnectPaymentProvider.__http_method = 'DELETE';
                service.disconnectPaymentProvider.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}';
                service.getAccount.__http_method = 'GET';
                service.getAccount.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}/account';
                service.getFee.__http_method = 'GET';
                service.getFee.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}/fee';
                service.getPaymentProvider.__http_method = 'GET';
                service.getPaymentProvider.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}';
                service.listPaymentProviders.__http_method = 'GET';
                service.listPaymentProviders.__http_url = '/api/onboarding/v1/payment-providers';
                service.updateAccount.__http_method = 'POST';
                service.updateAccount.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}/account';
                service.updateInstallments.__http_method = 'POST';
                service.updateInstallments.__http_url = '/api/onboarding/v1/payment-providers/{provider_id}/update-installments';
                return service;
            };
        },
        PaymentProvidersServiceV2: function () {
            return function (headers) {
                var service = {
                    getPaymentProvider: function (settingsGetPaymentProviderRequest) {
                        return httpClient.invoke('GET', '/v2/settings/payment-providers/{payment_provider_id}', settingsGetPaymentProviderRequest, headers);
                    },
                    listPaymentProviders: function (settingsListPaymentProvidersRequest) {
                        return httpClient.invoke('GET', '/v2/settings/payment-providers', settingsListPaymentProvidersRequest, headers);
                    },
                };
                service.getPaymentProvider.__http_method = 'GET';
                service.getPaymentProvider.__http_url = '/v2/settings/payment-providers/{payment_provider_id}';
                service.listPaymentProviders.__http_method = 'GET';
                service.listPaymentProviders.__http_url = '/v2/settings/payment-providers';
                return service;
            };
        },
        PaymentSettingsService: function () {
            return function (headers) {
                var service = {
                    listPaymentSettings: function (listPaymentSettingsRequest) {
                        return httpClient.invoke('GET', '/api/onboarding/v1/payment-settings', listPaymentSettingsRequest, headers);
                    },
                };
                service.listPaymentSettings.__http_method = 'GET';
                service.listPaymentSettings.__http_url = '/api/onboarding/v1/payment-settings';
                return service;
            };
        },
        ProviderAccountsServiceV2: function () {
            return function (headers) {
                var service = {
                    addProviderAccountPaymentMethodTypeSetup: function (addProviderAccountPaymentMethodTypeSetupRequest) {
                        return httpClient.invoke('POST', '/v2/settings/provider-accounts/{provider_account_id}/payment-method-type-setup', addProviderAccountPaymentMethodTypeSetupRequest, headers);
                    },
                    claimProviderAccountOAuth: function (claimProviderAccountOAuthRequest) {
                        return httpClient.invoke('POST', '/v2/settings/provider-accounts/oauth-claim', claimProviderAccountOAuthRequest, headers);
                    },
                    connectProviderAccountDirectly: function (connectProviderAccountDirectlyRequest) {
                        return httpClient.invoke('POST', '/v2/settings/provider-accounts/direct-connect', connectProviderAccountDirectlyRequest, headers);
                    },
                    connectProviderAccountOAuth: function (connectProviderAccountOAuthRequest) {
                        return httpClient.invoke('POST', '/v2/settings/provider-accounts/oauth-connect', connectProviderAccountOAuthRequest, headers);
                    },
                    createProviderAccountOAuth: function (createProviderAccountOAuthRequest) {
                        return httpClient.invoke('POST', '/v2/settings/provider-accounts/oauth-create', createProviderAccountOAuthRequest, headers);
                    },
                    disconnectProviderAccount: function (disconnectProviderAccountRequest) {
                        return httpClient.invoke('DELETE', '/v2/settings/provider-accounts/{provider_account_id}', disconnectProviderAccountRequest, headers);
                    },
                    getProviderAccount: function (getProviderAccountRequest) {
                        return httpClient.invoke('GET', '/v2/settings/provider-accounts/{provider_account_id}', getProviderAccountRequest, headers);
                    },
                    listProviderAccounts: function (listProviderAccountsRequest) {
                        return httpClient.invoke('GET', '/v2/settings/provider-accounts', listProviderAccountsRequest, headers);
                    },
                    reconnectProviderAccountDirectly: function (reconnectProviderAccountDirectlyRequest) {
                        return httpClient.invoke('PUT', '/v2/settings/provider-accounts/{provider_account_id}/direct-reconnect', reconnectProviderAccountDirectlyRequest, headers);
                    },
                    reconnectProviderAccountOAuth: function (reconnectProviderAccountOAuthRequest) {
                        return httpClient.invoke('POST', '/v2/settings/provider-accounts/{provider_account_id}/oauth-reconnect', reconnectProviderAccountOAuthRequest, headers);
                    },
                    removeProviderAccountPaymentMethodTypeSetup: function (removeProviderAccountPaymentMethodTypeSetupRequest) {
                        return httpClient.invoke('DELETE', '/v2/settings/provider-accounts/{provider_account_id}/payment-method-type-setup/{payment_method_type_id}', removeProviderAccountPaymentMethodTypeSetupRequest, headers);
                    },
                    updateProviderAccount: function (updateProviderAccountRequest) {
                        return httpClient.invoke('PATCH', '/v2/settings/provider-accounts/{provider_account.id}', updateProviderAccountRequest, headers);
                    },
                    updateProviderAccountPaymentMethodTypeSetup: function (updateProviderAccountPaymentMethodTypeSetupRequest) {
                        return httpClient.invoke('PATCH', '/v2/settings/provider-accounts/{provider_account_id}/payment-method-type-setup/{payment_method_type_setup.payment_method_type_id}', updateProviderAccountPaymentMethodTypeSetupRequest, headers);
                    },
                };
                service.addProviderAccountPaymentMethodTypeSetup.__http_method = 'POST';
                service.addProviderAccountPaymentMethodTypeSetup.__http_url = '/v2/settings/provider-accounts/{provider_account_id}/payment-method-type-setup';
                service.claimProviderAccountOAuth.__http_method = 'POST';
                service.claimProviderAccountOAuth.__http_url = '/v2/settings/provider-accounts/oauth-claim';
                service.connectProviderAccountDirectly.__http_method = 'POST';
                service.connectProviderAccountDirectly.__http_url = '/v2/settings/provider-accounts/direct-connect';
                service.connectProviderAccountOAuth.__http_method = 'POST';
                service.connectProviderAccountOAuth.__http_url = '/v2/settings/provider-accounts/oauth-connect';
                service.createProviderAccountOAuth.__http_method = 'POST';
                service.createProviderAccountOAuth.__http_url = '/v2/settings/provider-accounts/oauth-create';
                service.disconnectProviderAccount.__http_method = 'DELETE';
                service.disconnectProviderAccount.__http_url = '/v2/settings/provider-accounts/{provider_account_id}';
                service.getProviderAccount.__http_method = 'GET';
                service.getProviderAccount.__http_url = '/v2/settings/provider-accounts/{provider_account_id}';
                service.listProviderAccounts.__http_method = 'GET';
                service.listProviderAccounts.__http_url = '/v2/settings/provider-accounts';
                service.reconnectProviderAccountDirectly.__http_method = 'PUT';
                service.reconnectProviderAccountDirectly.__http_url = '/v2/settings/provider-accounts/{provider_account_id}/direct-reconnect';
                service.reconnectProviderAccountOAuth.__http_method = 'POST';
                service.reconnectProviderAccountOAuth.__http_url = '/v2/settings/provider-accounts/{provider_account_id}/oauth-reconnect';
                service.removeProviderAccountPaymentMethodTypeSetup.__http_method = 'DELETE';
                service.removeProviderAccountPaymentMethodTypeSetup.__http_url =
                    '/v2/settings/provider-accounts/{provider_account_id}/payment-method-type-setup/{payment_method_type_id}';
                service.updateProviderAccount.__http_method = 'PATCH';
                service.updateProviderAccount.__http_url = '/v2/settings/provider-accounts/{provider_account.id}';
                service.updateProviderAccountPaymentMethodTypeSetup.__http_method = 'PATCH';
                service.updateProviderAccountPaymentMethodTypeSetup.__http_url =
                    '/v2/settings/provider-accounts/{provider_account_id}/payment-method-type-setup/{payment_method_type_setup.payment_method_type_id}';
                return service;
            };
        },
    };
};
exports.PaymentSettingsWeb = PaymentSettingsWeb;
exports.PaymentSettingsWeb.__transport = 'http';
__exportStar(require("./types"), exports);
//# sourceMappingURL=http.js.map