var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { chatEventEmitter, chatSdk, } from '@wix/chat-sdk';
import { ExternalHostSubTypes, } from './types';
import mapValues from 'lodash/mapValues';
import _pickBy from 'lodash/pickBy';
import { getAnonymousVisitorProperties } from '@wix/inbox-common';
var mapPresenceData = function (participantsById) {
    return mapValues(participantsById, function (_a, contactId) {
        var online = _a.online, data = _a.data;
        var _b = data, derivedChatroomId = _b.derivedChatroomId, deviceType = _b.deviceType, location = _b.location, pageName = _b.pageName, visitCount = _b.visitCount, timestamp = _b.timestamp, isContact = _b.isContact;
        return {
            presence: __assign({ derivedChatroomId: derivedChatroomId,
                deviceType: deviceType,
                location: location,
                online: online,
                pageName: pageName,
                visitCount: visitCount, onlineSinceDatetime: timestamp, isContact: isContact }, getAnonymousVisitorProperties(contactId)),
        };
    });
};
var isVisitorMergeEvent = function (event) {
    return event.subType === ExternalHostSubTypes.VISITOR_MERGE;
};
var filterSiteVisitors = function (participantsById, groupId) { return _pickBy(participantsById, function (val) { return val.groupId === groupId; }); };
var excludeStaleSiteVisitors = function (participantsById) {
    return _pickBy(participantsById, function (val) { return !!val.data.derivedChatroomId; });
};
var setupPresence = function (onChange, onMerge, groupId) {
    if (onMerge === void 0) { onMerge = function () { }; }
    var subscription = chatSdk.presence.subscribeToPresenceChanges({
        callback: function (_a) {
            var participantsById = _a.participantsById;
            onChange(mapPresenceData(groupId
                ? filterSiteVisitors(excludeStaleSiteVisitors(participantsById), groupId)
                : excludeStaleSiteVisitors(participantsById)));
        },
    });
    chatEventEmitter.addListener(chatEventEmitter.CHAT_EVENTS.EXTERNAL_HOST, function (event) {
        if (isVisitorMergeEvent(event)) {
            onMerge(event);
        }
    });
    return subscription;
};
export default setupPresence;
//# sourceMappingURL=presence.js.map