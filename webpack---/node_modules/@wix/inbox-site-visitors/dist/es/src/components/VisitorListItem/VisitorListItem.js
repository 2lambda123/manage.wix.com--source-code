var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import * as s from './VisitorListItem.scss';
import { Text, Badge } from 'wix-style-react';
import { TimeElapsedClock } from '../TimeElapsedClock/TimeElapsedClock';
import _get from 'lodash/get';
import { translate } from '../../i18n';
import { withExperiments, } from '@wix/wix-experiments-react';
import { AvatarWrapper, getLocalizedFullName } from '@wix/chat-web';
var VisitorListItem = /** @class */ (function (_super) {
    __extends(VisitorListItem, _super);
    function VisitorListItem(props) {
        var _this = _super.call(this, props) || this;
        _this.renderVisitorAvatar = function (contactInfo) {
            var initials = contactInfo.initials;
            var picture = contactInfo.picture;
            var experiments = _this.props.experiments;
            var contactNameInfo = {
                fullName: contactInfo.fullName,
                name: contactInfo.displayName,
                siteUserType: contactInfo.siteUserType,
            };
            return (React.createElement("div", { className: s.contactAvatar, "data-hook": "contact-avatar" },
                React.createElement(AvatarWrapper, { dataHook: "visitor-list-item-avatar", presence: "online", size: "size48", name: getLocalizedFullName(contactNameInfo, _this.props.t), imgProps: { src: picture } })));
        };
        _this.renderTimeOnSite = function (visitor, locale) {
            var onlineSinceDatetime = _get(visitor, 'presence.onlineSinceDatetime');
            return (React.createElement(TimeElapsedClock, { onlineSinceDatetime: onlineSinceDatetime, locale: locale }));
        };
        _this.state = {};
        return _this;
    }
    VisitorListItem.prototype.render = function () {
        var _a = this.props, t = _a.t, visitor = _a.visitor, contactInfo = _a.contactInfo, onClick = _a.onClick;
        var contactNameInfo = {
            fullName: contactInfo.fullName,
            name: contactInfo.displayName,
            siteUserType: contactInfo.siteUserType,
        };
        var _b = visitor.presence, pageName = _b.pageName, location = _b.location, visitCount = _b.visitCount;
        return (React.createElement("div", { "data-hook": "visitor-list-item", className: s.root, onClick: function () { return onClick && onClick(visitor); } },
            this.renderVisitorAvatar(contactInfo),
            React.createElement("div", { className: s.visitorDetails },
                React.createElement("div", { className: s.visitorNameAndTime },
                    React.createElement("div", { className: s.nameAndMaybeBadge },
                        React.createElement("div", { className: s.visitorNameWrapper },
                            React.createElement(Text, { size: "small", weight: "bold", dataHook: "visitor-display-name" }, getLocalizedFullName(contactNameInfo, t))),
                        visitCount === 1 && (React.createElement("div", { className: s.badgeWrapper },
                            React.createElement(Badge, { dataHook: "new-badge", size: "small", skin: "standard", uppercase: false, type: "solid" }, t('visitors.list.item.new.badge'))))),
                    React.createElement("div", { "data-hook": "time-on-page", className: s.timeOnPage }, this.renderTimeOnSite(visitor, this.props.i18n.language))),
                React.createElement("div", { "data-hook": "visitor-page-section" },
                    React.createElement("span", { className: s.onPageWrapper },
                        React.createElement(Text, { weight: "normal", size: "small", secondary: true, light: true, dataHook: "on-page-label" }, "" + t('visitors.list.item.on.page.label'))),
                    React.createElement(Text, { weight: "normal", size: "small", secondary: true, light: true, dataHook: "visitor-page" }, pageName)),
                React.createElement(Text, { weight: "normal", size: "small", secondary: true, light: true, dataHook: "visitor-location" }, location))));
    };
    return VisitorListItem;
}(React.Component));
export default withExperiments(translate()(VisitorListItem));
//# sourceMappingURL=VisitorListItem.js.map