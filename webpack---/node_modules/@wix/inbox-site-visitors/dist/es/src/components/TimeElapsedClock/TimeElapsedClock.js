var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import distanceInWordsStrict from 'date-fns/distance_in_words_strict';
import { Text } from 'wix-style-react';
var TimeElapsedClock = /** @class */ (function (_super) {
    __extends(TimeElapsedClock, _super);
    function TimeElapsedClock(props) {
        var _this = _super.call(this, props) || this;
        _this.startIntervalTimeOnSite = function (localeModuleDateFns) {
            _this.localeModuleDateFns = localeModuleDateFns;
            _this.setNewTimeOnSite();
            _this.interval = setInterval(_this.setNewTimeOnSite, 1000);
        };
        _this.setNewTimeOnSite = function () {
            var onlineSinceDatetime = _this.props.onlineSinceDatetime;
            var timeElapsed = distanceInWordsStrict(onlineSinceDatetime, Date.now(), {
                locale: _this.localeModuleDateFns,
            });
            _this.setState({ timeElapsed: timeElapsed });
        };
        _this.state = {
            timeElapsed: null,
        };
        return _this;
    }
    TimeElapsedClock.prototype.componentDidMount = function () {
        var _this = this;
        import("date-fns/locale/" + this.props.locale + "/index.js")
            .then(this.startIntervalTimeOnSite)
            .catch(function () {
            var fallbackLocaleModule = require('date-fns/locale/en');
            _this.startIntervalTimeOnSite(fallbackLocaleModule);
        });
    };
    TimeElapsedClock.prototype.componentWillUnmount = function () {
        clearInterval(this.interval);
    };
    TimeElapsedClock.prototype.render = function () {
        if (!this.props.onlineSinceDatetime || !this.state.timeElapsed) {
            return null;
        }
        return (React.createElement(Text, { weight: "normal", size: "tiny", secondary: true, light: true, dataHook: "time-elapsed" }, this.state.timeElapsed));
    };
    return TimeElapsedClock;
}(React.Component));
export { TimeElapsedClock };
//# sourceMappingURL=TimeElapsedClock.js.map