var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import _take from 'lodash/take';
import * as s from './Avatars.scss';
import _get from 'lodash/get';
import { withVisitorsPresenceCapability, } from '../VisitorsPresenceProvider/VisitorsPresenceProvider';
import { translate } from '../../i18n';
import classNames from 'classnames';
import { withExperiments, } from '@wix/wix-experiments-react';
import { AvatarWrapper, getLocalizedFullName } from '@wix/chat-web';
import { Text } from 'wix-style-react';
var Avatars = /** @class */ (function (_super) {
    __extends(Avatars, _super);
    function Avatars() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.renderAvatar = function (contactInfo) {
            var picture = _get(contactInfo, 'picture');
            var initials = _get(contactInfo, 'initials');
            var contactId = _get(contactInfo, 'contactId');
            var size = _this.props.size || 24;
            var contactNameInfo = {
                fullName: contactInfo.fullName,
                name: contactInfo.displayName,
                siteUserType: contactInfo.siteUserType,
            };
            return (React.createElement("div", { "data-hook": "avatar-" + contactId, className: s.avatar, key: contactId },
                React.createElement(AvatarWrapper, { dataHook: "wsr-avatar-" + contactId, size: "size24", imgProps: { src: picture }, name: getLocalizedFullName(contactNameInfo, _this.props.t) })));
        };
        _this.renderCounterAvatar = function (numOfVisitors) {
            return (React.createElement("div", { "data-hook": "visitors-avatar-counter", className: s.counter },
                React.createElement(Text, { "data-hook": "counter-text", weight: "bold", size: "tiny", light: true, className: s.counterText }, "+" + numOfVisitors)));
        };
        return _this;
    }
    Avatars.prototype.render = function () {
        var _a;
        var _b = this.props, visitorsPresence = _b.visitorsPresence, limit = _b.limit;
        var onlineContacts = Object.values(visitorsPresence)
            .filter(function (_a) {
            var visitor = _a.visitor;
            return visitor.presence.online;
        })
            .map(function (visitor) { return visitor.contactInfo; });
        var numOfOnlineContacts = onlineContacts.length;
        var contactsToDisplay = _take(onlineContacts, limit);
        return (React.createElement("div", { "data-hook": "visitors-avatars-container", className: classNames(s.root, (_a = {},
                _a[s.withAvatars] = numOfOnlineContacts > 0,
                _a)) },
            contactsToDisplay.map(this.renderAvatar),
            numOfOnlineContacts > limit &&
                this.renderCounterAvatar(numOfOnlineContacts - limit)));
    };
    return Avatars;
}(React.Component));
export default withExperiments(translate()(withVisitorsPresenceCapability(Avatars)));
//# sourceMappingURL=Avatars.js.map