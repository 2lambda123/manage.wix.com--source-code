var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import VisitorListItem from '../VisitorListItem/VisitorListItem';
import ChevronDownSmall from 'wix-ui-icons-common/ChevronDownSmall';
import ChevronUpSmall from 'wix-ui-icons-common/ChevronUpSmall';
import * as s from './VisitorList.scss';
import { withVisitorsPresenceCapability, } from '../VisitorsPresenceProvider/VisitorsPresenceProvider';
import { translate } from '../../i18n';
import { withExperiments, } from '@wix/wix-experiments-react';
import { Button } from 'wix-style-react';
var VisitorList = /** @class */ (function (_super) {
    __extends(VisitorList, _super);
    function VisitorList(props) {
        var _this = _super.call(this, props) || this;
        _this.state = {
            isMinimized: props.minimizedViewLimit !== undefined,
        };
        return _this;
    }
    VisitorList.prototype.shouldShowViewsToggle = function () {
        return (this.props.minimizedViewLimit &&
            this.props.minimizedViewLimit < this.props.onlineVisitorsAmount);
    };
    VisitorList.prototype.render = function () {
        var _this = this;
        var _a = this.props, t = _a.t, _b = _a.visitorsPresence, visitorsPresence = _b === void 0 ? {} : _b, onVisitorClicked = _a.onVisitorClicked, onlineVisitorsAmount = _a.onlineVisitorsAmount, minimizedViewLimit = _a.minimizedViewLimit, onViewChanged = _a.onViewChanged;
        var isMinimized = this.state.isMinimized;
        var onlineVisitors = Object.values(visitorsPresence).filter(function (_a) {
            var visitor = _a.visitor;
            return visitor.presence.online;
        });
        var sortedOnlineVisitors = onlineVisitors.sort(function (presence1, presence2) {
            var visitor1Time = new Date(presence1.visitor.presence.onlineSinceDatetime);
            var visitor2Time = new Date(presence2.visitor.presence.onlineSinceDatetime);
            return visitor2Time < visitor1Time ? -1 : 1;
        });
        var visitorsToDisplay = isMinimized
            ? sortedOnlineVisitors.slice(0, minimizedViewLimit)
            : sortedOnlineVisitors;
        return (React.createElement("div", { className: s.visitorList },
            React.createElement("div", { className: s.visitorListItems }, visitorsToDisplay.map(function (_a, index) {
                var visitor = _a.visitor, contactInfo = _a.contactInfo;
                return (React.createElement(VisitorListItem, { key: index, visitor: visitor, contactInfo: contactInfo, onClick: onVisitorClicked }));
            })),
            this.shouldShowViewsToggle() && (React.createElement("div", { className: s.viewsToggleLine },
                React.createElement("div", { className: s.leftLine }),
                React.createElement("div", null,
                    React.createElement(Button, { as: "button", dataHook: "views-toggle-button", onClick: function () {
                            _this.setState(function (_a) {
                                var isCurrentlyMinimized = _a.isMinimized;
                                var onViewChangedParams = {
                                    currentView: isCurrentlyMinimized
                                        ? 'minimized'
                                        : 'maximized',
                                    nextView: isCurrentlyMinimized
                                        ? 'maximized'
                                        : 'minimized',
                                    onlineVisitors: onlineVisitorsAmount,
                                };
                                onViewChanged && onViewChanged(onViewChangedParams);
                                return {
                                    isMinimized: !isCurrentlyMinimized,
                                };
                            });
                        }, size: "tiny", skin: "light", suffixIcon: isMinimized ? React.createElement(ChevronDownSmall, null) : React.createElement(ChevronUpSmall, null) }, isMinimized
                        ? t('online.visitors.show.more')
                        : t('online.visitors.show.less'))),
                React.createElement("div", { className: s.rightLine })))));
    };
    return VisitorList;
}(React.Component));
export default withExperiments(withVisitorsPresenceCapability(translate()(VisitorList)));
//# sourceMappingURL=VisitorList.js.map