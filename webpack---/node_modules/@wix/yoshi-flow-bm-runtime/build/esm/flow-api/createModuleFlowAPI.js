var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { kebabCase, once } from 'lodash';
import { appDefIds, getCurrentInstance } from '@wix/business-manager-api';
import { assertEnabledApi } from '../util/assert-enabled-api';
import { assertErrorMonitorEnabledApi } from '../util/assert-error-monitor-enabled-api';
export function createModuleFlowAPI(params) {
    var _this = this;
    var module = params.module, flowAPIInstances = params.flowAPIInstances, bmModule = params.bmModule;
    var config = module.config;
    var httpClient = bmModule._essentials.httpClient;
    var getModuleFedopsLogger = once(function () { return __awaiter(_this, void 0, void 0, function () {
        var _a;
        return __generator(this, function (_b) {
            return [2 /*return*/, bmModule._essentials.createFedopsLogger(kebabCase(module.moduleId), __assign({}, (_a = module.config.fedops) === null || _a === void 0 ? void 0 : _a.config))];
        });
    }); });
    var getI18n = once(function () { return __awaiter(_this, void 0, void 0, function () {
        var maybeTranslations;
        return __generator(this, function (_a) {
            maybeTranslations = flowAPIInstances.maybeTranslations;
            assertEnabledApi(maybeTranslations, 'i18n');
            return [2 /*return*/, maybeTranslations.init()];
        });
    }); });
    var getBILogger = once(function () { return __awaiter(_this, void 0, void 0, function () {
        var biLogger;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, flowAPIInstances.getBILogger()];
                case 1:
                    biLogger = _a.sent();
                    assertEnabledApi(biLogger, 'biLogger');
                    return [2 /*return*/, biLogger];
            }
        });
    }); });
    var getExperiments = once(function () { return __awaiter(_this, void 0, void 0, function () {
        var experiments, _a, scopes, centralized;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, flowAPIInstances];
                case 1:
                    experiments = (_c.sent()).maybeExperiments;
                    assertEnabledApi(experiments, 'experiments');
                    _a = (_b = config.experiments) !== null && _b !== void 0 ? _b : {}, scopes = _a.scopes, centralized = _a.centralized;
                    if (!(scopes != null && !centralized)) return [3 /*break*/, 3];
                    return [4 /*yield*/, Promise.all(scopes.map(function (scope) { return experiments.load(scope); }))];
                case 2:
                    _c.sent();
                    _c.label = 3;
                case 3: return [2 /*return*/, experiments];
            }
        });
    }); });
    return {
        getBILogger: getBILogger,
        _translations: flowAPIInstances.maybeTranslations,
        getI18n: getI18n,
        getExperiments: getExperiments,
        getModuleFedopsLogger: getModuleFedopsLogger,
        module: bmModule,
        get moduleParams() {
            return bmModule.moduleParams;
        },
        sentryAndHub: flowAPIInstances.maybeSentry,
        get sentry() {
            var _a;
            assertErrorMonitorEnabledApi(flowAPIInstances.maybeSentry, (_a = config.sentry) === null || _a === void 0 ? void 0 : _a.errorMonitor, 'sentry');
            return flowAPIInstances.maybeSentry.hub;
        },
        get errorMonitor() {
            var _a;
            assertErrorMonitorEnabledApi(flowAPIInstances.maybeErrorMonitor, (_a = config.sentry) === null || _a === void 0 ? void 0 : _a.errorMonitor, 'sentry.errorMonitor');
            return flowAPIInstances.maybeErrorMonitor;
        },
        httpClient: httpClient,
        moduleInfo: module.config,
        getCurrentInstance: function (maybeAppDefId) {
            var _a;
            var appDefId = (_a = maybeAppDefId !== null && maybeAppDefId !== void 0 ? maybeAppDefId : module.config.appDefinitionId) !== null && _a !== void 0 ? _a : appDefIds.metaSite;
            return getCurrentInstance(appDefId);
        },
    };
}
//# sourceMappingURL=createModuleFlowAPI.js.map