import { __assign, __rest, __spreadArrays } from "tslib";
import { has, get, set, cloneDeep } from 'lodash';
export var interpolate = function (fieldValueMap, rawContent) {
    var blocks = rawContent.blocks, entityMap = rawContent.entityMap, rest = __rest(rawContent, ["blocks", "entityMap"]);
    return __assign(__assign({}, rest), { entityMap: interpolateEntityMap(fieldValueMap, entityMap), blocks: blocks.map(function (block) {
            return interpolateBlock(fieldValueMap, block);
        }) });
};
var interpolateBlock = function (fieldValueMap, block) {
    var text = block.text;
    var inlineStyleRanges = __spreadArrays((block.inlineStyleRanges || []));
    var entityRanges = __spreadArrays((block.entityRanges || []));
    var _loop_1 = function (field) {
        if (has(fieldValueMap, field.key)) {
            var value = fieldValueMap[field.key];
            text = interpolateField(field, text, value);
            var delta_1 = value.toString().length - field.length;
            entityRanges = entityRanges.map(function (range) {
                return adjustRange(field, delta_1, __assign({}, range));
            });
            inlineStyleRanges = inlineStyleRanges.map(function (range) {
                return adjustRange(field, delta_1, __assign({}, range));
            });
        }
    };
    // eslint-disable-next-line
    for (var _i = 0, _a = findFields(text); _i < _a.length; _i++) {
        var field = _a[_i];
        _loop_1(field);
    }
    var result = __assign(__assign({}, block), { text: text });
    inlineStyleRanges.length && (result.inlineStyleRanges = inlineStyleRanges);
    entityRanges.length && (result.entityRanges = entityRanges);
    return result;
};
var interpolateField = function (field, search, replace) {
    return search.substring(0, field.offset) +
        replace +
        search.substring(field.offset + field.length, search.length);
};
var interpolateEntityMap = function (fieldValueMap, entityMap) {
    var result = cloneDeep(entityMap);
    // eslint-disable-next-line
    for (var _i = 0, _a = Object.values(result); _i < _a.length; _i++) {
        var entity = _a[_i];
        var path = void 0;
        if (entity.type === 'LINK') {
            path = 'data.url';
        }
        else if (entity.type === 'wix-draft-plugin-action-button') {
            path = 'data.button.settings.buttonText';
        }
        if (!path) {
            continue;
        }
        var value = get(entity, path);
        // eslint-disable-next-line
        for (var _b = 0, _c = findFields(value); _b < _c.length; _b++) {
            var field = _c[_b];
            if (has(fieldValueMap, field.key)) {
                value = interpolateField(field, value, fieldValueMap[field.key]);
            }
        }
        set(entity, path, value);
    }
    return result;
};
var findFields = function (text) {
    var REGEX_FIELD = /\{\{([^{}]+)\}\}/gm;
    var result = [];
    var match;
    // eslint-disable-next-line
    while ((match = REGEX_FIELD.exec(text)) !== null) {
        if (match.index === REGEX_FIELD.lastIndex) {
            REGEX_FIELD.lastIndex++;
        }
        var str = match[0], key = match[1];
        var offset = match.index;
        result.push({ key: key, offset: offset, length: str.length });
    }
    return result.reverse();
};
var adjustRange = function (field, delta, range) {
    if (range.offset > field.offset) {
        range.offset += delta;
    }
    else if (range.offset === field.offset) {
        range.length += delta;
    }
    else if (range.offset < field.offset &&
        range.offset + range.length > field.offset) {
        range.length += delta;
    }
    return range;
};
//# sourceMappingURL=rich-content.js.map