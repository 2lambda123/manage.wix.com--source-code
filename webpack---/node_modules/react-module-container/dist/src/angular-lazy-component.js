"use strict";

exports.__esModule = true;
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactDom = require("react-dom");

var _moduleRegistry = _interopRequireDefault(require("./module-registry"));

var _baseLazyComponent = _interopRequireDefault(require("./base-lazy-component"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var AddRouterContext = /*#__PURE__*/function (_React$Component) {
  _inheritsLoose(AddRouterContext, _React$Component);

  function AddRouterContext() {
    return _React$Component.apply(this, arguments) || this;
  }

  var _proto = AddRouterContext.prototype;

  _proto.getChildContext = function getChildContext() {
    return {
      router: this.props.router
    };
  };

  _proto.render = function render() {
    return this.props.children;
  };

  return AddRouterContext;
}(_react["default"].Component);

AddRouterContext.childContextTypes = {
  router: _propTypes["default"].any
};

var AngularLazyComponent = /*#__PURE__*/function (_BaseLazyComponent) {
  _inheritsLoose(AngularLazyComponent, _BaseLazyComponent);

  function AngularLazyComponent() {
    return _BaseLazyComponent.apply(this, arguments) || this;
  }

  var _proto2 = AngularLazyComponent.prototype;

  _proto2.componentDidMount = function componentDidMount() {
    var _this = this;

    this.mounted = true;
    this.resourceLoader.then(function () {
      if (_this.mounted) {
        var component = "<" + _this.manifest.component + "></" + _this.manifest.component + ">";
        _this.$injector = angular.bootstrap(component, [_this.manifest.module, ['$provide', '$compileProvider', function ($provide, $compileProvider) {
          $provide.factory('props', function () {
            return function () {
              return _this.mergedProps;
            };
          });
          $compileProvider.directive('moduleRegistry', function () {
            return {
              scope: {
                component: '@',
                props: '<'
              },
              controller: ['$scope', '$element', function ($scope, $element) {
                var Component = _moduleRegistry["default"].component($scope.component);

                $scope.$watch(function () {
                  return $scope.props;
                }, function () {
                  (0, _reactDom.render)( /*#__PURE__*/_react["default"].createElement(AddRouterContext, {
                    router: _this.props.router
                  }, /*#__PURE__*/_react["default"].createElement(Component, $scope.props)), $element[0]);
                }, true);
                $scope.$on('$destroy', function () {
                  return (0, _reactDom.unmountComponentAtNode)($element[0]);
                }); // super hack to prevent angular from preventing external route changes

                $element.on('click', function (e) {
                  return e.preventDefault = function () {
                    return delete e.preventDefault;
                  };
                });
              }]
            };
          });
          $compileProvider.directive('routerLink', function () {
            return {
              transclude: true,
              scope: {
                to: '@'
              },
              template: '<a ng-href="{{to}}" ng-click="handleClick($event)"><ng-transclude></ng-transclude></a>',
              controller: ['$scope', function ($scope) {
                $scope.handleClick = function (event) {
                  if (event.ctrlKey || event.metaKey || event.shiftKey || event.which === 2 || event.button === 2) {
                    return;
                  } else {
                    _this.props.router.push($scope.to);

                    event.preventDefault();
                  }
                };
              }]
            };
          });
        }]]);

        _this.node.appendChild(_this.$injector.get('$rootElement')[0]);
      }
    });
  };

  _proto2.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;

    if (this.$injector) {
      this.$injector.get('$rootScope').$destroy();
      this.$injector = null;
    }

    _BaseLazyComponent.prototype.componentWillUnmount.call(this);
  };

  _proto2.componentDidUpdate = function componentDidUpdate() {
    if (this.$injector && !this.$injector.get('$rootScope').$$phase) {
      this.$injector.get('$rootScope').$digest();
    }
  };

  _proto2.render = function render() {
    var _this2 = this;

    return /*#__PURE__*/_react["default"].createElement("div", {
      ref: function ref(node) {
        return _this2.node = node;
      }
    });
  };

  return AngularLazyComponent;
}(_baseLazyComponent["default"]);

AngularLazyComponent.propTypes = {
  router: _propTypes["default"].any
};
var _default = AngularLazyComponent;
exports["default"] = _default;