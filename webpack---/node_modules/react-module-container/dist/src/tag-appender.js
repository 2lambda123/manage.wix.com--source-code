"use strict";

exports.__esModule = true;
exports.createLinkElement = createLinkElement;
exports.createScriptElement = createScriptElement;
exports.tagAppender = tagAppender;
exports.filesAppender = filesAppender;
exports.unloadStyles = unloadStyles;

var _moduleRegistry = _interopRequireDefault(require("./module-registry"));

var _ReactModuleContainerErrors = require("./ReactModuleContainerErrors");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var requireCache = {};

function noprotocol(url) {
  return url.replace(/^.*:\/\//, '//');
}

function createLinkElement(url) {
  var fileref = document.createElement('LINK');
  fileref.setAttribute('rel', 'stylesheet');
  fileref.setAttribute('type', 'text/css');
  fileref.setAttribute('href', url);
  return fileref;
}

function createScriptElement(url, crossorigin) {
  var fileref = document.createElement('SCRIPT');
  fileref.setAttribute('type', 'text/javascript');
  fileref.setAttribute('src', url);

  if (crossorigin) {
    fileref.setAttribute('crossorigin', 'anonymous');
  }

  return fileref;
}

function tagAppender(url, filetype, crossorigin) {
  var styleSheets = document.styleSheets;
  return requireCache[url] = new Promise(function (resolve, reject) {
    if (window.requirejs && filetype === 'js') {
      window.requirejs([url], resolve, reject);
      return;
    } else if (url in requireCache) {// requireCache[url].then(resolve, reject);
      // return;
    }

    var fileref = filetype === 'css' ? createLinkElement(url) : createScriptElement(url, crossorigin);
    var done = false;
    document.getElementsByTagName('head')[0].appendChild(fileref);

    fileref.onerror = function () {
      fileref.onerror = fileref.onload = fileref.onreadystatechange = null;
      delete requireCache[url];

      _moduleRegistry["default"].notifyListeners('reactModuleContainer.error', new _ReactModuleContainerErrors.FileAppenderLoadError(url));

      reject(new Error("Could not load URL " + url));
    };

    fileref.onload = fileref.onreadystatechange = function () {
      if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
        done = true;
        fileref.onerror = fileref.onload = fileref.onreadystatechange = null;
        resolve();
      }
    };

    if (filetype === 'css' && navigator.userAgent.match(' Safari/') && !navigator.userAgent.match(' Chrom') && navigator.userAgent.match(' Version/5.')) {
      var attempts = 20;
      var interval = setInterval(function () {
        for (var i = 0; i < styleSheets.length; i++) {
          if (noprotocol("" + styleSheets[i].href) === noprotocol(url)) {
            clearInterval(interval);
            fileref.onload();
            return;
          }
        }

        if (--attempts === 0) {
          clearInterval(interval);
          fileref.onerror();
        }
      }, 50);
    }
  });
}

function append(file, crossorigin) {
  return tagAppender(file, file.split('.').pop(), crossorigin);
}

function onCatch(error, optional) {
  if (optional === void 0) {
    optional = false;
  }

  return optional ? Promise.resolve() : Promise.reject(error);
}

function appendEntry(entry, crossorigin) {
  if (typeof entry === 'object') {
    var optional = entry.optional,
        url = entry.url;
    return append(url, crossorigin)["catch"](function (err) {
      return onCatch(err, optional);
    });
  } else {
    return append(entry, crossorigin)["catch"](function (err) {
      return onCatch(err);
    });
  }
}

function filesAppender(entries, crossorigin) {
  return Promise.all(entries.map(function (entry) {
    if (Array.isArray(entry)) {
      return entry.reduce(function (promise, entryItem) {
        return promise.then(function () {
          return appendEntry(entryItem, crossorigin);
        });
      }, Promise.resolve());
    } else {
      return appendEntry(entry, crossorigin);
    }
  }));
}

var getStyleSheetLinks = function getStyleSheetLinks(document) {
  return Array.from(document.querySelectorAll('link')).filter(function (link) {
    return link.rel === 'stylesheet' && link.href;
  }).reduceRight(function (acc, curr) {
    var _objectSpread2;

    return _objectSpread(_objectSpread({}, acc), {}, (_objectSpread2 = {}, _objectSpread2[noprotocol(curr.href)] = curr, _objectSpread2));
  }, {});
};

var toUrlString = function toUrlString(file) {
  return typeof file === 'object' ? file.url : file;
};

var getStyleSheetUrls = function getStyleSheetUrls(files) {
  var _ref;

  return (_ref = []).concat.apply(_ref, files).map(toUrlString).filter(function (url) {
    return url.endsWith('.css');
  }).map(noprotocol);
};

function unloadStyles(document, files) {
  var links = getStyleSheetLinks(document);
  getStyleSheetUrls(files).forEach(function (file) {
    var link = links[file];

    if (link) {
      link.parentNode.removeChild(link);
    }
  });
}