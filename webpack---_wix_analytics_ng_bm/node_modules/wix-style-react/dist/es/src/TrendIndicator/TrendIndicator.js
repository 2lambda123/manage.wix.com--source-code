import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import React from 'react';
import PropTypes from 'prop-types';
import SortByArrowUp from 'wix-ui-icons-common/system/SortByArrowUp';
import SortByArrowDown from 'wix-ui-icons-common/system/SortByArrowDown';
import { st, classes } from './TrendIndicator.st.css';
import { dataHooks } from './constants';
/** TrendIndicator */

var TrendIndicator = /*#__PURE__*/function (_React$PureComponent) {
  _inherits(TrendIndicator, _React$PureComponent);

  var _super = _createSuper(TrendIndicator);

  function TrendIndicator() {
    _classCallCheck(this, TrendIndicator);

    return _super.apply(this, arguments);
  }

  _createClass(TrendIndicator, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          value = _this$props.value,
          inverted = _this$props.inverted,
          className = _this$props.className,
          dataHook = _this$props.dataHook;

      if (isNaN(Number(value))) {
        return null;
      }

      var skin = 'neutral';
      var trendIcon = null;

      if (value > 0) {
        trendIcon = /*#__PURE__*/React.createElement(SortByArrowUp, {
          "data-hook": dataHooks.trendIndicatorUp
        });
        skin = !inverted ? 'positive' : 'negative';
      } else if (value < 0) {
        trendIcon = /*#__PURE__*/React.createElement(SortByArrowDown, {
          "data-hook": dataHooks.trendIndicatorDown
        });
        skin = !inverted ? 'negative' : 'positive';
      }

      return /*#__PURE__*/React.createElement("div", {
        className: st(classes.root, {
          skin: skin
        }, className),
        "data-hook": dataHook
      }, /*#__PURE__*/React.createElement("div", {
        className: classes.caption
      }, !!value && /*#__PURE__*/React.createElement("span", {
        className: classes.icon,
        "data-hook": dataHooks.trendIndicatorIcon
      }, trendIcon), /*#__PURE__*/React.createElement("span", {
        "data-hook": dataHooks.trendIndicatorValue
      }, Math.abs(value), "%")));
    }
  }]);

  return TrendIndicator;
}(React.PureComponent);

TrendIndicator.displayName = 'TrendIndicator';
TrendIndicator.propTypes = {
  /** Applied as data-hook HTML attribute that can be used in the tests */
  dataHook: PropTypes.string,

  /** A css class to be applied to the component's root element */
  className: PropTypes.string,

  /** A number to be displayed as the trend, a positive number will be green with an arrow facing up and a negative number will be red with an arrow facing down */
  value: PropTypes.number.isRequired,

  /** Invert color and arrow direction. */
  inverted: PropTypes.bool
};
TrendIndicator.defaultProps = {
  inverted: false
};
export default TrendIndicator;