var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
/* tslint:disable */
/* eslint:disable */
/**
* @typedef {string} Url
*/
/**
* @typedef {string} GUID
*/
/**
* @typedef {number} DateTime
*/
var dummy;
var defaultConfig = { endpoint: 'analytics-ng-dashboard-widget' };
var init = function (webOrMobileLogger) { return function (userConfig) {
    if (userConfig === void 0) { userConfig = {}; }
    var defaults = userConfig.defaults, restOfConfig = __rest(userConfig, ["defaults"]);
    var config = __assign(__assign({}, defaultConfig), restOfConfig);
    var factoryInstance = typeof webOrMobileLogger.factory === 'function' ? webOrMobileLogger.factory(config) : webOrMobileLogger;
    var logger = getLogger(factoryInstance);
    return defaults ? logger.util.updateDefaults(defaults) : logger;
}; };
export var initCustomLogger = function (factoryInstance) { return getLogger(factoryInstance); };
var getLogger = function (biLoggerClientFactoryInstance) {
    return new Logger(biLoggerClientFactoryInstance);
};
var Logger = /** @class */ (function () {
    function Logger(biLoggerClientFactoryInstance) {
        var _this = this;
        this.biLoggerClientFactoryInstance = biLoggerClientFactoryInstance;
        this.util = {
            updateDefaults: function (defaults) {
                _this.biLoggerClientFactoryInstance.updateDefaults(defaults);
                return _this;
            },
            log: function (logParams, context) {
                return _this.bi.log(logParams, context);
            }
        };
        biLoggerClientFactoryInstance
            .updateDefaults({ src: 73 });
        this.bi = biLoggerClientFactoryInstance.logger({ endpoint: 'analytics-ng-dashboard-widget' });
    }
    ;
    /**
    * @typedef {Object} mobileCustomizationClickOnAddNewParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization -> click on 'Add new'. Evid: 718.
     * Event description: When the user clicks on 'add new' in the customization screen.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationClickOnAddNewParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationClickOnAddNew = function (params) {
        return this.bi.log(__assign({ evid: 718 }, params));
    };
    /**
    * @typedef {Object} mobileCardClickOnGraphParams
    * @property {string} category - The KPI's category
    * @property {GUID} dashboardId - The dashboard_id we directed the users to
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {boolean} isShown - indicates if the tooltip is shown
    * @property {string} kpiName - The KPI name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile - Card -> click on graph. Evid: 727.
     * Event description: When the user clicks on the graph inside a card and the tooltip open/closed.
    
     * category - Type: string. Desc: The KPI's category
     *
     * dashboardId - Type: guid. Desc: The dashboard_id we directed the users to
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * isShown - Type: bool. Desc: indicates if the tooltip is shown
     *
     * kpiName - Type: string. Desc: The KPI name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCardClickOnGraphParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCardClickOnGraph = function (params) {
        return this.bi.log(__assign({ evid: 727 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationClickToDeleteKpiParams
    * @property {string} category - The KPI's category
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI's name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization -> click to delete KPI. Evid: 717.
     * Event description: When the user clicks to delete a KPI in the customization screen.
    
     * category - Type: string. Desc: The KPI's category
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI's name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationClickToDeleteKpiParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationClickToDeleteKpi = function (params) {
        return this.bi.log(__assign({ evid: 717 }, params));
    };
    /**
    * @typedef {Object} hoverOnSparklineParams
    * @property {string} category - The KPI's category
    * @property {string} date - The date of the hover point
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame
    * @property {string} value - The value of the hover point
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Hover on sparkline. Evid: 703.
     * Event description: When the user hovers on the sparkline.
    
     * category - Type: string. Desc: The KPI's category
     *
     * date - Type: string. Desc: The date of the hover point
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * value - Type: string. Desc: The value of the hover point
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {hoverOnSparklineParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.hoverOnSparkline = function (params) {
        return this.bi.log(__assign({ evid: 703 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationAddNewScreenClickOnFilterIconParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization - 'Add New' screen -> click on filter icon. Evid: 724.
     * Event description: When the user clicks on the filter icon in the 'Add new stats' screen.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationAddNewScreenClickOnFilterIconParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationAddNewScreenClickOnFilterIcon = function (params) {
        return this.bi.log(__assign({ evid: 724 }, params));
    };
    /**
    * @typedef {Object} clickToRefreshAllKpisParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {boolean} isSalesDummy - Indicates if the data of Sales is dummy
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} people_CTA - The CTA displayed to the user under the People KPI
    * @property {string} salesCta - The CTA displayed to the user under the Sales KPI
    * @property {string} timeFrame - The widget time frame
    * @property {string} trafficCta - The CTA displayed to the user under the Traffic KPI
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Click to refresh all KPIs. Evid: 729.
     * Event description: When the user clicks on "Refresh". All KPIs will be reloaded at once. Available only for the new vertical widget..
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * isSalesDummy - Type: bool. Desc: Indicates if the data of Sales is dummy
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * people_CTA - Type: string. Desc: The CTA displayed to the user under the People KPI
     *
     * salesCta - Type: string. Desc: The CTA displayed to the user under the Sales KPI
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * trafficCta - Type: string. Desc: The CTA displayed to the user under the Traffic KPI
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {clickToRefreshAllKpisParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickToRefreshAllKpis = function (params) {
        return this.bi.log(__assign({ evid: 729 }, params));
    };
    /**
    * @typedef {Object} hoverOnKpiTitleParams
    * @property {string} category - The KPI's category
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Hover on KPI title. Evid: 720.
     * Event description: When the user hovers on the KPI title.
    
     * category - Type: string. Desc: The KPI's category
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {hoverOnKpiTitleParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.hoverOnKpiTitle = function (params) {
        return this.bi.log(__assign({ evid: 720 }, params));
    };
    /**
    * @typedef {Object} mobileViewReportsClickedInsideACardParams
    * @property {string} category - The KPI's category
    * @property {GUID} dashboardId - The dashboard_id we directed the users to
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile - View reports clicked inside a card. Evid: 726.
     * Event description: When the user clicks on 'View reports' inside a card.
    
     * category - Type: string. Desc: The KPI's category
     *
     * dashboardId - Type: guid. Desc: The dashboard_id we directed the users to
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileViewReportsClickedInsideACardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileViewReportsClickedInsideACard = function (params) {
        return this.bi.log(__assign({ evid: 726 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationClickOnSaveParams
    * @property {string} addedKpis - List of the added KPIs
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {boolean} orderChanged - indicates if the order changed
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} removedKpis - List of the removed KPIs
    * @property {string} targetKpisList - The ordered KPIs list after the change
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization - Click on save. Evid: 722.
     * Event description: When the user saves the customized widget.
    
     * addedKpis - Type: string. Desc: List of the added KPIs
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderChanged - Type: bool. Desc: indicates if the order changed
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * removedKpis - Type: string. Desc: List of the removed KPIs
     *
     * targetKpisList - Type: string. Desc: The ordered KPIs list after the change
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationClickOnSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationClickOnSave = function (params) {
        return this.bi.log(__assign({ evid: 722 }, params));
    };
    /**
    * @typedef {Object} customizationModalClickOnSaveParams
    * @property {string} addedKpis - List of the added KPIs
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {boolean} orderChanged - Indicates if the KPIs' order changed
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} removedKpis - List of the removed KPIs
    * @property {string} targetKpisList - The ordered KPIs list after the change
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Customization modal -> click on save. Evid: 710.
     * Event description: When the user saves the customized widget.
    
     * addedKpis - Type: string. Desc: List of the added KPIs
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderChanged - Type: bool. Desc: Indicates if the KPIs' order changed
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * removedKpis - Type: string. Desc: List of the removed KPIs
     *
     * targetKpisList - Type: string. Desc: The ordered KPIs list after the change
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {customizationModalClickOnSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customizationModalClickOnSave = function (params) {
        return this.bi.log(__assign({ evid: 710 }, params));
    };
    /**
    * @typedef {Object} mobileExpandCardCollapsedParams
    * @property {string} category - The KPI's category
    * @property {GUID} dashboardId - The dashboard_id we directed the users to
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile - Expand card collapsed. Evid: 728.
     * Event description: When the user collapses the expanded card.
    
     * category - Type: string. Desc: The KPI's category
     *
     * dashboardId - Type: guid. Desc: The dashboard_id we directed the users to
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileExpandCardCollapsedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileExpandCardCollapsed = function (params) {
        return this.bi.log(__assign({ evid: 728 }, params));
    };
    /**
    * @typedef {Object} ctaClickedInsideTheWidgetParams
    * @property {string} category - The category in which the CTA clicked
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI in which the CTA clicked
    * @property {string} name - The CTA name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} source - card/tooltip
    * @property {string} timeFrame - The widget time frame
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: CTA clicked inside the widget. Evid: 702.
     * Event description: When the user clicks on a CTA inside the widget.
    
     * category - Type: string. Desc: The category in which the CTA clicked
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI in which the CTA clicked
     *
     * name - Type: string. Desc: The CTA name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * source - Type: string. Desc: card/tooltip
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {ctaClickedInsideTheWidgetParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.ctaClickedInsideTheWidget = function (params) {
        return this.bi.log(__assign({ evid: 702 }, params));
    };
    /**
    * @typedef {Object} clickToRefreshParams
    * @property {string} category - The KPI's category
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Click to refresh. Evid: 701.
     * Event description: When the user clicks to refresh.
    
     * category - Type: string. Desc: The KPI's category
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {clickToRefreshParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickToRefresh = function (params) {
        return this.bi.log(__assign({ evid: 701 }, params));
    };
    /**
    * @typedef {Object} dateChangedParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} targetValue - The target date value
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Date changed. Evid: 707.
     * Event description: When the user changes the widget time frame.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * targetValue - Type: string. Desc: The target date value
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {dateChangedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.dateChanged = function (params) {
        return this.bi.log(__assign({ evid: 707 }, params));
    };
    /**
    * @typedef {Object} widgetExpandCollapseParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} value - expand/collapse
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Widget expand/collapse. Evid: 709.
     * Event description: When the user expand/collapse the widget.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * value - Type: string. Desc: expand/collapse
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {widgetExpandCollapseParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.widgetExpandCollapse = function (params) {
        return this.bi.log(__assign({ evid: 709 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationAddNewScreenSearchBoxParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {number} resultsCount - the total number of results
    * @property {string} searchResults - the search results
    * @property {string} searchTerm - the search term
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization - 'Add New' screen -> search box. Evid: 723.
     * Event description: When the user uses the search box in the 'Add new stats' screen.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * resultsCount - Type: numeric. Desc: the total number of results
     *
     * searchResults - Type: string. Desc: the search results
     *
     * searchTerm - Type: string. Desc: the search term
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationAddNewScreenSearchBoxParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationAddNewScreenSearchBox = function (params) {
        return this.bi.log(__assign({ evid: 723 }, params));
    };
    /**
    * @typedef {Object} clickOnCardParams
    * @property {string} category - The KPI's category
    * @property {GUID} dashboardId - The dashboard_id we directed the users to
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} reportMode - report mode - regular/advanced (contains 'more' filters)
    * @property {string} sourceType - "deeplink" if the page was opened through deeplink
    * @property {string} timeFrame - The widget time frame
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Click on card. Evid: 711.
     * Event description: When the user clicks on a card which opens the full report.
    
     * category - Type: string. Desc: The KPI's category
     *
     * dashboardId - Type: guid. Desc: The dashboard_id we directed the users to
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * reportMode - Type: string. Desc: report mode - regular/advanced (contains 'more' filters)
     *
     * sourceType - Type: string. Desc: "deeplink" if the page was opened through deeplink
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {clickOnCardParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickOnCard = function (params) {
        return this.bi.log(__assign({ evid: 711 }, params));
    };
    /**
    * @typedef {Object} hoverOnTheInformationIconParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Hover on the information icon. Evid: 705.
     * Event description: When the user hovers on the information icon.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {hoverOnTheInformationIconParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.hoverOnTheInformationIcon = function (params) {
        return this.bi.log(__assign({ evid: 705 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationAddNewScreenClickOnSaveParams
    * @property {string} addedKpis - List of the added KPIs
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} removedKpis - List of the removed KPIs
    * @property {string} targetKpisList - The ordered KPIs list after the change
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization - 'Add New' screen -> click on done. Evid: 719.
     * Event description: When the user finished adding/removing KPIs.
    
     * addedKpis - Type: string. Desc: List of the added KPIs
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * removedKpis - Type: string. Desc: List of the removed KPIs
     *
     * targetKpisList - Type: string. Desc: The ordered KPIs list after the change
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationAddNewScreenClickOnSaveParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationAddNewScreenClickOnSave = function (params) {
        return this.bi.log(__assign({ evid: 719 }, params));
    };
    /**
    * @typedef {Object} widgetDisplayedParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {boolean} isSalesDummy - Indicates if the data of Sales is dummy
    * @property {number} mobileLoadingTime - the widget loading time - relevant only on mobile
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} people_CTA - The CTA displayed to the user under the People KPI
    * @property {string} salesCta - The CTA displayed to the user under the Sales KPI
    * @property {string} sourceType - "deeplink" if the page was opened through deeplink
    * @property {string} timeFrame - The widget time frame
    * @property {string} trafficCta - The CTA displayed to the user under the Traffic KPI
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical)
    **/
    /**
     * Name: Widget displayed. Evid: 700.
     * Event description: When the widget finished loading and displayed to the user.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * isSalesDummy - Type: bool. Desc: Indicates if the data of Sales is dummy
     *
     * mobileLoadingTime - Type: numeric. Desc: the widget loading time - relevant only on mobile
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * people_CTA - Type: string. Desc: The CTA displayed to the user under the People KPI
     *
     * salesCta - Type: string. Desc: The CTA displayed to the user under the Sales KPI
     *
     * sourceType - Type: string. Desc: "deeplink" if the page was opened through deeplink
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * trafficCta - Type: string. Desc: The CTA displayed to the user under the Traffic KPI
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical)
     * @param {widgetDisplayedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.widgetDisplayed = function (params) {
        return this.bi.log(__assign({ evid: 700 }, params));
    };
    /**
    * @typedef {Object} mobileViewAllReportsClickedParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile - View all reports clicked. Evid: 715.
     * Event description: When the user clicks on 'View all reports'.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileViewAllReportsClickedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileViewAllReportsClicked = function (params) {
        return this.bi.log(__assign({ evid: 715 }, params));
    };
    /**
    * @typedef {Object} customizationModalClickOnCancelExitParams
    * @property {string} button_name - cancel/exit
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} widgetType - ndicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Customization modal -> click on cancel/exit. Evid: 712.
     * Event description: When the user clicks on cancel/exit in the customization modal.
    
     * button_name - Type: string. Desc: cancel/exit
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * widgetType - Type: string. Desc: ndicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {customizationModalClickOnCancelExitParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customizationModalClickOnCancelExit = function (params) {
        return this.bi.log(__assign({ evid: 712 }, params));
    };
    /**
    * @typedef {Object} clickOnCustomizeParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Click on customize. Evid: 708.
     * Event description: When the user clicks on customize.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {clickOnCustomizeParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickOnCustomize = function (params) {
        return this.bi.log(__assign({ evid: 708 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationReorderParams
    * @property {string} category - The KPI's category
    * @property {number} currentPosition - The KPI current position
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI's name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {number} targetPosition - The KPI target position
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization -> Reorder. Evid: 716.
     * Event description: When the user reorders a KPI in the customization screen.
    
     * category - Type: string. Desc: The KPI's category
     *
     * currentPosition - Type: numeric. Desc: The KPI current position
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI's name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * targetPosition - Type: numeric. Desc: The KPI target position
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationReorderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationReorder = function (params) {
        return this.bi.log(__assign({ evid: 716 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationAddNewScreenFilterChosenParams
    * @property {string} filterName - the filter name
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    **/
    /**
     * Name: Mobile Customization - 'Add New' screen -> filter chosen. Evid: 725.
     * Event description: When the user chose a filter in the 'Add new stats' screen.
    
     * filterName - Type: string. Desc: the filter name
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     * @param {mobileCustomizationAddNewScreenFilterChosenParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationAddNewScreenFilterChosen = function (params) {
        return this.bi.log(__assign({ evid: 725 }, params));
    };
    /**
    * @typedef {Object} hoverOnSmartActionParams
    * @property {string} category - The KPI's category
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpiName - The KPI
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame
    * @property {string} value - The value of the smart action
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Click on smart action. Evid: 713.
     * Event description: When the user clicks on the 'smart action' (boost your traffic/get more leads etc..) and the tooltip opens.
    
     * category - Type: string. Desc: The KPI's category
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpiName - Type: string. Desc: The KPI
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * value - Type: string. Desc: The value of the smart action
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {hoverOnSmartActionParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.hoverOnSmartAction = function (params) {
        return this.bi.log(__assign({ evid: 713 }, params));
    };
    /**
    * @typedef {Object} customizationModalAddRemoveKpiParams
    * @property {string} actionName - add/remove
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} kpi_name - The KPI name
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Customization modal -> Add/Remove KPI. Evid: 714.
     * Event description: When the user adds a KPI in the customization modal.
    
     * actionName - Type: string. Desc: add/remove
     *
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * kpi_name - Type: string. Desc: The KPI name
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {customizationModalAddRemoveKpiParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customizationModalAddRemoveKpi = function (params) {
        return this.bi.log(__assign({ evid: 714 }, params));
    };
    /**
    * @typedef {Object} clickOnTheDateFilterParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} timeFrame - The widget time frame
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Click on the date filter. Evid: 706.
     * Event description: When the user clicks on the date filter.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * timeFrame - Type: string. Desc: The widget time frame
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {clickOnTheDateFilterParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.clickOnTheDateFilter = function (params) {
        return this.bi.log(__assign({ evid: 706 }, params));
    };
    /**
    * @typedef {Object} mobileCustomizationDialogAlertPromptedParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} screenName - reorder/add new stats
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} dialogType - discard changes/minimum 1 widget is needed
    **/
    /**
     * Name: Mobile Customization -> Dialog alert prompted. Evid: 721.
     * Event description: When the dialog alert prompted.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * screenName - Type: string. Desc: reorder/add new stats
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * dialogType - Type: string. Desc: discard changes/minimum 1 widget is needed
     * @param {mobileCustomizationDialogAlertPromptedParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.mobileCustomizationDialogAlertPrompted = function (params) {
        return this.bi.log(__assign({ evid: 721 }, params));
    };
    /**
    * @typedef {Object} customizationModalReorderParams
    * @property {boolean} isDefault - Indicates if the user has customized the widget
    * @property {string} orderedKpisList - The KPIs list (category,name and main value) by their order inside the widget
    * @property {string} targetKpisList - The ordered KPIs list after the change
    * @property {string} timeFrame - The widget time frame (before the change)
    * @property {string} widgetType - Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
    **/
    /**
     * Name: Customization modal -> Reorder. Evid: 704.
     * Event description: When the user reorders a KPI in the customization modal.
    
     * isDefault - Type: bool. Desc: Indicates if the user has customized the widget
     *
     * orderedKpisList - Type: string. Desc: The KPIs list (category,name and main value) by their order inside the widget
     *
     * targetKpisList - Type: string. Desc: The ordered KPIs list after the change
     *
     * timeFrame - Type: string. Desc: The widget time frame (before the change)
     *
     * widgetType - Type: string. Desc: Indicates a type of the widget:(horizontal|vertical). Horizontal is an old one.
     * @param {customizationModalReorderParams} params The parameters for this event.
     * @return {Promise}
    **/
    Logger.prototype.customizationModalReorder = function (params) {
        return this.bi.log(__assign({ evid: 704 }, params));
    };
    return Logger;
}());
export { Logger };
export default init;
export function getLoggerConf() {
    return {
        src: 73,
        endpoint: 'analytics-ng-dashboard-widget'
    };
}
//# sourceMappingURL=index.js.map