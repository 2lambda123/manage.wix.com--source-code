import { ResultDate } from '../Date/ResultDate';
var TimeFrame = /** @class */ (function () {
    function TimeFrame() {
    }
    TimeFrame.prototype.getQueryResultData = function (queryResult) {
        return queryResult.getData();
    };
    TimeFrame.prototype.getFirstDateInDataset = function (queryResult, options) {
        var todayDate = queryResult.getFirstDate();
        var resultDate = ResultDate.fromDateString(todayDate, { locale: options.locale });
        return resultDate;
    };
    TimeFrame.prototype.getTodayDate = function (queryResult, options) {
        var todayDate = queryResult.getTodayDate();
        var resultDate = ResultDate.fromDateString(todayDate, { locale: options.locale });
        return resultDate;
    };
    TimeFrame.prototype.getTimeframeData = function (queryResult, options) {
        var _a = this.getDateInterval(queryResult, options), startDate = _a.startDate, numberOfDays = _a.numberOfDays;
        var firstDate = this.getFirstDateInDataset(queryResult, options);
        var resultDate = ResultDate.fromDateString(startDate, { locale: options.locale });
        if (resultDate.isBefore(firstDate)) {
            var diff = resultDate.differenceInDays(firstDate);
            startDate = firstDate.toDateString();
            numberOfDays = numberOfDays - diff;
            if (numberOfDays < 0) {
                throw new Error("Dataset doesn't contain the necessary dates");
            }
        }
        return { startDate: startDate, numberOfDays: numberOfDays };
    };
    TimeFrame.prototype.getPreviousTimeframeData = function (queryResult, options) {
        var result = this.getPreviousDateInterval(queryResult, options);
        var firstDate = this.getFirstDateInDataset(queryResult, options);
        var resultDate = ResultDate.fromDateString(result.startDate, { locale: options.locale });
        if (resultDate.isBefore(firstDate)) {
            result = null;
        }
        return result;
    };
    return TimeFrame;
}());
export { TimeFrame };
//# sourceMappingURL=TimeFrame.js.map