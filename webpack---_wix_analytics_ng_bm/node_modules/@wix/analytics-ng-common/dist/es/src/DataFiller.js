import { QueryResult } from './QueryResult';
import { ResultDate, DAY_FORMAT } from './Date/ResultDate';
import { getTimeFrame } from './TimeFrames/getTimeframe';
var DefaultTimeService = /** @class */ (function () {
    function DefaultTimeService() {
    }
    DefaultTimeService.prototype.getToday = function () {
        return new Date();
    };
    return DefaultTimeService;
}());
var DataFiller = /** @class */ (function () {
    function DataFiller() {
    }
    DataFiller.createDataPoint = function (resultDate, timedDimensionKey, measures) {
        var _a;
        var newDataPoint = (_a = {},
            _a[timedDimensionKey] = resultDate.toDateString(),
            _a);
        measures.forEach(function (measure) {
            newDataPoint[measure] = 0;
        });
        return newDataPoint;
    };
    DataFiller.getCurrentDay = function (data, timedDimensionKey, options) {
        var locale = options.locale;
        var timeService = options.timeService || new DefaultTimeService();
        var externalTodayDate = timeService.getToday();
        var dateFormat = DAY_FORMAT;
        var result;
        var lastResultDate;
        if (Array.isArray(data) && data.length > 0) {
            var lastDataPoint = data[data.length - 1];
            var timedDimension = lastDataPoint[timedDimensionKey];
            lastResultDate = ResultDate.fromDateString(timedDimension, { locale: locale });
            dateFormat = lastResultDate.getFormat();
        }
        result = new ResultDate(externalTodayDate, dateFormat, locale);
        if (lastResultDate && result.differenceInDays(lastResultDate) < 0) {
            result = lastResultDate;
        }
        return result;
    };
    DataFiller.fillMissingData = function (request, response, view, options) {
        var predefined = request.predefined, dimensions = request.dimensions, measures = request.measures;
        var _a = response.data, data = _a === void 0 ? [] : _a;
        var locale = options.locale;
        var timedDimensionKey = QueryResult.getTimeframeDimensionKeys(dimensions, view)[0];
        var currentDate = DataFiller.getCurrentDay(data, timedDimensionKey, options);
        var timeframe = getTimeFrame(predefined);
        var requiredDataLength = timeframe.getRequiredDataLength();
        var resultDatasetReversed = [];
        var currentDataResultIndex = data.length;
        while (resultDatasetReversed.length < requiredDataLength || currentDataResultIndex > 0) {
            var dataPoint = data[currentDataResultIndex - 1];
            if (dataPoint) {
                var timedDimension = dataPoint[timedDimensionKey];
                var dateResult = ResultDate.fromDateString(timedDimension, { locale: locale });
                if (dateResult.isSameDay(currentDate)) {
                    resultDatasetReversed.push(dataPoint);
                    currentDate = currentDate.subtractDays(1);
                }
                else {
                    var missingDays = currentDate.differenceInDays(dateResult);
                    for (var missingDayIndex = 0; missingDayIndex < missingDays - 1; missingDayIndex++) {
                        var newDataPoint = DataFiller.createDataPoint(currentDate, timedDimensionKey, measures);
                        resultDatasetReversed.push(newDataPoint);
                        currentDate = currentDate.subtractDays(1);
                    }
                    resultDatasetReversed.push(dataPoint);
                    currentDate = currentDate.subtractDays(1);
                }
            }
            else {
                var newDataPoint = DataFiller.createDataPoint(currentDate, timedDimensionKey, measures);
                currentDate = currentDate.subtractDays(1);
                resultDatasetReversed.push(newDataPoint);
            }
            currentDataResultIndex--;
        }
        return resultDatasetReversed.reverse();
    };
    return DataFiller;
}());
export { DataFiller };
//# sourceMappingURL=DataFiller.js.map