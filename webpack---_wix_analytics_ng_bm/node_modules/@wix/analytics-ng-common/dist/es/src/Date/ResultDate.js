import { format, parse, isValid, startOfWeek, subDays, isBefore, differenceInCalendarDays, subWeeks, startOfMonth, subMonths, isSameDay, } from 'date-fns';
export var TIME_FORMAT = "yyyy-MM-dd HH:mm:ss";
export var DAY_FORMAT = "yyyy-MM-dd";
export var MONTH_FORMAT = "yyyy-MM";
var ResultDate = /** @class */ (function () {
    function ResultDate(date, dateFormat, locale) {
        this._date = date;
        this._format = dateFormat;
        this._locale = locale;
    }
    ResultDate.fromDateString = function (dateString, options) {
        if (options === void 0) { options = {}; }
        var locale = options.locale;
        var _a = ResultDate.getDateAndFormat(dateString), dateFormat = _a.dateFormat, date = _a.date;
        return new ResultDate(date, dateFormat, locale);
    };
    ResultDate.getDateAndFormat = function (dateString) {
        var dateFormat = DAY_FORMAT;
        var date;
        date = parse(dateString, dateFormat, new Date());
        if (!isValid(date)) {
            dateFormat = TIME_FORMAT;
            date = parse(dateString, dateFormat, new Date());
        }
        if (!isValid(date)) {
            dateFormat = MONTH_FORMAT;
            date = parse(dateString, dateFormat, new Date());
        }
        if (!isValid(date)) {
            throw new Error("Invalid date format '" + dateString + "'");
        }
        return { dateFormat: dateFormat, date: date };
    };
    ResultDate.prototype.getDate = function () {
        return this._date;
    };
    ResultDate.prototype.getFormat = function () {
        return this._format;
    };
    ResultDate.prototype.toDateString = function () {
        return format(this._date, this._format);
    };
    ResultDate.prototype.getStartOfWeek = function () {
        var startOfWeekDate = startOfWeek(this._date, { locale: this._locale });
        return this._returnNewDate(startOfWeekDate);
    };
    ResultDate.prototype.getStartOfTheMonth = function () {
        var startOfMonthDate = startOfMonth(this._date);
        return this._returnNewDate(startOfMonthDate);
    };
    ResultDate.prototype.subtractDays = function (numberOfDays) {
        var newDate = subDays(this._date, numberOfDays);
        return this._returnNewDate(newDate);
    };
    ResultDate.prototype.subtractWeeks = function (numberOfWeeks) {
        var newDate = subWeeks(this._date, numberOfWeeks);
        return this._returnNewDate(newDate);
    };
    ResultDate.prototype._returnNewDate = function (newDate) {
        return new ResultDate(newDate, this._format, this._locale);
    };
    ResultDate.prototype.isBefore = function (compareDate) {
        return isBefore(this._date, compareDate.getDate());
    };
    ResultDate.prototype.differenceInDays = function (compareDate) {
        // +1 Since this should include the current day
        return differenceInCalendarDays(this._date, compareDate.getDate()) + 1;
    };
    ResultDate.prototype.subtractMonths = function (numberOfMonths) {
        var newDate = subMonths(this._date, numberOfMonths);
        return this._returnNewDate(newDate);
    };
    ResultDate.prototype.isSameDay = function (compareDate) {
        return isSameDay(this._date, compareDate.getDate());
    };
    return ResultDate;
}());
export { ResultDate };
//# sourceMappingURL=ResultDate.js.map