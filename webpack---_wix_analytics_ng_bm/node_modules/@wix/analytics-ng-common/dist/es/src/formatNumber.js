import { MeasureType, PredefinedTimeframe } from './enums';
var insertMultiplier = function (sum, multiplier) {
    if (!multiplier) {
        return sum;
    }
    if (sum.charCodeAt(0) === 8207) {
        // removing invisible character from the start of the string
        sum = sum.slice(1);
    }
    if (RegExp(/^\d/).test(sum)) {
        var notPartOfNumber = RegExp(/[^0-9.,]/);
        var i = sum.search(notPartOfNumber);
        var charactersToRemove_1 = sum[i - 2] === '0' ? -3 : -1;
        return [sum.slice(0, i).slice(0, charactersToRemove_1), multiplier, sum.slice(i)].join('');
    }
    var charactersToRemove = sum[sum.length - 2] === '0' ? -3 : -1;
    return sum.slice(0, charactersToRemove) + multiplier;
};
var roundDecimalNumber = function (number) {
    return Math.round(number * 10) / 10;
};
var moneyFormatter = function (nmb, locale, currency) {
    var res;
    var multiplier;
    if (nmb < 10e2) {
        res = new Intl.NumberFormat(locale, { style: 'currency', currency: currency }).format(nmb);
        multiplier = '';
    }
    if (nmb >= 10e2 && nmb < 10e5) {
        var roundedNumber = roundDecimalNumber(nmb / 10e2);
        res = new Intl.NumberFormat(locale, { style: 'currency', currency: currency }).format(roundedNumber);
        multiplier = 'K';
    }
    if (nmb >= 10e5 && nmb < 10e8) {
        var roundedNumber = roundDecimalNumber(nmb / 10e5);
        res = new Intl.NumberFormat(locale, { style: 'currency', currency: currency }).format(roundedNumber);
        multiplier = 'M';
    }
    if (nmb >= 10e8) {
        var roundedNumber = roundDecimalNumber(nmb / 10e8);
        res = new Intl.NumberFormat(locale, { style: 'currency', currency: currency }).format(roundedNumber);
        multiplier = 'B';
    }
    return insertMultiplier(res, multiplier);
};
var primeFormatter = function (nmb, locale) {
    // 0 - 100K
    if (nmb < 10e4) {
        return new Intl.NumberFormat(locale).format(Number(nmb.toFixed()));
    }
    // 100K - 1M
    if (nmb < 10e5) {
        return new Intl.NumberFormat(locale).format(Number((nmb / 10e2).toFixed(1))) + 'K';
    }
    // 1M - 1B
    if (nmb < 10e8) {
        return new Intl.NumberFormat(locale).format(Number((nmb / 10e5).toFixed(1))) + 'M';
    }
    // > 1B
    return new Intl.NumberFormat(locale, {}).format(Number((nmb / 10e8).toFixed(1))) + 'B';
};
var percentageFormatter = function (nmb, locale, percentageSymbol) {
    return new Intl.NumberFormat(locale).format(Number((nmb * 100).toFixed())) + percentageSymbol;
};
var timeFormatter = function (nmb, shorthandForMinutes, shorthandForSeconds) {
    if (nmb < 60) {
        return nmb.toFixed() + shorthandForSeconds;
    }
    var minutes = Math.floor(nmb / 60);
    var seconds = Math.round(nmb - 60 * minutes);
    return seconds
        ? "" + minutes + shorthandForMinutes + " " + seconds + shorthandForSeconds
        : "" + minutes + shorthandForMinutes;
};
export function numberFormatter(nmb, measureType, locale, currency, shorthandForMinutes, shorthandForSeconds, percentageSymbol) {
    switch (measureType) {
        case MeasureType.prime:
            return primeFormatter(nmb, locale);
        case MeasureType.percent:
            return percentageFormatter(nmb, locale, percentageSymbol);
        case MeasureType.money:
            return moneyFormatter(nmb, locale, currency);
        case MeasureType.time:
            return timeFormatter(nmb, shorthandForMinutes, shorthandForSeconds);
        default:
            return nmb;
    }
}
export function isAverageMeasure(measure) {
    return [
        'traffic_api.site_avg_time',
        'traffic_api.bounce_rate',
        'transactions_api.average_order_value',
    ].includes(measure);
}
export var getSum = function (dataSet, timeframe) {
    var total = dataSet.values.reduce(function (curr, next) {
        return curr + next;
    }, 0);
    var length = dataSet.values.length;
    if (length === 0) {
        return 0;
    }
    switch (dataSet.measureLabelKey) {
        case 'widget.dashboard.stat.bounce-rate.measure-label': {
            if (timeframe.timeframe === PredefinedTimeframe.LAST_90_DAYS) {
                return total / 90;
            }
            return total / length;
        }
        case 'widget.dashboard.stat.average-time.measure-label': {
            if (timeframe.timeframe === PredefinedTimeframe.LAST_90_DAYS) {
                return total / 90;
            }
            return total / length;
        }
        case 'widget.dashboard.stat.avg-order-value.measure-label': {
            if (timeframe.timeframe === PredefinedTimeframe.LAST_90_DAYS) {
                return total / 90;
            }
            return total / length;
        }
        default:
            return total;
    }
};
export var extendedNumberFormatter = function (nmb, measureType, locale, currency, shorthandForMinutes, shorthandForSeconds) {
    switch (measureType) {
        case MeasureType.money:
            return new Intl.NumberFormat(locale, { style: 'currency', currency: currency }).format(Number(nmb.toFixed(2)));
        default:
            return null;
    }
};
//# sourceMappingURL=formatNumber.js.map