var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { once, kebabCase } from 'lodash';
import { createFetchAsyncMessagesLoader } from '../createFetchAsyncMessagesLoader';
import { createSentry } from './createSentry';
// This is meant to make a `ReadOnlyExperiments` instance appear to be `Experiments`.
// This was done so we don't break the return type of `useExperiments(): { experiments: Experiments }`
// but ideally, in the next major we will break it in favor of `useExperiments(): { experiments: ReadOnlyExperiments }`
function makeMutable(experiments) {
    if (process.env.NODE_ENV !== 'development') {
        return experiments;
    }
    var unimplemented = function () {
        throw new Error('Method not implemented while `centralized: true`!');
    };
    var mutableExperiments = {
        get: experiments.get.bind(experiments),
        all: experiments.all.bind(experiments),
        enabled: experiments.enabled.bind(experiments),
        pending: experiments.pending.bind(experiments),
        ready: experiments.ready.bind(experiments),
        add: unimplemented,
        load: unimplemented,
        conduct: unimplemented,
        _addConductResult: unimplemented,
        useNewApi: true,
    };
    return mutableExperiments;
}
export function createFlowAPIInstances(_a) {
    var _this = this;
    var _b, _c, _d, _e, _f, _g, _h;
    var bmModule = _a.bmModule, module = _a.module, optionalDeps = _a.optionalDeps;
    var _j = module.config, translationsConfig = _j.translations, sentryConfig = _j.sentry, maybeTranslationsModel = module.maybeTranslationsModel;
    var maybeSentry = (sentryConfig === null || sentryConfig === void 0 ? void 0 : sentryConfig.DSN) && !(sentryConfig === null || sentryConfig === void 0 ? void 0 : sentryConfig.errorMonitor)
        ? createSentry(bmModule, sentryConfig.DSN)
        : undefined;
    var maybeErrorMonitor;
    var fedopsLogger;
    if ((sentryConfig === null || sentryConfig === void 0 ? void 0 : sentryConfig.DSN) && (sentryConfig === null || sentryConfig === void 0 ? void 0 : sentryConfig.errorMonitor)) {
        var monitoringTools = bmModule._essentials.createMonitors({
            errorMonitorOptions: {
                dsn: sentryConfig === null || sentryConfig === void 0 ? void 0 : sentryConfig.DSN,
                appName: process.env.ARTIFACT_ID,
                version: process.env.ARTIFACT_VERSION,
            },
            fedopsLoggerOptions: {
                appName: kebabCase(module.moduleId),
                options: __assign({}, (_b = module.config.fedops) === null || _b === void 0 ? void 0 : _b.config),
            },
        });
        maybeErrorMonitor = monitoringTools.errorMonitor;
        fedopsLogger = monitoringTools.fedopsLogger;
    }
    else {
        fedopsLogger = bmModule._essentials.createFedopsLogger(kebabCase(module.moduleId), (_c = module.config.fedops) === null || _c === void 0 ? void 0 : _c.config);
    }
    var maybeTranslations;
    if (maybeTranslationsModel) {
        var maybeErrorReporterTransport = (maybeSentry === null || maybeSentry === void 0 ? void 0 : maybeSentry.hub) || maybeErrorMonitor;
        var _k = createFetchAsyncMessagesLoader({
            localeDistPath: (_d = maybeTranslationsModel.assets) === null || _d === void 0 ? void 0 : _d.localeDistPath,
            availableLocales: maybeTranslationsModel.availableLocales,
            errorReporter: maybeErrorReporterTransport,
        }), asyncMessagesLoader = _k.asyncMessagesLoader, addLocaleMessages = _k.addLocaleMessages;
        var i18n_1 = bmModule._essentials.createI18n({
            asyncMessagesLoader: asyncMessagesLoader,
            useSuspense: (_e = translationsConfig === null || translationsConfig === void 0 ? void 0 : translationsConfig.suspense) !== null && _e !== void 0 ? _e : true,
            disableAutoInit: true,
        });
        var init = once(function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!i18n_1.isInitialized) return [3 /*break*/, 2];
                        return [4 /*yield*/, i18n_1.init()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, i18n_1];
                }
            });
        }); });
        maybeTranslations = {
            i18n: i18n_1,
            asyncMessagesLoader: asyncMessagesLoader,
            addLocaleMessages: addLocaleMessages,
            init: init,
        };
    }
    var getBILogger = once(function () { return __awaiter(_this, void 0, void 0, function () {
        var createBILogger;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, optionalDeps.loadOptionalFlowAPIDeps()];
                case 1:
                    createBILogger = (_a.sent()).createBILogger;
                    return [2 /*return*/, createBILogger === null || createBILogger === void 0 ? void 0 : createBILogger({
                            biLoggerFactory: bmModule._essentials.biLoggerFactory,
                        })];
            }
        });
    }); });
    return {
        moduleFedopsLogger: fedopsLogger,
        maybeSentry: maybeSentry,
        maybeErrorMonitor: maybeErrorMonitor,
        maybeTranslations: maybeTranslations,
        getBILogger: getBILogger,
        maybeExperiments: ((_f = module.config.experiments) === null || _f === void 0 ? void 0 : _f.centralized) ? makeMutable(bmModule._essentials.experiments)
            : ((_h = (_g = module.config.experiments) === null || _g === void 0 ? void 0 : _g.scopes) === null || _h === void 0 ? void 0 : _h.length) ? bmModule._essentials.createExperiments({ scopes: [] })
                : undefined,
    };
}
//# sourceMappingURL=createFlowAPIInstances.js.map