"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerApi = exports.REPORT_EVENT_URL = exports.GET_OFFERS_V2 = void 0;
var tslib_1 = require("tslib");
var axios_1 = require("axios");
var wix_axios_config_1 = require("@wix/wix-axios-config");
var wix_experiments_1 = require("@wix/wix-experiments");
var services_1 = require("@wix/dealer-common/dist/src/services");
var toDomain_1 = require("@wix/dealer-common/dist/src/converters/toDomain");
exports.GET_OFFERS_V2 = '/_api/dealer-offers-serving-service/v1/dealer/serving/offers';
exports.REPORT_EVENT_URL = function (offerId) {
    return "/_api/dealer-offer-events-service/v1/dealer-offer-events/" + offerId;
};
function getBanners(params) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
        var listOffersRequest, banners;
        return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    listOffersRequest = {
                        realEstateId: params.bannerPositions[0],
                        limit: params.limit,
                        excludeOfferIds: params.excludeLightboxes,
                    };
                    if (!params.signedInstance && params.metasiteGuid) {
                        listOffersRequest['extensions.siteId'] = params.metasiteGuid;
                    }
                    return [4 /*yield*/, exports.ServerApi.doGet(exports.GET_OFFERS_V2, listOffersRequest, params.signedInstance ? { Authorization: params.signedInstance } : {}).then(function (_a) {
                            var data = _a.data;
                            if (!data || !data.offers || data.offers.length === 0) {
                                return [];
                            }
                            return data.offers.map(function (o) {
                                var bannerData = toDomain_1.convertOfferToBannerData(o);
                                return tslib_1.__assign({ asset: bannerData }, bannerData);
                            });
                        })];
                case 1:
                    banners = _a.sent();
                    return [2 /*return*/, banners];
            }
        });
    });
}
exports.ServerApi = {
    getDealerData: function (params) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var newParams, _a, experiments, banners, bannerData, finalBannerData;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    newParams = tslib_1.__assign(tslib_1.__assign({}, params), { limit: 1 });
                    return [4 /*yield*/, exports.ServerApi.getDealerDataNew(newParams)];
                case 1:
                    _a = _b.sent(), experiments = _a.experiments, banners = _a.banners;
                    bannerData = banners[0] || {};
                    finalBannerData = tslib_1.__assign(tslib_1.__assign({}, bannerData), { experiments: experiments });
                    if (!finalBannerData.asset) {
                        throw new Error('empty-data-dealer-content');
                    }
                    return [2 /*return*/, finalBannerData];
            }
        });
    }); },
    getDealerDataNew: function (params) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
        var experimentsLoader, experimentsPromise, _a, banners, experiments, response;
        return tslib_1.__generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    experimentsLoader = new wix_experiments_1.default();
                    // tslint:disable-next-line:no-floating-promises
                    experimentsLoader.load('dealer-client');
                    experimentsPromise = experimentsLoader
                        .ready()
                        .then(function () {
                        return experimentsLoader.all();
                    })
                        .catch(function () { return ({}); });
                    return [4 /*yield*/, Promise.all([
                            getBanners(params),
                            experimentsPromise,
                        ])];
                case 1:
                    _a = _b.sent(), banners = _a[0], experiments = _a[1];
                    response = {
                        experiments: experiments,
                        banners: banners,
                    };
                    return [2 /*return*/, response];
            }
        });
    }); },
    getOffersData: function (_a, headers) {
        var _b = _a.excludeAssetIds, excludeAssetIds = _b === void 0 ? [] : _b, realEstateId = _a.realEstateId;
        var req = {
            excludeOfferIds: excludeAssetIds,
            realEstateId: realEstateId,
        };
        return exports.ServerApi.doGet(exports.GET_OFFERS_V2, req, headers);
    },
    reportOfferEvent: function (params) {
        var request = params.request, signedInstance = params.signedInstance;
        if (!request.event.offerId) {
            return Promise.resolve({});
        }
        var headers = signedInstance ? { Authorization: signedInstance } : {};
        return exports.ServerApi.doPost(exports.REPORT_EVENT_URL(request.event.offerId), request, headers).catch(function (e) {
            services_1.reportSentryError(e, {
                realEstateId: request.event.realEstateId,
                eventType: request.event.type,
                offerId: request.event.offerId,
                dealerApiType: 'events',
                reportingClass: 'ServerApi.reportOfferEvent',
            });
        });
    },
    doPost: function (url, params, headersParams) {
        var instance = wix_axios_config_1.wixAxiosInstanceConfig(axios_1.default, {
            baseURL: '/',
        });
        return instance.post(url, params, {
            headers: tslib_1.__assign({ 'Content-Type': 'application/json;charset=UTF-8' }, headersParams),
        });
    },
    doGet: function (url, params, headersParams) {
        var instance = wix_axios_config_1.wixAxiosInstanceConfig(axios_1.default, {
            baseURL: '/',
        });
        return instance.get(url, {
            params: params,
            headers: tslib_1.__assign({ 'Content-Type': 'application/json;charset=UTF-8' }, headersParams),
        });
    },
};
//# sourceMappingURL=ServerApi.js.map