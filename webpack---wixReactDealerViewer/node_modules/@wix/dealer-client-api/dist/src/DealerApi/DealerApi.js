"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DealerApi = exports.shouldStartInteraction = exports.calcBannerKey = exports.FedopsInteractions = void 0;
var tslib_1 = require("tslib");
var SentryReporter_1 = require("@wix/dealer-common/dist/src/services/SentryReporter/SentryReporter");
var DealerAssetCache_1 = require("./DealerAssetCache");
var ServerApi_1 = require("../ServerApi");
exports.FedopsInteractions = {
    LOAD_ASSET: 'loadAsset',
};
exports.calcBannerKey = function (position, metasiteGuid) {
    return position + "#" + metasiteGuid;
};
exports.shouldStartInteraction = function (fedopsLogger, bannerKey, ignoreCache) {
    if (!fedopsLogger) {
        return false;
    }
    return !DealerAssetCache_1.DealerAssetCache.hasAsset(bannerKey) || ignoreCache;
};
exports.DealerApi = {
    loadAsset: function (_a, options) {
        var position = _a.position, metasiteGuid = _a.metasiteGuid, signedInstance = _a.signedInstance, fedopsLogger = _a.fedopsLogger;
        return new Promise(function (resolve) {
            var ignoreCache = options.ignoreCache;
            var bannerKey = exports.calcBannerKey(position, metasiteGuid);
            if (exports.shouldStartInteraction(fedopsLogger, bannerKey, ignoreCache)) {
                fedopsLogger.interactionStarted(exports.FedopsInteractions.LOAD_ASSET);
            }
            var dealerResponse = exports.DealerApi.getBannerData(position, metasiteGuid, bannerKey, fedopsLogger, ignoreCache, signedInstance);
            DealerAssetCache_1.DealerAssetCache.setAsset(bannerKey, dealerResponse);
            dealerResponse
                .then(function (_a) {
                var asset = _a.asset, experiments = _a.experiments;
                return resolve({
                    assetExist: function () { return true; },
                    bannerData: asset,
                    isEmpty: false,
                    experiments: experiments,
                });
            })
                .catch(function (e) {
                var isEmpty = e.message === 'empty-data-dealer-content';
                var error;
                if (!isEmpty) {
                    SentryReporter_1.reportSentryError(e, {
                        realEstateId: position,
                        msId: metasiteGuid,
                        dealerApiType: 'listOffers',
                        reportingClass: 'DealerApi.loadAsset',
                    });
                    error = e;
                }
                resolve({
                    assetExist: function () { return false; },
                    isEmpty: isEmpty,
                    experiments: null,
                    error: error,
                });
            });
        });
    },
    loadOffers: function (location, instance, reporter) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var params, header, data, err_1;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        params = { realEstateId: location };
                        header = { Authorization: instance };
                        return [4 /*yield*/, ServerApi_1.ServerApi.getOffersData(params, header)];
                    case 1:
                        data = (_a.sent()).data;
                        return [2 /*return*/, {
                                offers: data.offers.map(function (offer) { return ({
                                    id: offer.offerGuid,
                                    payload: JSON.parse(offer.asset.payloadJson),
                                    name: offer.offerName,
                                }); }),
                                hasError: false,
                                error: null,
                            }];
                    case 2:
                        err_1 = _a.sent();
                        SentryReporter_1.reportSentryError(err_1, {
                            realEstateId: location,
                            reportingClass: 'DealerApi.loadOffers',
                        });
                        reporter.captureException(err_1, {
                            extra: { realEstateId: location, instance: instance },
                        });
                        return [2 /*return*/, { offers: [], hasError: true, error: err_1 }];
                    case 3: return [2 /*return*/];
                }
            });
        });
    },
    getBannerData: function (position, metasiteGuid, bannerKey, fedopsLogger, ignoreCache, signedInstance) {
        if (ignoreCache === void 0) { ignoreCache = false; }
        return DealerAssetCache_1.DealerAssetCache.hasAsset(bannerKey) && !ignoreCache
            ? DealerAssetCache_1.DealerAssetCache.getAsset(bannerKey)
            : ServerApi_1.ServerApi.getDealerData({
                metasiteGuid: metasiteGuid,
                bannerPositions: [position],
                signedInstance: signedInstance,
            }).then(function (response) {
                if (fedopsLogger) {
                    fedopsLogger.interactionEnded(exports.FedopsInteractions.LOAD_ASSET);
                }
                return response;
            });
    },
};
//# sourceMappingURL=DealerApi.js.map