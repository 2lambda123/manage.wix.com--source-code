"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CmsElement = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var s = require("./CmsElement.scss");
var classnames_1 = require("classnames");
var camelCase = require("lodash.camelcase");
var CmsElementTypes_1 = require("./CmsElementTypes");
var CmsElementCommon_1 = require("./CmsElementCommon");
var ParamExtractor_1 = require("@wix/dealer-common/dist/src/services/ParamExtractor");
var SentryReporter_1 = require("@wix/dealer-common/dist/src/services/SentryReporter/SentryReporter");
var WithMouseEventsHandlers_1 = require("../WithMouseEventsHandlers/WithMouseEventsHandlers");
var isStyleSet = function (styleValue) {
    return styleValue || styleValue === 0;
};
var CmsElementComp = /** @class */ (function (_super) {
    tslib_1.__extends(CmsElementComp, _super);
    function CmsElementComp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getClassNames = function (name) {
            return name ? s[camelCase(name)] : s.helveticaNeueLight45;
        };
        _this.onCmsElementError = function (error) { var _a, _b; return (_b = (_a = _this.props).onError) === null || _b === void 0 ? void 0 : _b.call(_a, { errorType: 'CMS_ELEMENT', error: error }); };
        _this.onCmsElementWarning = function (error) { var _a, _b; return (_b = (_a = _this.props).onWarning) === null || _b === void 0 ? void 0 : _b.call(_a, { errorType: 'CMS_ELEMENT', error: error }); };
        return _this;
    }
    CmsElementComp.prototype.addToStyleIfDefined = function (params, context) {
        var style = params.style, element = params.element, attr = params.attr, suffix = params.suffix, styleName = params.styleName, prefix = params.prefix;
        var elementStyleRoot = this.isStyleOnGlobal ? element : element.en;
        var jsonVal = ParamExtractor_1.extractParam(element, context, attr);
        var defaultStyle = elementStyleRoot[attr];
        if (isStyleSet(defaultStyle) || isStyleSet(jsonVal)) {
            var styleNameOrDefault = jsonVal !== undefined ? jsonVal : defaultStyle; // extracted === 0 should be considered as valid and truthy.
            this.updateStyle(style, styleName || attr, prefix, styleNameOrDefault, suffix);
        }
    };
    CmsElementComp.prototype.updateStyle = function (style, atName, prefix, jsonVal, suffix) {
        if (prefix === void 0) { prefix = ''; }
        if (suffix === void 0) { suffix = ''; }
        style[atName] = "" + (prefix ? prefix : '') + jsonVal + (suffix ? suffix : '');
    };
    CmsElementComp.prototype.setIsStyleOnGlobal = function (val) {
        this.isStyleOnGlobal = val;
    };
    CmsElementComp.prototype.addFontWeightToStyle = function (style, element, context) {
        if (ParamExtractor_1.extractParam(element, context, 'cssBold')) {
            style.fontWeight = 'bold';
        }
        var fontWeight = ParamExtractor_1.extractParam(element, context, 'fontWeight');
        if (fontWeight) {
            style.fontWeight = fontWeight;
        }
    };
    CmsElementComp.prototype.addFontStyleToStyle = function (style, element, context) {
        if (ParamExtractor_1.extractParam(element, context, 'cssItalic')) {
            style.fontStyle = 'italic';
        }
    };
    CmsElementComp.prototype.addFontDecorationToStyle = function (style, element, context) {
        if (ParamExtractor_1.extractParam(element, context, 'cssUnderline')) {
            style.textDecoration = 'underline';
        }
    };
    CmsElementComp.prototype.addCursorToStyle = function (style, element, context) {
        if (ParamExtractor_1.extractParam(element, context, 'clickable')) {
            style.cursor = 'pointer';
        }
    };
    CmsElementComp.prototype.renderElementByType = function () {
        var type = this.props.element.type;
        var _a = this.props, bannerContext = _a.bannerContext, element = _a.element, dealerOptions = _a.dealerOptions;
        switch (type) {
            case 'text':
                return (React.createElement(CmsElementTypes_1.CmsText, { context: bannerContext, element: element, onError: this.onCmsElementError, onWarning: this.onCmsElementWarning, dealerOptions: dealerOptions }));
            case 'Image':
                return (React.createElement(CmsElementTypes_1.CmsImage, { context: bannerContext, element: element, hover: this.props.hover, onError: this.onCmsElementError }));
            case 'cmsButton':
                return (React.createElement(CmsElementTypes_1.CmsButton, { context: bannerContext, element: element, onError: this.onCmsElementError }));
            case 'Video':
                return (React.createElement(CmsElementTypes_1.CmsVideo, { context: bannerContext, element: element, onError: this.onCmsElementError }));
            default:
                return React.createElement("span", { "data-hook": "empty-element" });
        }
    };
    CmsElementComp.prototype.addStyles = function (styles, element, itterObj, context) {
        var _this = this;
        return itterObj.reduce(function (style, item) {
            _this.addToStyleIfDefined({
                style: style,
                element: element,
                attr: item.attr,
                styleName: item.styleName,
                prefix: item.prefix,
                suffix: item.suffix,
            }, context);
            return style;
        }, styles);
    };
    CmsElementComp.prototype.calculateStyle = function () {
        var element = this.props.element;
        var context = this.props.bannerContext;
        this.setIsStyleOnGlobal(this.calculateIfStyleOnGlobal(element));
        var styles = {};
        this.addStyles(styles, element, CmsElementCommon_1.CmsElementStyles, context);
        if (this.props.hover && element.type === 'cmsButton') {
            this.addStyles(styles, element, CmsElementCommon_1.CmsElementOnHOverStyles, context);
        }
        this.addFontWeightToStyle(styles, element, context);
        this.addFontStyleToStyle(styles, element, context);
        this.addCursorToStyle(styles, element, context);
        this.addFontDecorationToStyle(styles, element, context);
        return styles;
    };
    CmsElementComp.prototype.calculateIfStyleOnGlobal = function (element) {
        return CmsElementCommon_1.CmsElementStyles.some(function (_a) {
            var attr = _a.attr;
            return element.hasOwnProperty(attr);
        });
    };
    CmsElementComp.prototype.calculateClass = function () {
        var _a, _b;
        var context = this.props.bannerContext;
        var type = this.props.element.type;
        var className = ParamExtractor_1.extractParam(this.props.element, context, 'cssClass');
        var isClickable = ParamExtractor_1.extractParam(this.props.element, context, 'clickable');
        return classnames_1.default(s.cmsElement, this.getClassNames(className), (_a = {}, _a[s.cmsButton] = type === 'cmsButton', _a), (_b = {}, _b[s.cmsClickable] = isClickable, _b));
    };
    CmsElementComp.prototype.render = function () {
        var _a, _b;
        var dom = React.createElement("span", null);
        try {
            dom = (React.createElement("span", { className: this.calculateClass(), "data-hook": this.props.element.type, style: this.calculateStyle() }, this.renderElementByType()));
        }
        catch (error) {
            SentryReporter_1.reportSentryError(error, { reportingClass: 'CmsElementComp' });
            (_b = (_a = this.props).onError) === null || _b === void 0 ? void 0 : _b.call(_a, { errorType: 'ELEMENT', error: error });
        }
        return dom;
    };
    return CmsElementComp;
}(React.Component));
exports.CmsElement = WithMouseEventsHandlers_1.withMouseEventsHandlers(CmsElementComp);
//# sourceMappingURL=CmsElement.js.map