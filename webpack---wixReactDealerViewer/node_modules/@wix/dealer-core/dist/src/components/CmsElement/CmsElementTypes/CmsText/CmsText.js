"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CmsText = exports.CmsTextComp = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var react_i18next_1 = require("react-i18next");
var ParamExtractor_1 = require("@wix/dealer-common/dist/src/services/ParamExtractor");
var Catch_1 = require("../../Catch");
var CountDown_1 = require("./CountDown");
var countdownPrefix = '[[countdown?end_date=';
var countdownSuffix = ']]';
// @translate('', {wait: true})
var CmsTextComp = /** @class */ (function (_super) {
    tslib_1.__extends(CmsTextComp, _super);
    function CmsTextComp() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.sanitizedObjectFunc = function (translatedValue) { return ({ __html: translatedValue }); };
        _this.replaceDynamicParams = function (text, dynamicParams) {
            return text.replace(/\[\[(.*?)\]\]/g, function () {
                var params = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    params[_i] = arguments[_i];
                }
                return dynamicParams[params[1]] || params[0];
            });
        };
        _this.getTranslatedValue = function () {
            var context = _this.props.context;
            var staticParams = ParamExtractor_1.getStaticParams(_this.props.element, context) || {};
            var text = _this.props.t(_this.props.element.textKey, staticParams);
            if (_this.props.element.textKey &&
                !_this.props.i18n.exists(_this.props.element.textKey)) {
                _this.props.onWarning(new Error(_this.props.element.textKey + " key is not translated!"));
            }
            return text;
        };
        _this.isCountDownElement = function (translatedValue) {
            return translatedValue.includes(countdownPrefix);
        };
        _this.getSaleEndDateFromDynamicParams = function () {
            var saleEndDate = ParamExtractor_1.getSaleEndDateDynamicParam(_this.props.context);
            if (!_this.isUtcString(saleEndDate)) {
                throw new Error('did not get utc string as seasonal sale end date dynamic param. dynamic params:' +
                    JSON.stringify(_this.props.context.dynamicParams));
            }
            return saleEndDate;
        };
        _this.getCountDownEndTime = function (translatedValue) {
            var endTime = translatedValue.substring(translatedValue.indexOf(countdownPrefix) + countdownPrefix.length, translatedValue.indexOf(countdownSuffix));
            var utcString;
            if (endTime === 'seasonalSaleEndDate') {
                utcString = _this.getSaleEndDateFromDynamicParams();
            }
            else {
                if (!_this.isUtcString(endTime)) {
                    throw new Error("countdown date string is not valid date string:" + endTime);
                }
                utcString = endTime;
            }
            return utcString;
        };
        _this.renderText = function (translatedValue) {
            var context = _this.props.context;
            var dynamicParams = ParamExtractor_1.getDynamicParams(_this.props.element, context) || {};
            var dealerOptions = _this.props.dealerOptions || {};
            var paramsToReplace = tslib_1.__assign(tslib_1.__assign({}, dealerOptions), dynamicParams);
            var textWithDynamicParams = _this.replaceDynamicParams(translatedValue, paramsToReplace);
            return (React.createElement("span", { dangerouslySetInnerHTML: _this.sanitizedObjectFunc(textWithDynamicParams) }));
        };
        return _this;
    }
    CmsTextComp.prototype.isUtcString = function (utc) {
        // ISO-8601 UTC https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime
        var upcPattern = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
        return upcPattern.test(utc);
    };
    CmsTextComp.prototype.render = function () {
        var _this = this;
        var translatedValue = this.getTranslatedValue();
        return Catch_1.Catch({
            onError: this.props.onError,
            render: function () {
                return _this.isCountDownElement(translatedValue) ? (React.createElement(CountDown_1.CountDown, { onError: _this.props.onError, dateUtc: _this.getCountDownEndTime(translatedValue) })) : (_this.renderText(translatedValue));
            },
        });
    };
    return CmsTextComp;
}(React.Component));
exports.CmsTextComp = CmsTextComp;
exports.CmsText = react_i18next_1.translate('', { wait: true })(CmsTextComp);
//# sourceMappingURL=CmsText.js.map