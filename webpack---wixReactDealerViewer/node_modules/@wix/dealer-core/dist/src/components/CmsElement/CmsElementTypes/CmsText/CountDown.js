"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CountDown = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var dealer_common_1 = require("@wix/dealer-common");
var util_1 = require("util");
var CountDown = /** @class */ (function (_super) {
    tslib_1.__extends(CountDown, _super);
    // 2020-06-25T13:00:00Z
    function CountDown(props) {
        var _this = _super.call(this, props) || this;
        _this.parsedUtcCache = {};
        // im not using react lifecycle because i dont know what the current version of react and i cant use the proper lifecycle function
        _this.getEndTimeInMs = function () {
            if (_this.parsedUtcCache.utcString !== _this.props.dateUtc) {
                _this.parsedUtcCache.utcString = _this.props.dateUtc;
                _this.parsedUtcCache.utcMs = _this.dateStringToUtc(_this.props.dateUtc);
            }
            return _this.parsedUtcCache.utcMs;
        };
        _this.state = {};
        return _this;
    }
    CountDown.prototype.componentDidMount = function () {
        var _this = this;
        this.interval = setInterval(function () { return _this.updateTime(); }, 1000);
        this.updateTime();
    };
    CountDown.prototype.componentWillUnmount = function () {
        clearInterval(this.interval);
    };
    CountDown.prototype.render = function () {
        var timeDelta = this.state.timeDelta;
        return timeDelta ? (React.createElement("span", { "data-hook": "countdown" }, timeDelta.hours + " : " + timeDelta.minutes + " : " + timeDelta.seconds)) : (false);
    };
    CountDown.prototype.validateUtcString = function (utc) {
        // ISO-8601 UTC https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime
        var upcPattern = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
        if (!upcPattern.test(utc)) {
            throw new Error("countdown date string is not valid date string:" + utc);
        }
    };
    // prevent user to see NaN or -1 seconds
    CountDown.prototype.validateCalcDeltaTime = function (hours, minutes, seconds) {
        if (isNaN(hours) ||
            hours < 0 ||
            isNaN(minutes) ||
            minutes < 0 ||
            isNaN(seconds) ||
            seconds < 0) {
            throw new Error("calculated delta time not valid calculated time:" + {
                hours: hours,
                minutes: minutes,
                seconds: seconds,
            } + " utc string: \"" + this.props.dateUtc + "\" now is:" + Date.now());
        }
    };
    CountDown.prototype.onError = function (error) {
        dealer_common_1.reportSentryError(error, { reportingClass: 'CountDown' });
        clearInterval(this.interval);
        util_1.isFunction(this.props.onError) && this.props.onError(error);
        this.setState({ timeDelta: { hours: '--', minutes: '--', seconds: '--' } });
    };
    CountDown.prototype.updateTime = function () {
        try {
            var _a = this.calcTimeDelta(), hours = _a.hours, isTimerEnd = _a.isTimerEnd, minutes = _a.minutes, seconds = _a.seconds;
            if (isTimerEnd) {
                this.setState({
                    timeDelta: { hours: '00', minutes: '00', seconds: '00' },
                });
            }
            else {
                this.validateCalcDeltaTime(hours, minutes, seconds);
                this.setState({
                    timeDelta: {
                        hours: this.addZero(hours),
                        minutes: this.addZero(minutes),
                        seconds: this.addZero(seconds),
                    },
                });
            }
        }
        catch (e) {
            this.onError(new Error("countdown fail to render with error:" + e.stack));
        }
    };
    CountDown.prototype.calcTimeDelta = function () {
        var diff = this.getEndTimeInMs() - Date.now();
        return tslib_1.__assign({ isTimerEnd: diff <= 0 }, this.msToTime(diff));
    };
    CountDown.prototype.addZero = function (number) {
        return number < 10 ? "0" + number : number.toString();
    };
    CountDown.prototype.msToTime = function (ms) {
        var hours = Math.floor(ms / 3600000); // 1 Hour = 36000 Milliseconds
        var minutes = Math.floor((ms % 3600000) / 60000); // 1 Minutes = 60000 Milliseconds
        var seconds = Math.floor(((ms % 360000) % 60000) / 1000);
        return { hours: hours, minutes: minutes, seconds: seconds };
    };
    CountDown.prototype.dateStringToUtc = function (dateTime) {
        this.validateUtcString(dateTime);
        return new Date(dateTime).getTime();
    };
    return CountDown;
}(React.Component));
exports.CountDown = CountDown;
//# sourceMappingURL=CountDown.js.map