"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CmsElements = void 0;
var tslib_1 = require("tslib");
var React = require("react");
var style = require("./CmsElements.scss");
var scrollMonitor = require("scrollmonitor");
var CmsElement_1 = require("../CmsElement");
var DimensionCalculator_1 = require("@wix/dealer-common/dist/src/services/DimensionCalculator");
var throttle = require("lodash.throttle");
var SentryReporter_1 = require("@wix/dealer-common/dist/src/services/SentryReporter/SentryReporter");
var CmsElements = /** @class */ (function (_super) {
    tslib_1.__extends(CmsElements, _super);
    function CmsElements() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleScroll = function () {
            try {
                _this.elementWatcher.recalculateLocation();
            }
            catch (e) {
                SentryReporter_1.reportSentryError(e, {
                    realEstateId: _this.props.bannerPosition,
                    msId: _this.props.metasiteId,
                    reportingClass: 'CmsElements',
                });
                // We ignore problems with recalculateLocation.
                // This is an IE-11 issue,
                // we may miss the view event on page load, but events are still send in scroll and fullyEnterViewport cases.
            }
            _this.elementWatcher.update();
            if (_this.elementWatcher.isFullyInViewport) {
                _this.elementWatcher.destroy();
                _this.throttledScrollHandler.cancel();
                removeEventListener('scroll', _this.throttledScrollHandler, true);
                _this.reportViewEvent();
            }
        };
        _this.watchElementEnterViewPort = function () {
            _this.elementWatcher = scrollMonitor.create(_this.domElement);
            _this.throttledScrollHandler = throttle(_this.handleScroll, 50);
            addEventListener('scroll', _this.throttledScrollHandler, true);
            _this.throttledScrollHandler();
        };
        return _this;
    }
    CmsElements.prototype.componentDidMount = function () {
        if (this.domElement) {
            this.timeoutID = setTimeout(this.watchElementEnterViewPort, 500);
        }
    };
    CmsElements.prototype.componentWillUnmount = function () {
        clearTimeout(this.timeoutID);
        if (this.elementWatcher) {
            this.elementWatcher.destroy();
        }
        if (this.throttledScrollHandler) {
            this.throttledScrollHandler.cancel();
        }
        removeEventListener('scroll', this.throttledScrollHandler, true);
    };
    CmsElements.prototype.isAboveTheFold = function () {
        return (this.domElement.offsetTop + this.domElement.clientHeight <
            window.innerHeight);
    };
    CmsElements.prototype.reportViewEvent = function () {
        var onView = this.props.onView;
        var aboveTheFold = this.isAboveTheFold();
        onView && onView(aboveTheFold);
    };
    CmsElements.prototype.render = function () {
        var _this = this;
        var _a = this.props, cmsElementItems = _a.cmsElementItems, onError = _a.onError, onWarning = _a.onWarning, pageSettings = _a.pageSettings, cmsElementContext = _a.cmsElementContext, bannerRoot = _a.bannerRoot, bannerPosition = _a.bannerPosition, locale = _a.locale, metasiteId = _a.metasiteId, onClick = _a.onClick, onClose = _a.onClose, dealerOptions = _a.dealerOptions, biLogger = _a.biLogger, signedInstance = _a.signedInstance;
        var height = DimensionCalculator_1.calculateHeight(pageSettings, cmsElementContext);
        var width = DimensionCalculator_1.calculateWidth(pageSettings, cmsElementContext);
        var backgroundColor = (pageSettings && pageSettings.backgroundColor) || '#fff';
        var dealerStyle = { width: width, height: height, backgroundColor: backgroundColor };
        return (React.createElement("span", { ref: function (domElement) { return (_this.domElement = domElement); }, className: style.dealerRoot, style: dealerStyle, "data-hook": "dealer-viewer-elements" }, cmsElementItems.map(function (element) {
            return (React.createElement(CmsElement_1.CmsElement, { dealerOptions: dealerOptions, biLogger: biLogger, key: element.id, element: element, onError: onError, onWarning: onWarning, bannerContext: cmsElementContext, bannerPosition: bannerPosition, bannerRoot: bannerRoot, locale: locale, onClick: onClick, onClose: onClose, metasiteId: metasiteId, signedInstance: signedInstance }));
        })));
    };
    return CmsElements;
}(React.Component));
exports.CmsElements = CmsElements;
//# sourceMappingURL=CmsElements.js.map