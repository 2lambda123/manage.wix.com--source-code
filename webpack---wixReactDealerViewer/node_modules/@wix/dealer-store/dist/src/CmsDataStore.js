"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportError = exports.CmsDataStore = void 0;
var bi_events_1 = require("@wix/dealer-common/dist/src/services/BiLogger/bi-events");
var DealerApi_1 = require("@wix/dealer-client-api/dist/src/DealerApi");
var CmsDataStore = /** @class */ (function () {
    function CmsDataStore(initData) {
        var _this = this;
        this.load = function () { return __awaiter(_this, void 0, void 0, function () {
            var startTime, _a, bannerData, assetExist, isEmpty, experiments, error, loadTime;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        startTime = Date.now();
                        return [4 /*yield*/, DealerApi_1.DealerApi.loadAsset({
                                position: this.bannerPosition,
                                metasiteGuid: this.metasiteGuid,
                                fedopsLogger: this.fedopsLogger,
                                signedInstance: this.signedInstance,
                            }, { ignoreCache: false })];
                    case 1:
                        _a = _b.sent(), bannerData = _a.bannerData, assetExist = _a.assetExist, isEmpty = _a.isEmpty, experiments = _a.experiments, error = _a.error;
                        this.experiments = experiments;
                        if (assetExist()) {
                            this.dealerData = __assign(__assign({}, bannerData), { bannerTemplate: JSON.parse(bannerData.bannerTemplate) });
                            loadTime = Date.now() - startTime;
                            this.biLogger.log(bi_events_1.LOAD_EVENT, false, { loadTime: loadTime }, this.locale, this.metasiteGuid, this.getBannerRoot(), this.getBannerPosition());
                        }
                        else if (isEmpty && this.onEmpty) {
                            this.onEmpty();
                        }
                        else if (this.onError) {
                            reportError({
                                errorType: isEmpty ? 'EMPTY - pass onEmpty' : 'NETWORK',
                                error: error,
                            }, this.getBannerPosition(), this.onError);
                            throw Error('dealer-failed-to-load');
                        }
                        return [2 /*return*/, { isEmpty: isEmpty }];
                }
            });
        }); };
        this.isLightbox = function () { return _this.getBannerRoot().lightboxTriggers !== null; };
        this.getSaleType = function () { return _this.dealerData && _this.dealerData.saleType; };
        this.getDaysLeft = function () { return _this.dealerData && _this.dealerData.daysLeft; };
        this.getMetaSiteId = function () { return _this.metasiteGuid; };
        this.getBannerLocation = function () { return _this.bannerPosition; };
        this.getTranslationsUrl = function () { return _this.translationsUrl; };
        this.getSignedInstance = function () { return _this.signedInstance; };
        this.getExperiment = function (experimentName) {
            return _this.experiments &&
                _this.experiments[experimentName] === 'true'.toLowerCase();
        };
        this.getContext = function () { return ({
            saleType: _this.getSaleType(),
            locale: _this.locale,
            daysLeft: _this.getDaysLeft(),
            dynamicParams: _this.dealerData ? _this.dealerData.dynamicParams : {},
            experiments: _this.experiments,
        }); };
        this.getOnClose = function () { return _this.onClose; };
        this.getLocale = function () { return _this.locale; };
        this.biLogger = initData.biLogger;
        this.dealerData = initData.banners || null;
        this.bannerPosition = initData.bannerPosition;
        this.metasiteGuid = initData.metasiteGuid;
        this.signedInstance = initData.signedInstance;
        this.onClose = initData.onClose;
        this.onError = initData.onError;
        this.onEmpty = initData.onEmpty;
        this.locale = initData.locale || 'en';
        this.translationsUrl = initData.translationsUrl;
        this.experiments = initData.experiments;
        this.fedopsLogger = initData.fedopsLogger;
    }
    CmsDataStore.prototype.cmsElementItems = function () {
        return this.dealerData
            ? this.dealerData.bannerTemplate.Zone_main.items
            : [];
    };
    Object.defineProperty(CmsDataStore.prototype, "pageSettings", {
        get: function () {
            return this.dealerData ? this.dealerData.bannerTemplate.pageSetting : null;
        },
        enumerable: false,
        configurable: true
    });
    CmsDataStore.prototype.shouldShowBanner = function () {
        return !!(this.dealerData && this.dealerData.lightboxTriggers);
    };
    CmsDataStore.prototype.getBannerRoot = function () {
        return this.dealerData;
    };
    CmsDataStore.prototype.getBannerPosition = function () {
        return this.bannerPosition;
    };
    return CmsDataStore;
}());
exports.CmsDataStore = CmsDataStore;
function reportError(errorObj, bannerLocation, onError) {
    if (onError) {
        onError(__assign(__assign({}, errorObj), { bannerLocationOnPage: bannerLocation }));
    }
}
exports.reportError = reportError;
//# sourceMappingURL=CmsDataStore.js.map