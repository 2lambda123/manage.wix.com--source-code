"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractParam = exports.getStaticParams = exports.getDynamicParams = exports.getSaleEndDateDynamicParam = void 0;
var tslib_1 = require("tslib");
var FallbackMapper_1 = require("./FallbackMapper");
// @ts-ignore
var _get = require("lodash/get");
exports.getSaleEndDateDynamicParam = function (context) {
    var saleEndDate;
    try {
        saleEndDate = JSON.parse(context.dynamicParams.seasonalSaleEndDate);
    }
    catch (e) {
        saleEndDate = context.dynamicParams.seasonalSaleEndDate;
    }
    return saleEndDate;
};
exports.getDynamicParams = function (cmsElementRoot, context) {
    var dynamicParams = context.dynamicParams;
    return (cmsElementRoot.dynamicParams || []).reduce(function (accumulator, paramDetails) {
        var _a;
        var limit = paramDetails.limit
            ? parseInt(paramDetails.limit, 10)
            : null;
        var dynamicParamValue;
        if (paramDetails.name.startsWith('seasonalSaleEndDate=')) {
            dynamicParamValue = handleSaleEndDateStringDynamicParam(paramDetails.name, exports.getSaleEndDateDynamicParam(context), context.locale);
        }
        else if (paramDetails.type === 'dealerBo') {
            try {
                dynamicParamValue = JSON.parse(dynamicParams[paramDetails.name]);
            }
            catch (e) {
                dynamicParamValue = dynamicParams[paramDetails.name];
            }
            if (!dynamicParamValue ||
                (typeof dynamicParamValue === 'string' &&
                    limit &&
                    dynamicParamValue.length > limit)) {
                dynamicParamValue = paramDetails.defaultValue;
            }
        }
        else {
            var dynamicParamValueLength = dynamicParams[paramDetails.type]
                ? dynamicParams[paramDetails.type].length
                : 0;
            dynamicParamValue =
                !dynamicParams[paramDetails.type] ||
                    (limit && dynamicParamValueLength > limit)
                    ? paramDetails.defaultValue
                    : dynamicParams[paramDetails.type];
        }
        return tslib_1.__assign(tslib_1.__assign({}, accumulator), (_a = {}, _a[paramDetails.name] = dynamicParamValue, _a));
    }, {});
};
var isUtcString = function (utc) {
    // ISO-8601 UTC https://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime
    var upcPattern = /(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/;
    return upcPattern.test(utc);
};
var handleSaleEndDateStringDynamicParam = function (dynamicParamName, utcString, local) {
    if (!isUtcString(utcString)) {
        throw new Error("fail to convert seasonalSaleEndDate dynamic param to date string because dynamic param value is not valid utc staring. dynamic param value" + utcString + ", dynamic param name " + dynamicParamName);
    }
    var ptTimeZone = 'America/Los_Angeles';
    var date = new Date(utcString);
    if (local === 'th' &&
        [
            "seasonalSaleEndDate=time_PT" /* TIME_PT */,
            "seasonalSaleEndDate=date_num_PT" /* DATE_NUM_PT */,
            "seasonalSaleEndDate=date_short_PT" /* DATE_SHORT_PT */,
            "seasonalSaleEndDate=date_long_PT" /* DATE_LONG_PT */,
        ].includes(dynamicParamName)) {
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/Locale/calendar
        local = 'th-u-ca-gregory';
    }
    // this is product requirement to subtract one minute from sale end date in pt time.
    // the reason is the sale end date in pt time should be 11:59 of the date before
    var ptDate = new Date(date.getTime() - 60000);
    switch (dynamicParamName) {
        case "seasonalSaleEndDate=date_long_GMT" /* DATE_LONG_GMT */:
            return new Intl.DateTimeFormat(local, {
                day: 'numeric',
                month: 'long',
                year: 'numeric',
                timeZone: 'GMT',
            }).format(date);
        case "seasonalSaleEndDate=date_long_PT" /* DATE_LONG_PT */:
            return new Intl.DateTimeFormat(local, {
                day: 'numeric',
                month: 'long',
                year: 'numeric',
                timeZone: ptTimeZone,
            }).format(ptDate);
        case "seasonalSaleEndDate=date_short_GMT" /* DATE_SHORT_GMT */:
            return new Intl.DateTimeFormat(local, {
                day: 'numeric',
                month: 'short',
                year: 'numeric',
                timeZone: 'GMT',
            }).format(date);
        case "seasonalSaleEndDate=date_short_PT" /* DATE_SHORT_PT */:
            return new Intl.DateTimeFormat(local, {
                day: 'numeric',
                month: 'short',
                year: 'numeric',
                timeZone: ptTimeZone,
            }).format(ptDate);
        case "seasonalSaleEndDate=date_num_GMT" /* DATE_NUM_GMT */:
            return new Intl.DateTimeFormat(local, {
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                timeZone: 'GMT',
            }).format(date);
        case "seasonalSaleEndDate=date_num_PT" /* DATE_NUM_PT */:
            return new Intl.DateTimeFormat(local, {
                day: 'numeric',
                month: 'numeric',
                year: 'numeric',
                timeZone: ptTimeZone,
            }).format(ptDate);
        case "seasonalSaleEndDate=time_GMT" /* TIME_GMT */:
            var options = {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: 'GMT',
            };
            if (local === 'en') {
                options.hour12 = false;
            }
            return new Intl.DateTimeFormat(local, options).format(date);
        case "seasonalSaleEndDate=time_PT" /* TIME_PT */:
            return new Intl.DateTimeFormat(local, {
                hour: 'numeric',
                minute: 'numeric',
                timeZone: ptTimeZone,
            }).format(ptDate);
        default:
            throw new Error("dynamic param name :" + dynamicParamName + " starts with saleEndDate but contain wrong pattern");
    }
};
exports.getStaticParams = function (cmsElementRoot, context) {
    var paramsArray = _get(cmsElementRoot, getDataByStrategy(cmsElementRoot, context, ['params']));
    return (paramsArray || []).reduce(function (accumulator, paramKeyValue) {
        var _a;
        var cleanedKey = paramKeyValue.key.replace(/\{|\}/g, '');
        return tslib_1.__assign(tslib_1.__assign({}, accumulator), (_a = {}, _a[cleanedKey] = paramKeyValue.string, _a));
    }, {});
};
exports.extractParam = function (cmsElementRoot, context) {
    var names = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        names[_i - 2] = arguments[_i];
    }
    return _get(cmsElementRoot, getDataByStrategy(cmsElementRoot, context, names));
};
var getDataByStrategy = function (cmsElementRoot, context, paramPath) {
    var strategies = FallbackMapper_1.getParamExtractingStrategies(context, paramPath);
    return strategies.find(function (strategy) {
        var extracted = _get(cmsElementRoot, strategy);
        return extracted !== undefined && extracted !== ''; // extracted === 0 should be considered as valid and truthy.
    });
};
//# sourceMappingURL=ParamExtractor.js.map